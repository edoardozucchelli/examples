{"traceEvents": [{"ph": "M", "pid": 22324, "tid": 22324, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 22324, "tid": 22358, "name": "thread_name", "args": {"name": "Thread-19"}}, {"ph": "M", "pid": 22324, "tid": 22356, "name": "thread_name", "args": {"name": "Thread-18"}}, {"ph": "M", "pid": 22324, "tid": 22355, "name": "thread_name", "args": {"name": "Thread-17"}}, {"ph": "M", "pid": 22324, "tid": 22353, "name": "thread_name", "args": {"name": "Thread-16"}}, {"ph": "M", "pid": 22324, "tid": 22352, "name": "thread_name", "args": {"name": "Thread-15"}}, {"ph": "M", "pid": 22324, "tid": 22351, "name": "thread_name", "args": {"name": "Thread-14"}}, {"ph": "M", "pid": 22324, "tid": 22350, "name": "thread_name", "args": {"name": "Thread-13"}}, {"ph": "M", "pid": 22324, "tid": 22349, "name": "thread_name", "args": {"name": "Thread-12"}}, {"ph": "M", "pid": 22324, "tid": 22348, "name": "thread_name", "args": {"name": "Thread-11"}}, {"ph": "M", "pid": 22324, "tid": 22344, "name": "thread_name", "args": {"name": "Thread-10"}}, {"ph": "M", "pid": 22324, "tid": 22343, "name": "thread_name", "args": {"name": "Thread-9"}}, {"ph": "M", "pid": 22324, "tid": 22342, "name": "thread_name", "args": {"name": "Thread-8"}}, {"ph": "M", "pid": 22324, "tid": 22341, "name": "thread_name", "args": {"name": "Thread-7"}}, {"ph": "M", "pid": 22324, "tid": 22324, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 22324, "tid": 22341, "ts": 2853507107.343, "dur": 0.245, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507108.534, "dur": 0.095, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507108.107, "dur": 0.633, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507109.224, "dur": 0.061, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507106.86, "dur": 2.512, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507106.092, "dur": 3.359, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507110.304, "dur": 0.059, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507109.812, "dur": 0.923, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507112.157, "dur": 0.717, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507115.697, "dur": 0.452, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507116.869, "dur": 0.256, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507119.568, "dur": 0.183, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507124.379, "dur": 0.27, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507123.945, "dur": 0.898, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507123.018, "dur": 1.932, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507125.437, "dur": 0.902, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507126.969, "dur": 0.189, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507126.625, "dur": 0.94, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507127.817, "dur": 0.221, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507134.816, "dur": 0.105, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507135.671, "dur": 0.767, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507137.719, "dur": 0.1, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507138.163, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507138.427, "dur": 0.196, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507140.056, "dur": 0.621, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507141.235, "dur": 0.39, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507137.163, "dur": 4.542, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507134.439, "dur": 7.52, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507142.884, "dur": 0.727, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507143.743, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.098, "dur": 0.099, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.41, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507142.411, "dur": 2.095, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.686, "dur": 0.069, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.826, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.943, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507145.048, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507144.629, "dur": 0.518, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507146.084, "dur": 0.065, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507146.21, "dur": 0.063, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507146.332, "dur": 0.061, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507146.453, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507146.024, "dur": 0.523, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507147.005, "dur": 0.212, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507149.184, "dur": 0.585, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507150.139, "dur": 0.04, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507150.366, "dur": 0.19, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507158.785, "dur": 0.062, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507158.981, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507159.101, "dur": 0.203, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507159.572, "dur": 0.896, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507162.709, "dur": 0.281, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507163.286, "dur": 0.131, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507163.517, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507163.735, "dur": 0.396, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507164.245, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507164.491, "dur": 0.192, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507164.748, "dur": 0.252, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507165.053, "dur": 0.186, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507165.288, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507165.429, "dur": 0.469, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507165.949, "dur": 0.24, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.24, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.338, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.428, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.517, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.611, "dur": 0.102, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507166.764, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.053, "dur": 0.157, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.262, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.35, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.44, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.542, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.632, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.722, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.81, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507167.907, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.229, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.323, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.487, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.58, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.671, "dur": 0.172, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.894, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507168.984, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.089, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.185, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.342, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.699, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.787, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507169.88, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507170.04, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507170.13, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507170.221, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507170.379, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507175.562, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507175.727, "dur": 0.093, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507175.873, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507175.968, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.337, "dur": 0.145, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.535, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.628, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.72, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.812, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.898, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507176.987, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507177.072, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507177.16, "dur": 0.115, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507177.323, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507177.427, "dur": 0.195, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507177.673, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.006, "dur": 0.134, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.194, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.355, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.515, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.601, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.691, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.776, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.863, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507178.946, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507179.028, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507179.113, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507162.336, "dur": 16.924, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507179.775, "dur": 1.167, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507158.58, "dur": 22.695, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507150.046, "dur": 31.409, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507181.751, "dur": 0.124, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507181.948, "dur": 0.067, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507182.074, "dur": 0.522, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507182.668, "dur": 0.075, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507181.644, "dur": 1.152, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507183.714, "dur": 0.921, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507184.88, "dur": 0.459, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507185.495, "dur": 0.07, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507186.022, "dur": 0.902, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507121.53, "dur": 65.492, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507187.268, "dur": 0.232, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507187.887, "dur": 0.099, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507188.692, "dur": 0.088, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507193.891, "dur": 0.448, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507193.754, "dur": 0.765, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507192.32, "dur": 3.641, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507196.236, "dur": 0.659, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507197.187, "dur": 0.081, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507201.611, "dur": 0.66, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507201.098, "dur": 1.234, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507200.559, "dur": 1.906, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507198.984, "dur": 3.619, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507203.638, "dur": 0.251, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507203.527, "dur": 0.415, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507203.466, "dur": 0.554, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507203.194, "dur": 0.894, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507197.051, "dur": 7.434, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507204.657, "dur": 0.14, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507206.905, "dur": 0.075, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507207.189, "dur": 0.217, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507207.784, "dur": 0.066, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507207.975, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507208.092, "dur": 0.12, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507208.466, "dur": 0.126, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507208.788, "dur": 0.159, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507207.622, "dur": 1.378, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507206.784, "dur": 2.353, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507209.422, "dur": 0.083, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507209.604, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507209.718, "dur": 0.04, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507209.857, "dur": 0.039, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507209.331, "dur": 0.611, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507210.111, "dur": 0.054, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507210.232, "dur": 0.054, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507210.344, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507210.446, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507210.041, "dur": 0.493, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.16, "dur": 0.077, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.307, "dur": 0.055, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.421, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.541, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.083, "dur": 0.553, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507211.925, "dur": 0.109, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507212.607, "dur": 0.279, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.202, "dur": 0.035, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.372, "dur": 0.122, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.783, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.909, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507214.017, "dur": 0.068, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507214.262, "dur": 0.587, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507215.532, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507215.75, "dur": 0.13, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507217.47, "dur": 0.062, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507217.587, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507217.695, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507217.851, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507217.948, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.051, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.151, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.302, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.398, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.49, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.573, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.661, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.747, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.831, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507218.917, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.059, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.152, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.243, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.332, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.424, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.521, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.608, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.694, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.79, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507219.93, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.016, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.107, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.197, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.287, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.383, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.482, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.575, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.681, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.771, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.912, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507220.998, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.103, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.192, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.275, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.363, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.461, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.566, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.661, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.75, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.844, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507221.991, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507222.849, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507222.943, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.038, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.129, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.224, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.313, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.474, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.561, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507215.371, "dur": 8.308, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507223.908, "dur": 0.512, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.668, "dur": 10.91, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507213.101, "dur": 11.618, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507224.966, "dur": 0.108, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507225.141, "dur": 0.064, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507225.263, "dur": 0.277, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507225.603, "dur": 0.073, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507224.889, "dur": 0.839, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507226.196, "dur": 0.201, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507226.534, "dur": 0.266, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507226.879, "dur": 0.155, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507227.311, "dur": 0.185, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507189.192, "dur": 38.37, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507227.833, "dur": 0.169, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507228.242, "dur": 0.055, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507231.103, "dur": 1.01, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507235.203, "dur": 0.066, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507237.588, "dur": 0.053, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507237.261, "dur": 0.449, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507236.84, "dur": 0.991, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507238.518, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507238.709, "dur": 0.281, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507239.422, "dur": 0.053, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507239.631, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507239.759, "dur": 0.098, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507240.121, "dur": 0.24, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.121, "dur": 0.307, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.507, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.629, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.739, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.849, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507241.988, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.08, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.248, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.345, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.471, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.565, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507242.665, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507243.941, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.034, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.127, "dur": 0.228, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.405, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.498, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.739, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.833, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507244.929, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.024, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.128, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.226, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.318, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.408, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.498, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.642, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.735, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.83, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507245.917, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.008, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.105, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.193, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.283, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.371, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.465, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.677, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.768, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.856, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507246.952, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.042, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.129, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.216, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.301, "dur": 0.281, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.632, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.718, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.803, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507247.939, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.026, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.122, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.208, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.299, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.388, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.475, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.563, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.647, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.732, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507248.83, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507249.75, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507249.969, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.063, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.155, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.247, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.336, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.428, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.522, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.615, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.705, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.796, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.887, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507250.979, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.073, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.163, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.529, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.618, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.706, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.797, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.886, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507251.976, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.064, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.154, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.245, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.334, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.425, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.516, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.607, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.697, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.788, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507252.876, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.0, "dur": 0.116, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.166, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.26, "dur": 0.096, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.405, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.49, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.577, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.665, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.753, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.842, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507253.933, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.021, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.104, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.188, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.273, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.361, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507254.448, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.447, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.54, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.678, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.772, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.868, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507255.958, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.049, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.14, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.23, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.321, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.409, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.498, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.587, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.682, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.789, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.879, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507256.969, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.056, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.14, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.229, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.319, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.408, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.529, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.616, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.705, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.798, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.885, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507257.972, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.063, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.153, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.241, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.329, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.418, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.506, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.601, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.702, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.793, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.88, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507258.965, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.053, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.136, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.223, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.315, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.402, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.537, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507259.625, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.422, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.516, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.619, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.711, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.803, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.896, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507260.989, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.077, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.167, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.258, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.355, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.512, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.601, "dur": 0.16, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.811, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.902, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507261.992, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.08, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.237, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.33, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.42, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.508, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.596, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.684, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.815, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507262.906, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.0, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.089, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.181, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.271, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.365, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.45, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.536, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.622, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.711, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.799, "dur": 0.102, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507263.951, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.044, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.2, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.296, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.385, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.472, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.561, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.648, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.736, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.823, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507264.922, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507265.007, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507265.808, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507265.901, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507265.995, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.087, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.222, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.317, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.413, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.509, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.604, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.694, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.79, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.877, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507266.965, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.053, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.142, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.232, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.321, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.412, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.504, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.592, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.682, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.769, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.861, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507267.948, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.036, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.125, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.214, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.302, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.392, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.485, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.576, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.665, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.754, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.842, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507268.931, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.018, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.133, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.22, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.309, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.396, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.484, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.574, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.663, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.753, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.84, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507269.929, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507270.853, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507270.947, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.039, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.133, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.224, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.312, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.414, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.501, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.587, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.675, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.761, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.849, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507271.937, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.025, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.109, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.196, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.285, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.373, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.456, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.54, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.629, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.712, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.798, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.883, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507272.969, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507273.059, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507274.636, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507274.736, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507274.827, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507274.918, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.008, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.097, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.188, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.279, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.371, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.46, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.551, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.636, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.725, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.813, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.899, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507275.99, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507276.077, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507276.163, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507276.25, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507276.341, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507276.429, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.373, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.469, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.561, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.65, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.757, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.848, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507277.941, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.026, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.116, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.201, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.288, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.377, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.465, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.559, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.648, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.74, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.83, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507278.925, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.013, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.144, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.238, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.329, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.421, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.519, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.607, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.705, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.793, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.879, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507279.966, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.056, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.14, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.223, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.31, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.396, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.483, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.571, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.654, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.754, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.839, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507280.928, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.014, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.1, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.186, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.27, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.371, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.469, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507281.558, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507282.591, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507282.685, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507282.776, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507282.868, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507282.96, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.054, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.142, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.233, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.322, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.412, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.501, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507240.98, "dur": 42.655, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507283.818, "dur": 2.156, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507239.219, "dur": 47.398, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507238.394, "dur": 48.358, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507238.064, "dur": 48.835, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507288.677, "dur": 0.07, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507288.871, "dur": 0.203, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507289.282, "dur": 0.044, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507234.136, "dur": 55.497, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507232.289, "dur": 57.678, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507295.273, "dur": 0.56, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507294.9, "dur": 0.991, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507297.392, "dur": 0.094, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507296.878, "dur": 0.797, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507299.269, "dur": 0.34, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507299.093, "dur": 0.595, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507301.193, "dur": 153.042, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507455.6, "dur": 0.251, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507298.946, "dur": 157.629, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507458.741, "dur": 0.247, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507458.045, "dur": 1.046, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507293.622, "dur": 165.743, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507291.082, "dur": 168.817, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507228.655, "dur": 231.462, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507460.817, "dur": 0.454, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507111.26, "dur": 350.071, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507103.641, "dur": 359.11, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22341, "ts": 2853507464.147, "dur": 0.334, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373170.862, "dur": 0.226, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373172.27, "dur": 0.114, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373171.715, "dur": 0.805, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373172.976, "dur": 0.075, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373170.325, "dur": 2.824, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373169.059, "dur": 4.186, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373174.123, "dur": 0.137, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373173.587, "dur": 12.215, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373187.784, "dur": 0.874, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373192.267, "dur": 0.542, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373193.77, "dur": 0.204, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373196.354, "dur": 0.166, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373202.84, "dur": 0.444, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373202.125, "dur": 1.342, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373200.356, "dur": 3.237, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373204.064, "dur": 0.457, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373205.166, "dur": 0.087, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373211.122, "dur": 0.349, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373210.639, "dur": 0.897, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373209.981, "dur": 1.71, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373207.867, "dur": 3.983, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373213.091, "dur": 0.275, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373212.961, "dur": 0.456, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373212.854, "dur": 0.652, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373212.537, "dur": 1.063, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373204.804, "dur": 9.236, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373214.299, "dur": 0.224, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373216.15, "dur": 0.205, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373219.909, "dur": 0.791, "name": "builtins.repr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373223.389, "dur": 0.117, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373224.373, "dur": 0.95, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373226.79, "dur": 0.106, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373227.302, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373227.586, "dur": 0.232, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373229.303, "dur": 0.672, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373230.614, "dur": 0.436, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373226.192, "dur": 4.937, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373222.882, "dur": 8.527, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373232.476, "dur": 0.616, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373233.236, "dur": 0.121, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373233.642, "dur": 0.095, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373233.882, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373231.911, "dur": 2.079, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373234.206, "dur": 0.067, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373234.34, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373234.45, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373234.559, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373234.136, "dur": 0.519, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373236.0, "dur": 0.064, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373236.132, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373236.257, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373236.37, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373235.926, "dur": 0.548, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373237.017, "dur": 0.157, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373240.974, "dur": 0.618, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373242.078, "dur": 0.047, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373242.325, "dur": 0.147, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373242.903, "dur": 0.057, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373243.121, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373243.26, "dur": 0.107, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373243.586, "dur": 0.138, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373246.487, "dur": 0.399, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373247.43, "dur": 0.059, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373245.971, "dur": 1.657, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373248.05, "dur": 0.413, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373242.721, "dur": 5.963, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373241.916, "dur": 6.905, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373249.107, "dur": 0.055, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373249.24, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373249.362, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373249.478, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373249.014, "dur": 0.56, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373250.664, "dur": 0.902, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373251.939, "dur": 0.342, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373252.482, "dur": 1.18, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373255.297, "dur": 0.185, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373254.506, "dur": 1.074, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373256.044, "dur": 0.152, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373258.583, "dur": 0.105, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373258.78, "dur": 0.071, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373258.964, "dur": 0.091, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373259.17, "dur": 0.081, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373258.386, "dur": 0.998, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373272.051, "dur": 0.616, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373198.383, "dur": 74.652, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373273.649, "dur": 0.411, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373274.847, "dur": 0.231, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373276.575, "dur": 0.14, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373280.205, "dur": 0.344, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373279.9, "dur": 0.874, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373278.73, "dur": 2.174, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373281.215, "dur": 0.221, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373281.814, "dur": 0.09, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373283.378, "dur": 0.178, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373283.141, "dur": 0.478, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373283.006, "dur": 0.737, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373282.585, "dur": 1.291, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373284.474, "dur": 0.071, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373284.37, "dur": 0.234, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373284.28, "dur": 0.429, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373284.185, "dur": 3.161, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373281.688, "dur": 6.237, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373288.164, "dur": 0.237, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373289.266, "dur": 0.21, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373292.797, "dur": 0.108, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373293.182, "dur": 0.424, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373294.072, "dur": 0.082, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373294.393, "dur": 0.039, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373294.558, "dur": 0.148, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373295.189, "dur": 0.253, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373295.649, "dur": 0.192, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373293.883, "dur": 2.019, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373292.619, "dur": 3.481, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373296.441, "dur": 0.257, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373296.788, "dur": 0.062, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373296.934, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.057, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373296.324, "dur": 0.836, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.339, "dur": 0.066, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.47, "dur": 0.055, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.587, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.699, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373297.268, "dur": 0.535, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373298.849, "dur": 0.071, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373298.986, "dur": 0.061, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373299.113, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373299.226, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373298.775, "dur": 0.548, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373299.644, "dur": 0.091, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373300.358, "dur": 0.222, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373300.958, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373301.158, "dur": 0.123, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373301.644, "dur": 0.058, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373301.873, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373301.988, "dur": 0.076, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373302.264, "dur": 0.11, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373306.575, "dur": 17.852, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373304.621, "dur": 20.006, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373303.623, "dur": 21.157, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373325.331, "dur": 0.495, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373325.189, "dur": 0.728, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373324.973, "dur": 1.024, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373303.379, "dur": 22.717, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373326.369, "dur": 0.184, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373301.486, "dur": 25.216, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373300.837, "dur": 26.018, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373327.116, "dur": 0.074, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373328.68, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373328.799, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373328.908, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373327.04, "dur": 1.957, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373329.472, "dur": 0.263, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373329.873, "dur": 0.196, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373330.147, "dur": 0.313, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373330.712, "dur": 0.178, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373330.594, "dur": 0.34, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373331.126, "dur": 0.092, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373332.267, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373332.378, "dur": 20.276, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373352.733, "dur": 0.155, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373352.978, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373332.202, "dur": 20.901, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373353.728, "dur": 0.243, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373277.364, "dur": 76.694, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373354.392, "dur": 0.142, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373354.829, "dur": 0.063, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373357.807, "dur": 1.267, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373363.454, "dur": 0.06, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373365.452, "dur": 0.043, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373365.31, "dur": 0.245, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373365.045, "dur": 0.607, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373366.348, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373366.594, "dur": 0.856, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373367.778, "dur": 0.058, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373367.969, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373368.101, "dur": 0.078, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373368.517, "dur": 0.29, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373369.795, "dur": 0.291, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373370.26, "dur": 0.118, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373370.507, "dur": 0.203, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373370.828, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373370.998, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373371.19, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373371.286, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373371.45, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373371.621, "dur": 0.174, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.0, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.158, "dur": 0.207, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.42, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.516, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.622, "dur": 0.258, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373372.934, "dur": 0.224, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373373.211, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373374.532, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373374.879, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373374.979, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.076, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.18, "dur": 0.212, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.448, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.553, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.651, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.749, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373375.843, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.185, "dur": 0.185, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.425, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.521, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.616, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.711, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.805, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373376.898, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373377.065, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373377.159, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373377.256, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373377.688, "dur": 0.097, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373377.843, "dur": 0.182, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.083, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.179, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.273, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.372, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.466, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.559, "dur": 0.177, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.791, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.885, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373378.979, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.288, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.385, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.479, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.593, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.763, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.86, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373379.96, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373380.071, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373380.167, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373380.263, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373380.356, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373380.448, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373381.221, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373381.323, "dur": 0.115, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373381.61, "dur": 0.189, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373381.859, "dur": 0.419, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.229, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.33, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.425, "dur": 0.21, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.689, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.785, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.881, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373383.984, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373384.137, "dur": 0.208, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373384.397, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373384.56, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.108, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.205, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.3, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.392, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.49, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.586, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.682, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.775, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373385.924, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.026, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.121, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.216, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.309, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.402, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.51, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.607, "dur": 0.228, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373386.928, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.026, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.127, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.225, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.318, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.416, "dur": 0.171, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.642, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.735, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.83, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373387.934, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.033, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.141, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.239, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.335, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.43, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.524, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.621, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.718, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.843, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373388.941, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.343, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.441, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.536, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.64, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.733, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.828, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373390.922, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.018, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.114, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.206, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.296, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.389, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.553, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.647, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.743, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.835, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373391.925, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.016, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.148, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.245, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.34, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.436, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.529, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.626, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.718, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.813, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373392.907, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.001, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.098, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.199, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.289, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.382, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.476, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.568, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.659, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.774, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.873, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373393.967, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.062, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.155, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.282, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.381, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.474, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.568, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.659, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.753, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373394.85, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373396.899, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.066, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.158, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.253, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.553, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.648, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.744, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.849, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373397.945, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.041, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.138, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.236, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.331, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.428, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.518, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.616, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.71, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.804, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373398.929, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.019, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.114, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.224, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.317, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.408, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.499, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.605, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.702, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.795, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.891, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373399.984, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.077, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.166, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.258, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.353, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.445, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.538, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.633, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.728, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.823, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373400.918, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373401.009, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373401.103, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373401.197, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373401.288, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373369.583, "dur": 31.821, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373401.626, "dur": 1.832, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373367.629, "dur": 39.444, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373366.223, "dur": 41.046, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373365.917, "dur": 41.517, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373409.216, "dur": 0.101, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373409.462, "dur": 0.245, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373409.894, "dur": 0.052, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373361.826, "dur": 48.504, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373359.276, "dur": 51.443, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373429.051, "dur": 0.912, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373428.731, "dur": 1.301, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373431.728, "dur": 0.132, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373431.139, "dur": 0.907, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373433.558, "dur": 0.33, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373433.353, "dur": 0.611, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373435.592, "dur": 7.467, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373443.286, "dur": 0.154, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373433.097, "dur": 10.558, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373444.629, "dur": 0.116, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373444.275, "dur": 0.556, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373427.275, "dur": 17.777, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373412.041, "dur": 33.313, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373355.308, "dur": 90.173, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373445.836, "dur": 0.257, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373186.595, "dur": 259.582, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373166.726, "dur": 280.228, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22342, "ts": 2856373447.806, "dur": 0.185, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767726.443, "dur": 0.583, "name": "time.perf_counter", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767760.443, "dur": 21.561, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767799.303, "dur": 2.259, "name": "_newname (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:734)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767807.489, "dur": 0.811, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767810.52, "dur": 5.475, "name": "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767806.562, "dur": 10.131, "name": "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:505)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767821.646, "dur": 2.622, "name": "_make_invoke_excepthook (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1177)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767838.137, "dur": 0.36, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767835.685, "dur": 2.982, "name": "add (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767795.467, "dur": 43.365, "name": "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767843.611, "dur": 2.288, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767853.627, "dur": 0.123, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767970.547, "dur": 0.987, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767971.856, "dur": 26.173, "name": "_thread.start_new_thread", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767967.172, "dur": 31.015, "name": "pydev_start_new_thread (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py:845)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768005.06, "dur": 0.439, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768004.628, "dur": 0.987, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768010.408, "dur": 0.333, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768010.174, "dur": 0.73, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768011.26, "dur": 0.327, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768011.731, "dur": 0.109, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768020.213, "dur": 0.159, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768022.645, "dur": 0.122, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768022.336, "dur": 0.517, "name": "_release_save (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768023.287, "dur": 10339.932, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778372.531, "dur": 0.252, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778372.12, "dur": 0.8, "name": "_acquire_restore (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:258)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768008.519, "dur": 10364.933, "name": "wait (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:270)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778377.921, "dur": 0.098, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778377.473, "dur": 0.658, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862768002.528, "dur": 10375.956, "name": "wait (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:540)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767851.69, "dur": 10527.27, "name": "start (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:834)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778393.991, "dur": 11.166, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778416.356, "dur": 0.311, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778419.255, "dur": 0.207, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778418.893, "dur": 1.024, "name": "current_thread (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833415.456, "dur": 0.27, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833416.664, "dur": 0.111, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833416.29, "dur": 0.617, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833417.405, "dur": 0.083, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833415.0, "dur": 2.569, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833414.363, "dur": 3.275, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833418.655, "dur": 0.085, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833418.273, "dur": 0.599, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833420.287, "dur": 0.638, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833423.412, "dur": 0.433, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833424.27, "dur": 0.15, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833426.51, "dur": 0.166, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833430.406, "dur": 0.248, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833429.963, "dur": 0.892, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833429.351, "dur": 1.608, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833431.404, "dur": 0.384, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833432.508, "dur": 0.124, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833432.08, "dur": 1.332, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833433.629, "dur": 0.194, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833434.925, "dur": 0.203, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833439.669, "dur": 0.109, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833440.5, "dur": 0.918, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833443.037, "dur": 0.086, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833443.475, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833443.746, "dur": 0.217, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833445.295, "dur": 0.549, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833446.144, "dur": 0.34, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833442.161, "dur": 4.397, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833439.196, "dur": 7.607, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833447.724, "dur": 0.283, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833448.424, "dur": 0.106, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833448.796, "dur": 0.1, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833450.835, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833447.28, "dur": 3.656, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833451.14, "dur": 0.059, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833451.26, "dur": 0.054, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833451.371, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833451.468, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833451.082, "dur": 0.475, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833452.554, "dur": 0.053, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833452.668, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833452.767, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833452.866, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833452.496, "dur": 0.459, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833453.357, "dur": 0.129, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833455.027, "dur": 0.484, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833455.933, "dur": 0.049, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833456.187, "dur": 0.255, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833456.772, "dur": 0.052, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833456.964, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833457.067, "dur": 0.097, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833457.352, "dur": 0.095, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833457.587, "dur": 0.095, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833456.621, "dur": 1.122, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833455.787, "dur": 2.064, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833458.033, "dur": 0.051, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833458.142, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833458.245, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833458.344, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833457.948, "dur": 0.485, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833459.089, "dur": 0.846, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833460.145, "dur": 0.244, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833460.54, "dur": 0.619, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833461.753, "dur": 0.122, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833461.572, "dur": 0.346, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833462.185, "dur": 0.071, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833463.192, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833463.303, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833463.409, "dur": 0.04, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833463.505, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833463.102, "dur": 0.49, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833464.47, "dur": 0.514, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833427.968, "dur": 37.112, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833465.396, "dur": 0.251, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833465.979, "dur": 0.127, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833466.66, "dur": 0.104, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833468.088, "dur": 0.1, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833467.956, "dur": 0.395, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833467.469, "dur": 2.012, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833469.744, "dur": 0.128, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833470.137, "dur": 0.079, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833470.038, "dur": 0.339, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833470.511, "dur": 0.112, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833471.243, "dur": 0.091, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833473.322, "dur": 0.07, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833473.594, "dur": 0.106, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833474.069, "dur": 0.053, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833474.239, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833474.358, "dur": 0.109, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833474.707, "dur": 0.114, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833474.935, "dur": 0.074, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833473.887, "dur": 1.179, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833473.196, "dur": 1.991, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833475.472, "dur": 0.072, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833475.611, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833475.718, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833475.826, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833475.389, "dur": 0.523, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833476.083, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833476.188, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833476.292, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833476.394, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833476.02, "dur": 0.466, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.079, "dur": 0.066, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.204, "dur": 0.053, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.315, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.417, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.021, "dur": 0.488, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833477.808, "dur": 0.072, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833478.237, "dur": 0.146, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833478.701, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833478.867, "dur": 0.122, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833479.273, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833479.398, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833479.495, "dur": 0.104, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833479.764, "dur": 0.108, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833482.011, "dur": 0.351, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833482.555, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833481.59, "dur": 1.224, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833483.304, "dur": 0.178, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833479.14, "dur": 4.491, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833478.609, "dur": 5.135, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833483.964, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833484.073, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833484.174, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833485.318, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833483.89, "dur": 1.519, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833485.83, "dur": 0.276, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833486.232, "dur": 0.076, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833486.391, "dur": 0.263, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833486.911, "dur": 0.117, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833486.773, "dur": 0.3, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833487.236, "dur": 0.084, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833487.895, "dur": 0.053, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833488.008, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833488.113, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833488.215, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833487.824, "dur": 0.486, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833488.756, "dur": 0.194, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833467.077, "dur": 21.951, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833489.292, "dur": 0.167, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833489.695, "dur": 0.06, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833491.678, "dur": 1.207, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833496.461, "dur": 0.06, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833498.119, "dur": 0.046, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833497.956, "dur": 0.259, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833497.651, "dur": 0.651, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833498.957, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833499.167, "dur": 0.397, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833499.929, "dur": 0.052, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833500.085, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833500.195, "dur": 0.091, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833500.53, "dur": 0.395, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833502.133, "dur": 0.316, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833502.617, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833502.866, "dur": 0.204, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.191, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.356, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.551, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.641, "dur": 0.102, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.794, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833503.955, "dur": 0.183, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833504.302, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833504.466, "dur": 0.263, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833504.781, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833504.87, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833504.961, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833505.129, "dur": 0.204, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833505.383, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833505.476, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833505.737, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833506.894, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833506.989, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.09, "dur": 0.274, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.417, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.513, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.606, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.695, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833507.78, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.187, "dur": 0.175, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.416, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.508, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.599, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.687, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.777, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833508.865, "dur": 0.42, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833509.333, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833509.419, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833509.506, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833509.838, "dur": 0.097, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833509.984, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.14, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.223, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.308, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.396, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.482, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.567, "dur": 0.129, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.746, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.848, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833510.933, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.312, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.398, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.487, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.575, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.735, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.821, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.911, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833511.999, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.086, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.177, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.26, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.346, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.662, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.757, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.858, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833512.947, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833513.038, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833513.127, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.045, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.21, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.37, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.458, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.547, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.633, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.719, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833514.807, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.22, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.315, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.409, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.506, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.605, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.69, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.779, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.866, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833515.951, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.039, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.13, "dur": 0.195, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.374, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.462, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.549, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.636, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.72, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.835, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833516.927, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.014, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.108, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.272, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.368, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.524, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.615, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.701, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.788, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.877, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833517.965, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.054, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.153, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.241, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.325, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.409, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.495, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.618, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.704, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.791, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833518.879, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833519.766, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833519.863, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833519.957, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.05, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.139, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.298, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.387, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.473, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.558, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.643, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.731, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.819, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.905, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833520.991, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.078, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.163, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.293, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.384, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.478, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.57, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.677, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.765, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.857, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833521.944, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.03, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.116, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.201, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.286, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.376, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.469, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.554, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.643, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.73, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.818, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.906, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833522.993, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.078, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.163, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.279, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.435, "dur": 0.209, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.695, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.849, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833523.937, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833524.024, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833524.113, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833524.198, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833524.286, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.184, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.277, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.372, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.464, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.554, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.643, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.733, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.819, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.903, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833525.989, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.075, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.163, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.248, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.335, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.419, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.505, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.632, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.724, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.82, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833526.911, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.002, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.091, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.179, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.266, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.351, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.437, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.595, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.681, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.768, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.857, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833527.946, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.037, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.124, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.209, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.297, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.386, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.474, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833501.98, "dur": 26.608, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833528.795, "dur": 1.485, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833499.758, "dur": 31.046, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833498.859, "dur": 32.096, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833498.567, "dur": 32.549, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833532.466, "dur": 0.064, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833532.652, "dur": 0.205, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833533.08, "dur": 0.046, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833495.102, "dur": 38.314, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833493.18, "dur": 41.484, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833538.238, "dur": 0.489, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833537.897, "dur": 0.899, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833540.183, "dur": 0.084, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833539.778, "dur": 0.639, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833541.841, "dur": 0.317, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833541.641, "dur": 0.583, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833543.391, "dur": 6.055, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833549.683, "dur": 0.134, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833541.494, "dur": 8.489, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833550.829, "dur": 0.11, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833550.553, "dur": 0.47, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833536.957, "dur": 14.26, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833535.388, "dur": 16.093, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833490.061, "dur": 61.545, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833551.934, "dur": 0.246, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833419.294, "dur": 132.945, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833412.419, "dur": 140.488, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22344, "ts": 2862833553.695, "dur": 0.132, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2864581541.822, "dur": 0.785, "name": "time.perf_counter", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2868110027.052, "dur": 2.367, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2868110029.797, "dur": 12.048, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062241.502, "dur": 0.242, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062242.8, "dur": 0.118, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062242.3, "dur": 0.737, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062243.589, "dur": 0.079, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062240.896, "dur": 2.869, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062239.917, "dur": 3.932, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062244.741, "dur": 0.454, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062244.174, "dur": 1.174, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062247.294, "dur": 0.7, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062250.769, "dur": 0.384, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062252.242, "dur": 0.454, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062255.225, "dur": 0.27, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062261.514, "dur": 0.471, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062260.916, "dur": 1.347, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062259.235, "dur": 3.159, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062262.842, "dur": 0.663, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062264.19, "dur": 0.129, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062269.388, "dur": 0.338, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062268.809, "dur": 0.996, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062268.239, "dur": 1.719, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062266.591, "dur": 3.526, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062271.405, "dur": 0.219, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062271.258, "dur": 0.421, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062271.155, "dur": 0.621, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062270.782, "dur": 1.073, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062263.813, "dur": 22.294, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062286.567, "dur": 0.294, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062293.972, "dur": 0.172, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062296.566, "dur": 0.218, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062295.225, "dur": 2.523, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062298.557, "dur": 3.022, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062291.791, "dur": 9.885, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062303.943, "dur": 0.121, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062304.877, "dur": 0.908, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062307.339, "dur": 0.102, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062307.811, "dur": 0.04, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062308.079, "dur": 0.219, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062309.725, "dur": 0.653, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062310.766, "dur": 0.38, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062306.704, "dur": 4.521, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062303.431, "dur": 8.09, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062312.541, "dur": 13.931, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062326.634, "dur": 0.153, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.043, "dur": 0.11, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.3, "dur": 0.039, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062311.972, "dur": 15.434, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.627, "dur": 0.071, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.757, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.873, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.973, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062327.554, "dur": 0.515, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062329.522, "dur": 0.057, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062329.639, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062329.755, "dur": 0.051, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062329.866, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062329.443, "dur": 0.515, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062330.389, "dur": 0.166, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062332.432, "dur": 0.559, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062333.385, "dur": 0.039, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062333.587, "dur": 0.176, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062334.101, "dur": 0.049, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062334.27, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062334.382, "dur": 0.105, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062334.66, "dur": 0.149, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062337.483, "dur": 0.345, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062338.117, "dur": 0.486, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062338.758, "dur": 0.197, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062339.01, "dur": 0.246, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062339.371, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062339.558, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062339.728, "dur": 0.229, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062341.754, "dur": 0.236, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062342.047, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062342.382, "dur": 0.097, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062344.831, "dur": 6.539, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062343.209, "dur": 8.393, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062342.537, "dur": 9.663, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062353.047, "dur": 0.764, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062337.053, "dur": 16.856, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062354.283, "dur": 1.171, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062333.963, "dur": 21.667, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062333.24, "dur": 22.587, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062356.139, "dur": 0.089, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062356.307, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062356.426, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062356.531, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062356.046, "dur": 0.576, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062357.526, "dur": 0.778, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062358.527, "dur": 0.315, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062359.183, "dur": 0.126, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062359.817, "dur": 0.252, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062257.409, "dur": 102.762, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062360.523, "dur": 0.153, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062360.925, "dur": 0.052, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062363.76, "dur": 0.841, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062368.315, "dur": 0.076, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062371.15, "dur": 0.049, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062370.849, "dur": 0.407, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062370.387, "dur": 0.975, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062371.99, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062372.247, "dur": 0.186, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062372.838, "dur": 0.035, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062373.004, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062373.129, "dur": 0.096, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062373.421, "dur": 0.251, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062374.452, "dur": 0.345, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062374.906, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062375.083, "dur": 0.203, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062375.342, "dur": 0.116, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062375.517, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062375.676, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062375.765, "dur": 0.528, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.346, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.439, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.577, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.737, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.83, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062376.92, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062378.41, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062378.509, "dur": 0.215, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062378.777, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062378.869, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.214, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.304, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.395, "dur": 0.096, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.544, "dur": 0.272, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.867, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062379.963, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.05, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.134, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.236, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.618, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.708, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.797, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.886, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062380.979, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062381.075, "dur": 0.064, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062381.189, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062381.278, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062381.377, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062381.466, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.085, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.176, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.334, "dur": 0.237, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.621, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.711, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.802, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062382.958, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.045, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.132, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.221, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.309, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.661, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.748, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.836, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062383.941, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.03, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.118, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.205, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.297, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.392, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.494, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.58, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062384.668, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062385.03, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.073, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.168, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.26, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.351, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.449, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.555, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.645, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.737, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.826, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062386.915, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.0, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.091, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.184, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.581, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.672, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.76, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.851, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062387.945, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.036, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.13, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.283, "dur": 0.094, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.428, "dur": 0.262, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062390.181, "dur": 0.637, "name": "builtins.chr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.972, "dur": 2.018, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062388.742, "dur": 2.329, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.134, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.241, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.336, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.426, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.517, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.611, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.814, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062391.91, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.004, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.094, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.185, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.271, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.36, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.449, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.539, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.628, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.715, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.805, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.891, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062392.984, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062393.07, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.038, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.135, "dur": 0.163, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.35, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.481, "dur": 0.127, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.66, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.754, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.844, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062394.935, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062395.028, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062395.118, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062374.283, "dur": 20.97, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062395.423, "dur": 0.968, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062372.648, "dur": 23.996, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062371.883, "dur": 24.92, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062371.579, "dur": 25.347, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062399.02, "dur": 0.075, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062399.23, "dur": 0.17, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062399.586, "dur": 0.045, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062366.996, "dur": 33.402, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062364.786, "dur": 35.954, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062405.968, "dur": 0.831, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062405.629, "dur": 1.241, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062408.5, "dur": 0.155, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062407.923, "dur": 0.909, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062410.554, "dur": 0.389, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062410.2, "dur": 0.828, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062412.862, "dur": 1470.754, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869063885.197, "dur": 0.427, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062409.998, "dur": 1476.395, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869063890.56, "dur": 0.249, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869063889.347, "dur": 1.582, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062404.202, "dur": 1487.184, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062402.293, "dur": 1489.584, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062361.323, "dur": 1531.144, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869063893.073, "dur": 0.632, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062245.964, "dur": 1647.812, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869062237.22, "dur": 1658.486, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22348, "ts": 2869063897.887, "dur": 0.395, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2871201762.64, "dur": 0.446, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2871201761.938, "dur": 1.719, "name": "current_thread (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2871201768.071, "dur": 0.524, "name": "name (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1031)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230492.898, "dur": 0.254, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230494.278, "dur": 0.098, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230493.606, "dur": 0.876, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230494.978, "dur": 0.074, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230492.226, "dur": 2.902, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230491.452, "dur": 3.744, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230505.479, "dur": 0.095, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230504.995, "dur": 0.72, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230507.513, "dur": 0.776, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230517.068, "dur": 0.772, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230518.705, "dur": 0.141, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230521.026, "dur": 0.199, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230527.701, "dur": 0.667, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230527.062, "dur": 1.553, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230525.492, "dur": 3.23, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230529.229, "dur": 0.493, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230530.452, "dur": 0.236, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230530.001, "dur": 1.109, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230531.349, "dur": 0.21, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230537.133, "dur": 0.165, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230539.773, "dur": 2.705, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230539.246, "dur": 3.397, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230542.74, "dur": 0.144, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230538.287, "dur": 5.264, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230544.069, "dur": 1.675, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230535.164, "dur": 10.695, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230548.339, "dur": 0.098, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230549.202, "dur": 0.957, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230551.539, "dur": 0.092, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230552.084, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230552.349, "dur": 0.216, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230553.934, "dur": 0.521, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230554.813, "dur": 0.387, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230551.009, "dur": 4.265, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230547.623, "dur": 8.079, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230556.763, "dur": 0.756, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230557.714, "dur": 0.119, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.09, "dur": 0.109, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.394, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230556.178, "dur": 2.311, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.656, "dur": 0.127, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.84, "dur": 0.059, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.952, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230559.064, "dur": 0.052, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230558.593, "dur": 0.574, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230560.261, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230560.376, "dur": 0.054, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230560.489, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230560.605, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230560.205, "dur": 0.496, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230561.084, "dur": 0.162, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230563.512, "dur": 0.605, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230566.324, "dur": 0.076, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230566.604, "dur": 0.196, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230567.15, "dur": 0.082, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230567.363, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230567.478, "dur": 0.09, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230567.759, "dur": 0.127, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230570.066, "dur": 0.378, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230571.066, "dur": 0.198, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230571.361, "dur": 0.26, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230571.683, "dur": 0.232, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230572.028, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230572.199, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230572.407, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230572.494, "dur": 0.299, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230572.842, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.137, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.303, "dur": 0.169, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.521, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.676, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.76, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230573.849, "dur": 0.246, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230574.145, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230576.376, "dur": 0.517, "name": "builtins.chr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230575.045, "dur": 2.313, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230574.238, "dur": 3.225, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230577.765, "dur": 0.128, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230577.943, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.029, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.117, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.219, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.308, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.398, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.495, "dur": 0.249, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230578.796, "dur": 0.255, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230579.311, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230569.64, "dur": 9.8, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230579.696, "dur": 0.737, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230566.986, "dur": 13.644, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230566.194, "dur": 14.604, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230581.073, "dur": 0.081, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230581.219, "dur": 0.062, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230581.339, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230581.458, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230580.961, "dur": 0.601, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230582.576, "dur": 0.886, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230583.698, "dur": 0.318, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230584.179, "dur": 0.13, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230586.322, "dur": 0.302, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230523.195, "dur": 63.544, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230587.028, "dur": 0.179, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230587.465, "dur": 0.054, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230590.409, "dur": 0.75, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230594.814, "dur": 0.05, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230598.159, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230597.838, "dur": 0.413, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230597.417, "dur": 0.941, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230598.991, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230599.251, "dur": 0.176, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230599.76, "dur": 0.04, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230599.928, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230600.045, "dur": 0.078, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230600.342, "dur": 0.202, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230601.765, "dur": 0.354, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.256, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.443, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.544, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.706, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.85, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230602.938, "dur": 0.259, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.246, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.341, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.479, "dur": 0.097, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.625, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.712, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.797, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.892, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230603.985, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.094, "dur": 0.067, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.208, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.358, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.446, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.53, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.684, "dur": 0.186, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230604.92, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.074, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.157, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.239, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.324, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.457, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.549, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.636, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.723, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230605.812, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.049, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.147, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.244, "dur": 0.065, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.361, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.458, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.769, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230607.858, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.019, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.115, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.206, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.296, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.452, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.539, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.627, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.716, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230608.806, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.164, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.251, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.344, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.435, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.524, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.61, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.696, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.795, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.89, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230609.988, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230610.074, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230610.16, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230610.781, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230610.869, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230610.958, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.043, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.129, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.217, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.303, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.391, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.475, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.56, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.645, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.731, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.822, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230611.909, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230612.289, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230612.383, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230612.475, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230612.569, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230612.66, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230613.537, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230613.635, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230613.725, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230613.882, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.039, "dur": 0.245, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.335, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.423, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.516, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.605, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.696, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.787, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230614.92, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.005, "dur": 0.194, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.247, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.408, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.499, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.586, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.675, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.764, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.848, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230615.936, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.033, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.125, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.211, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.297, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.382, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.472, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.56, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.652, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.771, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230616.925, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.015, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.098, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.187, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.273, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.361, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.445, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.531, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.617, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.701, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.785, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.87, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230617.954, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230618.04, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230618.123, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230618.207, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230619.092, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230619.252, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230619.347, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230620.882, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230620.974, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230621.064, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230621.152, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230621.241, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230621.331, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230601.614, "dur": 19.873, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230621.759, "dur": 1.091, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230599.613, "dur": 23.77, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230598.884, "dur": 24.644, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230598.577, "dur": 25.054, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230626.513, "dur": 0.067, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230626.705, "dur": 0.238, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230627.121, "dur": 0.041, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230593.226, "dur": 34.228, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230591.33, "dur": 36.477, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230633.02, "dur": 0.698, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230632.668, "dur": 1.108, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230635.502, "dur": 0.157, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230634.854, "dur": 0.992, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230637.668, "dur": 0.336, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230637.493, "dur": 0.594, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230640.003, "dur": 2996.568, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871233638.972, "dur": 0.758, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230637.194, "dur": 3003.899, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871233646.173, "dur": 0.292, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871233644.857, "dur": 1.723, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230631.237, "dur": 3015.987, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230629.256, "dur": 3018.722, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230587.896, "dur": 3061.008, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871233650.176, "dur": 1.029, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230506.428, "dur": 3144.907, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871230489.437, "dur": 3164.336, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22349, "ts": 2871233656.249, "dur": 0.51, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2872897198.108, "dur": 1.256, "name": "posix.getpid", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959776.442, "dur": 0.262, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959777.916, "dur": 0.116, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959777.314, "dur": 0.845, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959778.68, "dur": 0.074, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959775.845, "dur": 3.012, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959774.605, "dur": 4.34, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959779.869, "dur": 0.134, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959779.287, "dur": 0.888, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959781.928, "dur": 0.956, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959789.53, "dur": 0.869, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959791.322, "dur": 0.295, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959794.102, "dur": 0.175, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959800.317, "dur": 0.563, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959799.66, "dur": 1.54, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959798.242, "dur": 3.089, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959801.847, "dur": 0.597, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959803.131, "dur": 0.271, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959802.744, "dur": 1.115, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959804.118, "dur": 0.234, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959809.724, "dur": 0.162, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959821.73, "dur": 3.278, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959811.89, "dur": 13.306, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959825.821, "dur": 1.336, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959825.381, "dur": 1.843, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959827.3, "dur": 0.114, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959810.945, "dur": 17.791, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959829.325, "dur": 1.855, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959807.985, "dur": 23.34, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959833.825, "dur": 0.12, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959834.675, "dur": 0.761, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959837.227, "dur": 0.102, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959837.684, "dur": 0.048, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959838.018, "dur": 0.22, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959839.668, "dur": 0.744, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959840.812, "dur": 0.442, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959836.617, "dur": 4.726, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959833.305, "dur": 8.322, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959842.775, "dur": 0.723, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959843.976, "dur": 0.103, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959844.339, "dur": 0.104, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959844.665, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959842.15, "dur": 2.619, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959844.964, "dur": 0.423, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959845.448, "dur": 0.055, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959845.563, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959845.674, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959844.889, "dur": 0.882, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959846.881, "dur": 0.063, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959847.01, "dur": 0.073, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959847.147, "dur": 0.065, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959847.276, "dur": 0.051, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959846.818, "dur": 0.559, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959847.794, "dur": 0.186, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959850.087, "dur": 0.678, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959851.182, "dur": 0.04, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959852.75, "dur": 0.245, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959853.415, "dur": 0.041, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959853.613, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959853.734, "dur": 0.113, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959854.068, "dur": 0.303, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959856.58, "dur": 0.376, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959857.237, "dur": 0.268, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959857.592, "dur": 0.205, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959857.852, "dur": 0.214, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959858.18, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959858.344, "dur": 0.306, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959858.72, "dur": 0.233, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959859.006, "dur": 0.202, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959859.262, "dur": 0.119, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959859.593, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959859.767, "dur": 0.178, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.066, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.227, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.32, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.416, "dur": 0.265, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.734, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959860.836, "dur": 0.195, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.346, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.522, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.619, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.716, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.814, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959861.909, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959862.006, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959862.106, "dur": 0.253, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959862.413, "dur": 0.262, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959862.979, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959865.179, "dur": 3.368, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959863.87, "dur": 5.035, "name": "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959863.077, "dur": 5.995, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.166, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.285, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.397, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.706, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.811, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959869.918, "dur": 0.191, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959870.165, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959870.262, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959870.717, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959870.811, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959856.153, "dur": 14.865, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959871.372, "dur": 0.804, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959853.225, "dur": 20.35, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959851.069, "dur": 22.735, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959874.151, "dur": 0.117, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959874.351, "dur": 0.078, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959874.495, "dur": 0.07, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959874.637, "dur": 0.069, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959874.022, "dur": 0.74, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959875.972, "dur": 0.902, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959877.105, "dur": 0.341, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959877.619, "dur": 0.13, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959878.36, "dur": 0.263, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959796.263, "dur": 82.477, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959879.152, "dur": 0.258, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959879.705, "dur": 0.062, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959883.062, "dur": 0.855, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959887.514, "dur": 0.08, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959890.656, "dur": 0.05, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959890.329, "dur": 0.444, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959889.795, "dur": 1.097, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959891.569, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959891.857, "dur": 0.198, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959892.494, "dur": 0.046, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959892.676, "dur": 0.032, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959892.8, "dur": 0.093, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959893.166, "dur": 0.241, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959894.43, "dur": 0.344, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959894.901, "dur": 0.128, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.097, "dur": 0.061, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.217, "dur": 0.121, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.402, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.582, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.683, "dur": 0.174, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959895.923, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.028, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.212, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.315, "dur": 0.365, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.739, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.835, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959896.934, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.041, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.149, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.248, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.418, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.514, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.61, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959897.776, "dur": 0.27, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959898.101, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.333, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.438, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.537, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.641, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.825, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959899.932, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.034, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.135, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.234, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.346, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.449, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.549, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.653, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.762, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.902, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959900.999, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.166, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.33, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.426, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.524, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.628, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.718, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.813, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959901.91, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.006, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.38, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.479, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.578, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.679, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.776, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.879, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959902.972, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.07, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.179, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.29, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.388, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.482, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959903.939, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.037, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.135, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.231, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.327, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.425, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.522, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.62, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959904.713, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959905.747, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959905.849, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959905.953, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.058, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.157, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.691, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.791, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.897, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959906.998, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.101, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.203, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.307, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.41, "dur": 0.098, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.563, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.666, "dur": 0.245, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959907.965, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.062, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.157, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.252, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.351, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.446, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.581, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.68, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959908.847, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.013, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.109, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.209, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.308, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.401, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.495, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.591, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.698, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.804, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.9, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959909.995, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.093, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.188, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.284, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.449, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.584, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.685, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.784, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.88, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959910.977, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959911.075, "dur": 0.058, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959911.191, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959911.288, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.265, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.368, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.467, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.567, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.669, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.77, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.87, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959912.969, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.065, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.166, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.26, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.354, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.498, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.599, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.704, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.81, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959913.91, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.008, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.1, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.196, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.288, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.378, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.475, "dur": 0.118, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.647, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.749, "dur": 0.061, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.866, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959914.961, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959915.055, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959915.149, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959915.245, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959915.351, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959894.23, "dur": 21.25, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959915.651, "dur": 1.113, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959892.268, "dur": 24.959, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959891.456, "dur": 25.937, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959891.126, "dur": 26.403, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959919.169, "dur": 0.054, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959919.481, "dur": 0.24, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959919.874, "dur": 0.051, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959886.094, "dur": 34.102, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959884.115, "dur": 36.472, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959925.651, "dur": 0.505, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959925.313, "dur": 0.9, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959928.072, "dur": 0.164, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959927.5, "dur": 0.934, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959930.185, "dur": 0.397, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959929.936, "dur": 1.804, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959933.579, "dur": 7.759, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959941.716, "dur": 0.128, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959929.662, "dur": 12.441, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959943.166, "dur": 0.119, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959942.782, "dur": 0.615, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959924.203, "dur": 19.423, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959922.041, "dur": 21.966, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959880.18, "dur": 63.971, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959944.523, "dur": 0.336, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959780.824, "dur": 164.11, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959772.396, "dur": 173.541, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22350, "ts": 2872959946.887, "dur": 0.145, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2876919725.61, "dur": 0.441, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2876919724.53, "dur": 2.087, "name": "current_thread (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1306)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2876919730.343, "dur": 0.573, "name": "ident (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1047)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947497.122, "dur": 0.192, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947498.735, "dur": 0.104, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947498.228, "dur": 0.746, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947499.347, "dur": 0.085, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947496.616, "dur": 2.904, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947495.741, "dur": 3.849, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947500.502, "dur": 0.143, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947499.927, "dur": 0.877, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947502.497, "dur": 0.661, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947506.722, "dur": 0.825, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947508.498, "dur": 0.119, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947510.729, "dur": 0.179, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947517.178, "dur": 0.531, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947516.465, "dur": 1.468, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947515.182, "dur": 2.873, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947518.577, "dur": 0.548, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947519.927, "dur": 0.232, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947519.435, "dur": 1.533, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947521.224, "dur": 0.231, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947526.633, "dur": 0.154, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947529.834, "dur": 2.826, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947529.318, "dur": 3.531, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947533.334, "dur": 1.304, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947532.971, "dur": 1.725, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947534.963, "dur": 0.438, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947534.774, "dur": 0.677, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947535.541, "dur": 0.122, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947528.273, "dur": 8.593, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947537.409, "dur": 1.984, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947524.807, "dur": 14.693, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947541.853, "dur": 0.109, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947549.056, "dur": 0.738, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947551.639, "dur": 0.102, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947552.155, "dur": 0.042, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947552.481, "dur": 0.225, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947554.263, "dur": 0.68, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947555.33, "dur": 0.446, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947550.626, "dur": 5.237, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947541.473, "dur": 14.703, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947557.366, "dur": 0.784, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947558.562, "dur": 0.095, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947558.933, "dur": 0.105, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.261, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947556.747, "dur": 2.619, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.574, "dur": 0.073, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.711, "dur": 0.069, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.843, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.953, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947559.498, "dur": 0.551, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947561.317, "dur": 0.064, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947561.446, "dur": 0.058, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947561.569, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947561.684, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947561.251, "dur": 0.537, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947562.259, "dur": 0.245, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947564.564, "dur": 0.564, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947565.606, "dur": 0.055, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947565.839, "dur": 0.188, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947566.39, "dur": 0.056, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947566.567, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947566.695, "dur": 0.113, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947567.095, "dur": 0.365, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947569.718, "dur": 0.369, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947570.298, "dur": 0.27, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947570.686, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947570.988, "dur": 0.262, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947571.372, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947571.558, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947571.737, "dur": 0.234, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947572.024, "dur": 0.201, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947572.278, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947572.548, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947572.73, "dur": 0.174, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947573.035, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947573.196, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947573.289, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947573.384, "dur": 0.509, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947575.338, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947575.454, "dur": 0.218, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.019, "dur": 0.125, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.204, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.312, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.418, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.524, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.623, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.72, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947576.828, "dur": 0.214, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947577.1, "dur": 0.274, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947577.658, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947577.756, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947577.859, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947577.956, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.06, "dur": 0.183, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.301, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.397, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.499, "dur": 0.134, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.686, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947578.778, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.252, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.349, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.521, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.621, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.72, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.899, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947579.999, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.097, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.194, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.291, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.455, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.893, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947580.99, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.091, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.187, "dur": 0.116, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.356, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.456, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.624, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.792, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.889, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947581.985, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947582.088, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947582.254, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947582.609, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947582.704, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947582.874, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947583.789, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947583.897, "dur": 0.119, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947584.078, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947569.291, "dur": 14.949, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947584.539, "dur": 1.009, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947566.239, "dur": 19.754, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947565.473, "dur": 20.69, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947586.485, "dur": 0.138, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947586.695, "dur": 0.096, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947586.858, "dur": 0.072, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947587.001, "dur": 0.072, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947586.373, "dur": 0.752, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947588.041, "dur": 1.336, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947589.628, "dur": 0.308, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947590.097, "dur": 0.13, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947590.965, "dur": 0.542, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947513.022, "dur": 78.586, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947591.973, "dur": 0.305, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947592.56, "dur": 0.118, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947595.538, "dur": 1.127, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947600.516, "dur": 0.076, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947603.824, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947603.387, "dur": 0.54, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947602.848, "dur": 1.183, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947604.828, "dur": 0.047, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947605.105, "dur": 0.191, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947605.699, "dur": 0.066, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947605.907, "dur": 0.033, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947606.025, "dur": 0.139, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947606.433, "dur": 0.285, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947607.558, "dur": 0.363, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.077, "dur": 0.118, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.267, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.373, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.542, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.7, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.801, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947608.974, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.08, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.227, "dur": 0.118, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.401, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.5, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.6, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.706, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.818, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947609.921, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.188, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.364, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.461, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.561, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.664, "dur": 0.217, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947611.935, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.04, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.139, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.237, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.334, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.504, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.606, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.701, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.798, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947612.907, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.007, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.108, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.206, "dur": 0.121, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.381, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.486, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.64, "dur": 0.06, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.755, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947613.922, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.088, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.185, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.282, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.383, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.478, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.572, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.668, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.765, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947614.924, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.019, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.119, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.217, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.315, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.412, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.507, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.602, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.7, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.805, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947615.901, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947616.012, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947616.251, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947616.351, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947616.452, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947616.546, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947617.597, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947617.7, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947617.8, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947617.9, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947617.999, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.098, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.197, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.29, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.389, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.485, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947618.932, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.029, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.123, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.222, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.322, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.418, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.518, "dur": 0.06, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.634, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.804, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947619.907, "dur": 0.238, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.2, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.295, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.388, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.486, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.584, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.682, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.814, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947620.908, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.007, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.123, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.218, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.315, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.41, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.509, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.605, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.705, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.815, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947621.919, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.015, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.114, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.209, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.306, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.4, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.567, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.701, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947622.801, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947623.742, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947623.842, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947623.944, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.046, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.145, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.247, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.346, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.446, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.543, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.639, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.736, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.835, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947624.932, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.029, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.126, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.223, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.32, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.416, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.547, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.64, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.735, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.826, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947625.931, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.026, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.12, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.216, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.309, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.403, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.5, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.602, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.695, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.787, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.884, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947626.977, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.071, "dur": 0.114, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.24, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.332, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.429, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.525, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.619, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.753, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.852, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947627.955, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947628.053, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947628.151, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947628.251, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947628.347, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.207, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.306, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.403, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.502, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.599, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.696, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.79, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.888, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947629.982, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.076, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.172, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.278, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.381, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.546, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.642, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.738, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.833, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947630.932, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947631.067, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947607.399, "dur": 23.825, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947631.483, "dur": 1.522, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947605.506, "dur": 28.028, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947604.699, "dur": 29.01, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947604.382, "dur": 29.45, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947635.648, "dur": 0.07, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947635.852, "dur": 0.202, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947636.264, "dur": 0.047, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947599.09, "dur": 37.528, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947596.883, "dur": 40.121, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947642.199, "dur": 0.553, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947641.667, "dur": 1.152, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947644.825, "dur": 0.154, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947644.114, "dur": 1.061, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947646.966, "dur": 0.383, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947646.74, "dur": 0.681, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947649.028, "dur": 7.308, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947656.602, "dur": 0.135, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947646.454, "dur": 10.489, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947657.989, "dur": 0.123, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947657.614, "dur": 0.603, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947640.431, "dur": 18.007, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947638.34, "dur": 20.407, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947593.083, "dur": 65.8, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947659.245, "dur": 0.328, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947501.384, "dur": 158.257, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947493.65, "dur": 166.747, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22351, "ts": 2876947661.235, "dur": 0.172, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2877477066.712, "dur": 5.992, "name": "type.now", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2868963829.434, "dur": 8513260.256, "name": "__init__ (/home/edx/PycharmProjects/examples/threads/utils.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535281.846, "dur": 0.241, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535283.475, "dur": 0.105, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535283.022, "dur": 0.683, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535284.127, "dur": 0.066, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535281.475, "dur": 2.79, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535280.566, "dur": 3.782, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535285.284, "dur": 0.129, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535284.749, "dur": 0.825, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535287.236, "dur": 0.681, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535291.234, "dur": 0.483, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535292.576, "dur": 0.054, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535294.772, "dur": 0.213, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535301.301, "dur": 0.473, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535300.703, "dur": 1.296, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535299.301, "dur": 2.789, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535302.573, "dur": 0.592, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535303.943, "dur": 0.334, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535303.559, "dur": 1.189, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535304.981, "dur": 0.262, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535310.403, "dur": 0.221, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535312.918, "dur": 3.004, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535312.438, "dur": 3.638, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535316.554, "dur": 1.288, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535316.175, "dur": 1.713, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535318.115, "dur": 0.412, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535317.965, "dur": 0.604, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535318.845, "dur": 6.01, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535318.626, "dur": 6.282, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535324.989, "dur": 0.111, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535311.548, "dur": 14.728, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535326.86, "dur": 1.997, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535308.459, "dur": 20.521, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535331.826, "dur": 0.112, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535332.828, "dur": 0.705, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535334.92, "dur": 0.091, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535335.577, "dur": 0.045, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535336.052, "dur": 0.22, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535337.707, "dur": 0.651, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535338.797, "dur": 2.362, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535334.312, "dur": 6.911, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535331.268, "dur": 10.146, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535346.772, "dur": 0.956, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535347.86, "dur": 0.118, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535348.183, "dur": 0.09, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535358.584, "dur": 0.048, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535343.338, "dur": 15.372, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535358.906, "dur": 0.129, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535359.093, "dur": 0.057, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535359.206, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535359.309, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535358.841, "dur": 0.564, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535360.507, "dur": 0.057, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535360.622, "dur": 0.064, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535360.747, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535360.848, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535360.447, "dur": 0.495, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535361.377, "dur": 0.287, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535363.93, "dur": 0.704, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535365.151, "dur": 0.063, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535365.397, "dur": 0.223, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535366.417, "dur": 0.054, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535366.599, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535366.708, "dur": 0.086, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535367.007, "dur": 0.098, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535371.502, "dur": 0.431, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535372.231, "dur": 0.225, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535372.543, "dur": 0.246, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535372.845, "dur": 0.256, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535373.218, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535373.459, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535373.586, "dur": 0.203, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535373.883, "dur": 0.185, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535374.12, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535374.439, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535374.602, "dur": 0.178, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535374.901, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535375.056, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535375.145, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535375.236, "dur": 0.274, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535375.563, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535375.662, "dur": 0.241, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.207, "dur": 0.12, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.381, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.469, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.556, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.645, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.733, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.821, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535376.918, "dur": 0.243, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535377.211, "dur": 0.252, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535377.722, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535378.802, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535378.905, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535378.998, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.094, "dur": 0.254, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.397, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.491, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.587, "dur": 0.131, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.766, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535379.85, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.298, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.387, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.545, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.636, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.724, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.813, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.901, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535380.99, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.079, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.166, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.322, "dur": 0.164, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.82, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.907, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535381.998, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.087, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.251, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.342, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.435, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.614, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.706, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.793, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535382.892, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.05, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.453, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.547, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.707, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.802, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535383.895, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.054, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.144, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.236, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.325, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.422, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.512, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.603, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.692, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535384.781, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.069, "dur": 0.078, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.202, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.297, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.392, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.484, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.574, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.669, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.759, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.847, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535386.948, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.041, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.141, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.233, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.322, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.407, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.5, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.616, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.707, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.798, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535387.89, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.042, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.13, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.215, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.3, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.386, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.474, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.578, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.672, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.761, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.849, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535388.945, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.034, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.123, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.21, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.324, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.424, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.512, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.601, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.693, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.781, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.87, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535389.959, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535390.043, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535390.132, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535390.221, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535390.314, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535390.402, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535392.927, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535393.023, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535393.115, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535393.207, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535371.091, "dur": 22.275, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535393.765, "dur": 1.227, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535366.255, "dur": 29.193, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535365.02, "dur": 30.649, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535395.948, "dur": 0.107, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535396.15, "dur": 0.093, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535396.306, "dur": 0.084, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535396.446, "dur": 0.082, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535395.852, "dur": 0.721, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535397.982, "dur": 0.861, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535399.062, "dur": 0.39, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535399.619, "dur": 0.122, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535400.322, "dur": 0.412, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535296.872, "dur": 103.959, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535401.17, "dur": 0.32, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535401.761, "dur": 0.057, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535404.955, "dur": 0.764, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535409.938, "dur": 0.057, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535413.985, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535413.363, "dur": 0.723, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535412.84, "dur": 1.349, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535414.833, "dur": 0.038, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535415.086, "dur": 0.184, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535415.717, "dur": 0.065, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535415.921, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535416.043, "dur": 0.211, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535416.524, "dur": 0.227, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535417.637, "dur": 0.364, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.134, "dur": 0.1, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.303, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.397, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.553, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.694, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535418.782, "dur": 0.172, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.005, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.103, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.241, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.337, "dur": 0.098, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.488, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.578, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.67, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535419.759, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.045, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.141, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.316, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.406, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.499, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.604, "dur": 0.286, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535421.943, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.035, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.126, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.211, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.297, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.457, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.548, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.639, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.73, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.821, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535422.913, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.073, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.164, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.26, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.35, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.481, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.572, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.733, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.891, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535423.984, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.074, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.168, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.255, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.341, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.429, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.519, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.654, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.742, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.832, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535424.922, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.013, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.102, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.192, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.283, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.445, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.547, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.64, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535425.733, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535427.331, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535427.426, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535427.519, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.44, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.532, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.626, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.715, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.803, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.894, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535428.984, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.073, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.161, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.252, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.34, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.529, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.618, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.704, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.795, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.888, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535429.983, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.074, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.161, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.317, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.411, "dur": 0.249, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.711, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.801, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.887, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535430.974, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.068, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.154, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.269, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.359, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.454, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.544, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.632, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.719, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.806, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.896, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535431.979, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.066, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.167, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.325, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.414, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.505, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.592, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.679, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.768, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535432.924, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535433.044, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535433.822, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535433.908, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535433.999, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.086, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.175, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.261, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.364, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.452, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.54, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.632, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.72, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.809, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.899, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535434.988, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.075, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.161, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.249, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.336, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.428, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.614, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.698, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.785, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.87, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535435.962, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.063, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.147, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.234, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.318, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.403, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.491, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.584, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.669, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.754, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.848, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535436.931, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.017, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.174, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.261, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.35, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.438, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.526, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.644, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.736, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.824, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535437.914, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535438.003, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535438.092, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535438.867, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535438.958, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.049, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.136, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.225, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.314, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.402, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.49, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.576, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.663, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.764, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.851, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535439.937, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.023, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.11, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.196, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.282, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.369, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.457, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.575, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.666, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.757, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.844, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535440.933, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.018, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.11, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.195, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.298, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.389, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.479, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.567, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.657, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.745, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.835, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535441.924, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.012, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.098, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.185, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.274, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.365, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.452, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.542, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.631, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.717, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.806, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535442.897, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535443.744, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535443.865, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535443.954, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.044, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.132, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.224, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.327, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.417, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.506, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.592, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.68, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.769, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.856, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535444.946, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.034, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.123, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.208, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.294, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.383, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.469, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.559, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.647, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.738, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.825, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535445.91, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.0, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.089, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.176, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.265, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.352, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.44, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.525, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.61, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.732, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.82, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.907, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535446.994, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.081, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.17, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.26, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.343, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.427, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.514, "dur": 0.101, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.662, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.755, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.847, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535447.935, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535448.885, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535448.974, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535449.062, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535449.149, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535417.492, "dur": 31.769, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535449.513, "dur": 1.972, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535415.489, "dur": 36.57, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535414.748, "dur": 37.557, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535414.439, "dur": 38.026, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535453.956, "dur": 0.072, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535454.167, "dur": 0.196, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535454.534, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535408.342, "dur": 46.508, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535406.27, "dur": 48.902, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535460.88, "dur": 0.577, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535460.543, "dur": 0.971, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535463.236, "dur": 0.149, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535462.69, "dur": 0.882, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535465.663, "dur": 0.392, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535465.438, "dur": 0.685, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535467.611, "dur": 1491.984, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877536962.229, "dur": 0.823, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535464.717, "dur": 1499.858, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877536971.05, "dur": 0.367, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877536968.982, "dur": 2.574, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535459.108, "dur": 1513.207, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535456.586, "dur": 1516.652, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535402.231, "dur": 1571.948, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877536975.082, "dur": 0.917, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535286.204, "dur": 1690.003, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877535277.994, "dur": 1700.938, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22352, "ts": 2877536982.498, "dur": 0.634, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969619.262, "dur": 0.214, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969620.471, "dur": 0.109, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969620.012, "dur": 0.687, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969621.21, "dur": 0.078, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969618.729, "dur": 2.644, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969617.806, "dur": 3.654, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969622.277, "dur": 0.142, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969621.723, "dur": 0.844, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969624.186, "dur": 1.021, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969628.282, "dur": 0.423, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969629.664, "dur": 0.206, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969632.164, "dur": 0.242, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969638.603, "dur": 0.411, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969637.96, "dur": 1.325, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969636.447, "dur": 2.979, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969644.549, "dur": 0.582, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969645.812, "dur": 0.342, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969645.425, "dur": 1.213, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969646.895, "dur": 0.227, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969652.365, "dur": 0.163, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969655.522, "dur": 2.747, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969654.719, "dur": 3.708, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969658.864, "dur": 1.342, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969658.538, "dur": 1.717, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969660.468, "dur": 0.48, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969660.328, "dur": 0.66, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969661.261, "dur": 5.708, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969661.046, "dur": 5.965, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969667.092, "dur": 0.119, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969653.673, "dur": 14.582, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969668.731, "dur": 2.051, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969650.608, "dur": 20.274, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969673.496, "dur": 0.133, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969674.397, "dur": 0.75, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969676.536, "dur": 0.082, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969677.022, "dur": 0.028, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969677.271, "dur": 0.198, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969679.191, "dur": 0.639, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969680.124, "dur": 0.395, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969675.943, "dur": 4.649, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969672.972, "dur": 7.885, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969681.839, "dur": 0.622, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969682.605, "dur": 0.089, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969682.957, "dur": 0.099, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.263, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969681.319, "dur": 2.04, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.539, "dur": 0.129, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.724, "dur": 0.05, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.829, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.925, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969683.479, "dur": 0.546, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969685.053, "dur": 0.065, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969685.178, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969685.293, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969685.392, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969684.995, "dur": 0.487, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969685.843, "dur": 0.25, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969688.153, "dur": 0.571, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969689.174, "dur": 0.05, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969689.412, "dur": 0.211, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969689.988, "dur": 0.062, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969691.603, "dur": 0.039, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969691.721, "dur": 0.136, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969692.046, "dur": 0.119, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969694.533, "dur": 0.373, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969695.354, "dur": 0.212, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969695.715, "dur": 0.196, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969695.964, "dur": 0.256, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969696.335, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969696.501, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969696.662, "dur": 0.227, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969696.939, "dur": 0.192, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969697.179, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969697.485, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969697.65, "dur": 0.169, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969697.934, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969698.085, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969698.17, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969698.257, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969698.554, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969698.652, "dur": 0.177, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.04, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.198, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.288, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.381, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.47, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.561, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.651, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969699.749, "dur": 0.223, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969700.02, "dur": 0.253, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969700.531, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.026, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.123, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.212, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.307, "dur": 0.178, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.535, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.624, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.718, "dur": 0.191, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969701.958, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.042, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.48, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.569, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.729, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.816, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.906, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969702.999, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969703.088, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969703.175, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969705.343, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969705.441, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969705.597, "dur": 0.167, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.037, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.125, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.217, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.306, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.469, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.558, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.716, "dur": 0.1, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.867, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969706.955, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.041, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.133, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.29, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.667, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.754, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.906, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969707.995, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.081, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.243, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.328, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.415, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.503, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.598, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.69, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.78, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.869, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969708.957, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.517, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.608, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.698, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.787, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.877, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969709.962, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.051, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.142, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.227, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.322, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.413, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.514, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.603, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.693, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.779, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969710.871, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969711.012, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969713.977, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.086, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.181, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.338, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.426, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.517, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.6, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.686, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.78, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.869, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969714.979, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.067, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.155, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.248, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.335, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.422, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.519, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.645, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.734, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.821, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969715.911, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.002, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.09, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.178, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.268, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.354, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.442, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.53, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.623, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.712, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.797, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.892, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969716.982, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969717.072, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969694.123, "dur": 23.11, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969717.497, "dur": 1.468, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969689.834, "dur": 29.548, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969689.063, "dur": 30.578, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969719.974, "dur": 0.132, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969720.179, "dur": 0.091, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969720.335, "dur": 0.084, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969720.485, "dur": 0.082, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969719.864, "dur": 0.746, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969721.923, "dur": 0.817, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969722.961, "dur": 0.341, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969723.795, "dur": 0.124, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969724.483, "dur": 0.392, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969634.524, "dur": 92.904, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969727.753, "dur": 0.257, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969728.309, "dur": 0.05, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969731.668, "dur": 0.841, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969736.286, "dur": 0.071, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969739.412, "dur": 0.044, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969739.013, "dur": 0.493, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969738.276, "dur": 1.334, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969740.241, "dur": 0.035, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969740.481, "dur": 0.176, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969741.078, "dur": 0.058, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969741.284, "dur": 0.028, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969741.395, "dur": 0.14, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969741.757, "dur": 0.279, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969742.824, "dur": 0.332, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.287, "dur": 0.12, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.46, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.562, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.668, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.813, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969743.901, "dur": 0.161, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.111, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.207, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.366, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.458, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.613, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.701, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.789, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.884, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969744.981, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.076, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.23, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.315, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.402, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.494, "dur": 0.249, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.794, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.886, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969745.97, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.052, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.138, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.277, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.366, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.455, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.539, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.632, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969746.73, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969747.871, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969747.994, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.094, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.183, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.338, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.434, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.597, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.757, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.847, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969748.938, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.032, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.12, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.207, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.295, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.386, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.526, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.612, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.699, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.786, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.873, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969749.959, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.043, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.131, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.219, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.315, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.401, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.487, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.688, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.776, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.864, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969750.947, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.035, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.118, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.215, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.302, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.389, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.477, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.562, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.648, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.736, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.822, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969751.987, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969752.075, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969752.159, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969752.248, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969752.335, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969752.423, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969754.333, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969754.428, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969754.53, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969754.92, "dur": 1.074, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.044, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.133, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.221, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.307, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.396, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.483, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.625, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.721, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.819, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969756.919, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.016, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.105, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.193, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.282, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.369, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.459, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.557, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.65, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.741, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.832, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969757.917, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.008, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.096, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.256, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.384, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.473, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.577, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.668, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.755, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.843, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969758.926, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.014, "dur": 0.033, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.097, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.19, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.28, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.367, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.455, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.542, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.632, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.719, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.807, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969759.896, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969760.697, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969760.792, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969760.929, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.024, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.111, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.202, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.295, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.396, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.478, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.569, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.654, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.739, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.825, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969761.918, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.002, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.085, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.17, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.255, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.339, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.496, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.581, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.682, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.766, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.851, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969762.973, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.057, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.148, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.232, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.321, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.407, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.491, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.574, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.657, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.739, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.821, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.904, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969763.987, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.07, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.154, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.242, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.325, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.416, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.499, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.581, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.663, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.747, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969764.829, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969765.731, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969765.825, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969765.965, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.063, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.173, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.268, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.371, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.459, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.546, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.633, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.733, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.819, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969766.91, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.002, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.091, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.181, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.268, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.357, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.442, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.528, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.614, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.701, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.789, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.874, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969767.963, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.048, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.133, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.218, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.305, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.391, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.514, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.601, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.689, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.772, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.858, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969768.941, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.027, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.109, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.197, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.283, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.373, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.458, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.543, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.629, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.714, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969769.798, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969770.758, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969770.849, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969770.944, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.038, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.128, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.222, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.327, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.423, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.514, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.603, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.691, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.778, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.864, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969771.949, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.032, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.117, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.252, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.348, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.441, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.528, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.62, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.706, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.793, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.878, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969772.964, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.05, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.146, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.232, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.32, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.407, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.491, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.577, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.667, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969773.755, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969742.662, "dur": 31.206, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969774.057, "dur": 1.81, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969740.855, "dur": 35.675, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969740.121, "dur": 36.596, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969739.855, "dur": 36.989, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969778.423, "dur": 0.056, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969778.573, "dur": 0.226, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969778.964, "dur": 0.045, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969734.813, "dur": 44.415, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969732.706, "dur": 46.857, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969785.06, "dur": 0.564, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969784.652, "dur": 1.035, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969787.627, "dur": 0.144, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969787.014, "dur": 1.995, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969790.646, "dur": 0.472, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969790.459, "dur": 0.724, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969793.011, "dur": 1174.983, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878970969.461, "dur": 0.477, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969790.31, "dur": 1180.217, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878970973.313, "dur": 0.302, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878970972.553, "dur": 1.163, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969783.081, "dur": 1191.04, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969781.043, "dur": 1193.712, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969728.72, "dur": 1246.435, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878970975.951, "dur": 0.483, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969623.2, "dur": 1353.319, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878969615.413, "dur": 1362.416, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22353, "ts": 2878970979.539, "dur": 0.303, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2900956800.591, "dur": 0.246, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2902469418.752, "dur": 2.526, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2900956822.134, "dur": 1512698.605, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2906203552.678, "dur": 2.539, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2902469532.434, "dur": 3734042.128, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2906786363.922, "dur": 2.165, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2906203587.427, "dur": 582796.41, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2907360238.534, "dur": 21.721, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2906786396.058, "dur": 573881.961, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413373.133, "dur": 0.25, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413374.84, "dur": 0.097, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413373.925, "dur": 1.14, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413375.38, "dur": 0.078, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413372.589, "dur": 2.965, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413371.653, "dur": 3.963, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413376.702, "dur": 0.067, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413376.215, "dur": 0.688, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413378.671, "dur": 0.692, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413382.77, "dur": 0.348, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413384.359, "dur": 0.146, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413386.606, "dur": 0.179, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413394.326, "dur": 0.471, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413393.64, "dur": 1.387, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413391.755, "dur": 3.383, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413395.622, "dur": 1.436, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413399.961, "dur": 0.788, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413409.543, "dur": 0.331, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413408.992, "dur": 0.958, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413408.416, "dur": 1.677, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413407.06, "dur": 3.178, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413411.501, "dur": 0.203, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413411.385, "dur": 0.366, "name": "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413411.287, "dur": 12.454, "name": "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413410.914, "dur": 12.936, "name": "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413398.926, "dur": 25.524, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413424.912, "dur": 0.224, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413438.71, "dur": 0.113, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413439.572, "dur": 0.729, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413441.737, "dur": 0.106, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413442.285, "dur": 0.045, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413442.936, "dur": 0.244, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413444.573, "dur": 0.736, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413445.675, "dur": 0.376, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413441.099, "dur": 5.025, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413438.194, "dur": 8.181, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413447.399, "dur": 0.638, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413448.251, "dur": 0.092, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413448.618, "dur": 0.103, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413448.878, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413446.855, "dur": 2.123, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413449.172, "dur": 0.074, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413449.308, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413449.414, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413449.519, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413449.102, "dur": 0.515, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413450.956, "dur": 0.049, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413451.069, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413451.176, "dur": 0.047, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413451.283, "dur": 0.045, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413450.88, "dur": 0.498, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413451.749, "dur": 0.471, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413454.269, "dur": 0.553, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413455.224, "dur": 0.043, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413455.436, "dur": 0.151, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413455.901, "dur": 0.056, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413456.09, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413456.209, "dur": 0.097, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413456.5, "dur": 0.223, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413459.342, "dur": 0.75, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413460.34, "dur": 0.178, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413460.615, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413460.715, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413460.813, "dur": 0.246, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413461.251, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413461.341, "dur": 0.249, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413461.641, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413461.728, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413461.975, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413463.65, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413463.76, "dur": 0.118, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413463.94, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.034, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.195, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.287, "dur": 0.173, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.518, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.775, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.866, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413464.957, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413465.062, "dur": 0.162, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413465.342, "dur": 0.336, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413465.729, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413465.82, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413465.914, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413466.002, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413458.896, "dur": 7.533, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413466.957, "dur": 1.033, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413455.779, "dur": 12.48, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413455.102, "dur": 13.353, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413468.793, "dur": 0.115, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413468.99, "dur": 0.069, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413469.126, "dur": 0.059, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413469.245, "dur": 0.051, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413468.688, "dur": 0.656, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413470.463, "dur": 0.925, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413471.611, "dur": 0.201, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413471.962, "dur": 0.118, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413472.584, "dur": 0.244, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413389.097, "dur": 83.846, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413473.374, "dur": 0.242, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413473.878, "dur": 0.055, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413477.532, "dur": 0.838, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413482.12, "dur": 0.065, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413485.38, "dur": 0.042, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413485.032, "dur": 0.45, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413484.56, "dur": 1.022, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413486.254, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413486.524, "dur": 0.159, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413487.109, "dur": 0.069, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413487.344, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413487.474, "dur": 0.087, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413487.781, "dur": 0.575, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413489.096, "dur": 0.343, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413489.622, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413489.798, "dur": 0.195, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413490.111, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413491.452, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413491.774, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413491.873, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413492.099, "dur": 0.15, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413492.368, "dur": 0.185, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413492.668, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413492.771, "dur": 0.261, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413493.085, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413493.178, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413493.271, "dur": 0.251, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413493.575, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413493.938, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.03, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.175, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.263, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.354, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.454, "dur": 0.267, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.775, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413494.936, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.025, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.115, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.204, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.43, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.526, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.616, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.712, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.802, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413495.96, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.052, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.142, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.229, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.321, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.722, "dur": 0.052, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.829, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413496.922, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.014, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.106, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.267, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.359, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.449, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.542, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.63, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413497.722, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413498.16, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413498.251, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413498.343, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.331, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.43, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.526, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.621, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.716, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.823, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413501.916, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.009, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.099, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.462, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.556, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.645, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.736, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.824, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413502.914, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.073, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.159, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.246, "dur": 0.316, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.611, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.7, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.791, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.877, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413503.964, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.406, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.498, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.596, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.682, "dur": 0.161, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.894, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413504.987, "dur": 0.193, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.231, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.318, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.416, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.507, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.595, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.684, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.77, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.858, "dur": 0.058, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413505.965, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.066, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.191, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.278, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.366, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.454, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.54, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.626, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.716, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413506.804, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413507.837, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.001, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.17, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.265, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.358, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.452, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.543, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.633, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.723, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.829, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413508.964, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.119, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.219, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.314, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.405, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.493, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.582, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.672, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.83, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413509.985, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.144, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.236, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.327, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.418, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.512, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413510.606, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413488.93, "dur": 21.819, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413511.059, "dur": 1.121, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413486.88, "dur": 25.624, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413486.133, "dur": 26.559, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413485.847, "dur": 26.992, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413515.345, "dur": 0.077, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413515.559, "dur": 0.174, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413515.956, "dur": 0.048, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413480.809, "dur": 35.517, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413478.55, "dur": 38.097, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413522.582, "dur": 0.472, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413522.216, "dur": 0.9, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413524.811, "dur": 0.079, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413524.169, "dur": 0.915, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413527.261, "dur": 0.459, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413527.078, "dur": 0.726, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413529.54, "dur": 7.235, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413537.03, "dur": 0.14, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413526.814, "dur": 10.529, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413538.292, "dur": 0.102, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413537.881, "dur": 1.807, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413520.8, "dur": 19.119, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413518.025, "dur": 22.217, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413474.403, "dur": 65.966, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413540.759, "dur": 0.28, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413377.61, "dur": 163.497, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413369.695, "dur": 172.171, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22355, "ts": 2907413542.806, "dur": 0.149, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2907360289.815, "dur": 1378942.227, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2900956802.188, "dur": 7782432.539, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2908739235.35, "dur": 3.28, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2878903407.713, "dur": 29835835.771, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2878903371.273, "dur": 29835886.273, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820376.169, "dur": 0.223, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820377.234, "dur": 0.117, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820376.837, "dur": 0.631, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820377.948, "dur": 0.068, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820375.727, "dur": 2.382, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820374.858, "dur": 3.339, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820379.042, "dur": 0.149, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820378.511, "dur": 0.82, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820381.185, "dur": 0.757, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820384.882, "dur": 0.357, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820385.967, "dur": 0.194, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820388.637, "dur": 0.202, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820394.386, "dur": 0.801, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820393.867, "dur": 1.568, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820392.539, "dur": 3.087, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820396.128, "dur": 0.512, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820397.394, "dur": 0.353, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820397.01, "dur": 1.174, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820398.419, "dur": 0.264, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820403.507, "dur": 0.217, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820406.23, "dur": 2.555, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820405.691, "dur": 3.244, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820409.456, "dur": 1.42, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820409.031, "dur": 1.891, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820411.119, "dur": 0.455, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820410.987, "dur": 0.632, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820411.878, "dur": 5.035, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820411.67, "dur": 5.287, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820417.029, "dur": 0.107, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820404.671, "dur": 13.872, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820419.09, "dur": 1.742, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820401.473, "dur": 19.473, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820423.411, "dur": 0.11, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820424.373, "dur": 0.766, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820436.192, "dur": 0.102, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820436.75, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820437.066, "dur": 0.241, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820438.927, "dur": 0.541, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820439.87, "dur": 0.335, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820435.619, "dur": 4.652, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820423.046, "dur": 17.851, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820441.918, "dur": 0.608, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820442.665, "dur": 0.124, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.072, "dur": 0.099, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.389, "dur": 0.041, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820441.455, "dur": 2.027, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.674, "dur": 0.132, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.868, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.966, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820444.063, "dur": 0.043, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820443.611, "dur": 0.546, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820445.212, "dur": 0.063, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820445.336, "dur": 0.056, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820445.453, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820445.57, "dur": 0.059, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820445.154, "dur": 0.525, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820446.086, "dur": 0.195, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820448.684, "dur": 0.575, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820449.684, "dur": 0.054, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820449.908, "dur": 0.22, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820450.47, "dur": 0.034, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820450.636, "dur": 0.033, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820450.741, "dur": 0.101, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820451.016, "dur": 0.098, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820453.242, "dur": 0.434, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820453.883, "dur": 0.225, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820454.257, "dur": 0.247, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820454.558, "dur": 0.264, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820454.938, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820455.173, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820455.347, "dur": 0.226, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820456.079, "dur": 0.19, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820456.32, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820456.638, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820456.8, "dur": 0.168, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820457.082, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820457.239, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820457.324, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820457.411, "dur": 0.247, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820457.708, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820459.149, "dur": 0.282, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820459.757, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820459.927, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.024, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.115, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.203, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.299, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.389, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.488, "dur": 0.248, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820460.783, "dur": 0.268, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820461.337, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820461.424, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820461.579, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820461.665, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820461.759, "dur": 0.242, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.051, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.139, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.292, "dur": 0.134, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.475, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.561, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820462.999, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.088, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.245, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.335, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.424, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.514, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.605, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.693, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.781, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820463.871, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.023, "dur": 0.164, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.441, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.528, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.618, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.708, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.869, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820464.958, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.114, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.272, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.362, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.449, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.542, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820465.701, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820466.078, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820466.164, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820466.319, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820466.406, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.267, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.431, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.515, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.602, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.693, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.791, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.882, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820467.971, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.058, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.163, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.625, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.716, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.807, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.895, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820468.985, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.072, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.159, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.249, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.339, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.439, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.53, "dur": 0.1, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.68, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.767, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.856, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820469.941, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.04, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.157, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.241, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.333, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.422, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.574, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.66, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.744, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.826, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.909, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820470.994, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.08, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.171, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.258, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.343, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.435, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.521, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.608, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.696, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.808, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820471.894, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820472.778, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820472.869, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820472.958, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.044, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.13, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.215, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.31, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.396, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.486, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.578, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.666, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.757, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.849, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820473.942, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820474.033, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820452.814, "dur": 21.434, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820474.551, "dur": 3.553, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820450.332, "dur": 28.166, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820449.576, "dur": 29.102, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820478.985, "dur": 0.147, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820479.198, "dur": 0.096, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820479.359, "dur": 0.082, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820479.501, "dur": 0.081, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820478.893, "dur": 0.735, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820482.409, "dur": 0.967, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820483.624, "dur": 0.354, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820484.139, "dur": 0.124, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820484.937, "dur": 0.294, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820390.675, "dur": 94.655, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820485.721, "dur": 0.261, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820486.626, "dur": 0.053, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820491.76, "dur": 3.976, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820500.028, "dur": 0.068, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820503.312, "dur": 0.037, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820502.972, "dur": 0.428, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820502.433, "dur": 1.072, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820504.184, "dur": 0.04, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820504.438, "dur": 0.211, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820505.111, "dur": 0.08, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820505.34, "dur": 0.029, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820505.456, "dur": 0.13, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820505.793, "dur": 0.325, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820507.055, "dur": 0.397, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820507.573, "dur": 0.116, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820507.742, "dur": 0.055, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820507.851, "dur": 0.113, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820508.017, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820509.945, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.039, "dur": 0.173, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.265, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.37, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.522, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.619, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.777, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.865, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820510.953, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.041, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.211, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.308, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.457, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.544, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.633, "dur": 0.034, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820511.72, "dur": 0.264, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.035, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.123, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.208, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.291, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.375, "dur": 0.112, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.6, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.688, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.775, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.862, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820512.949, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.046, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.136, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.223, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.318, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.403, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.54, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.629, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.782, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820513.934, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.02, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.107, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.199, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.282, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.367, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.455, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.545, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.684, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.771, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.858, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820514.949, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820515.039, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.4, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.497, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.589, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.752, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.853, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820519.943, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.03, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.198, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.288, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.378, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.468, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.558, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.648, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.738, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.826, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.912, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820520.999, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.082, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.165, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.252, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.336, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.481, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.568, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.651, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.738, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.829, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820521.92, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.007, "dur": 0.033, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.092, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.244, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.4, "dur": 0.299, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.747, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.832, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820522.917, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.003, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.092, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.18, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.301, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.39, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.484, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.573, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.66, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.748, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.834, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820523.919, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820524.004, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820524.833, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820524.989, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.144, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.234, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.323, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.406, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.494, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.58, "dur": 0.141, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.771, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.907, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820525.995, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.08, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.167, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.255, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.343, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.428, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.515, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.601, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.688, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.778, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.866, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820526.953, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.038, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.128, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.215, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.304, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.391, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.48, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820527.566, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.088, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.177, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.266, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.36, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.453, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.538, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.622, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.708, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.796, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.883, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820529.976, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.068, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.151, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.238, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.33, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.419, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.504, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820530.658, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820531.566, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820531.657, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820531.749, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820531.838, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820531.957, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.048, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.138, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.23, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.319, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.41, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.497, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.586, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.677, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.764, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.85, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820532.936, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.026, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.112, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.197, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.287, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.375, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.463, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.55, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.638, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.724, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.813, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.899, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820533.984, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.073, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.188, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.279, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.369, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.457, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.543, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.63, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.717, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.805, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820534.893, "dur": 0.051, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.007, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.106, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.193, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.28, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.368, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.457, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.543, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820535.626, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820536.559, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820536.649, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820536.741, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820536.83, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820536.917, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.011, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.112, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.198, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.289, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.38, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.464, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.585, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.67, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.758, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.849, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820537.937, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.021, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.111, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.197, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.283, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.373, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.459, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.544, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.629, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.718, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.801, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.884, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820538.967, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.049, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.136, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.224, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.308, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.393, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.477, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.564, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.654, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.743, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.835, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820539.923, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.014, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.101, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.186, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.271, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.389, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.477, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.563, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820540.649, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.441, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.531, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.621, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.71, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.794, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.88, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820541.98, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.132, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.222, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.309, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.396, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.486, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.575, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820542.663, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820506.901, "dur": 35.896, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820543.05, "dur": 1.871, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820504.87, "dur": 40.655, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820504.073, "dur": 41.596, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820503.759, "dur": 42.078, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820549.12, "dur": 0.066, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820549.332, "dur": 0.208, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820549.761, "dur": 0.043, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820498.698, "dur": 51.418, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820496.583, "dur": 53.888, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820555.559, "dur": 0.575, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820555.331, "dur": 0.867, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820557.986, "dur": 0.143, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820557.451, "dur": 0.867, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820559.996, "dur": 0.355, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820559.768, "dur": 0.664, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820561.911, "dur": 6.671, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820568.795, "dur": 0.12, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820559.527, "dur": 9.59, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820569.957, "dur": 0.119, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820569.691, "dur": 0.473, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820553.885, "dur": 16.476, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820551.949, "dur": 18.652, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820487.058, "dur": 83.656, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820571.106, "dur": 0.217, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820380.214, "dur": 191.166, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820372.54, "dur": 199.63, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22356, "ts": 2908820572.959, "dur": 0.13, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2940246194.248, "dur": 2000463.962, "name": "time.sleep", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275655.242, "dur": 0.247, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275656.47, "dur": 0.099, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275655.954, "dur": 0.716, "name": "_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275665.844, "dur": 0.079, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275654.241, "dur": 11.77, "name": "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275653.326, "dur": 12.81, "name": "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275666.986, "dur": 0.131, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275666.465, "dur": 0.808, "name": "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275668.857, "dur": 0.75, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275672.991, "dur": 0.449, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275674.196, "dur": 0.198, "name": "time.time", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275676.532, "dur": 0.195, "name": "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275681.873, "dur": 0.345, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275681.425, "dur": 1.02, "name": "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275680.504, "dur": 2.063, "name": "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275683.065, "dur": 0.613, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275684.294, "dur": 0.296, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275683.938, "dur": 1.066, "name": "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275685.241, "dur": 0.2, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275689.979, "dur": 0.16, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275692.35, "dur": 2.813, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275691.978, "dur": 3.349, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275695.815, "dur": 0.987, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275695.423, "dur": 1.44, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275697.078, "dur": 0.474, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275696.932, "dur": 0.668, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275697.889, "dur": 4.933, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275697.658, "dur": 5.208, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275702.925, "dur": 0.096, "name": "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275691.075, "dur": 13.096, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275704.704, "dur": 1.7, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275688.338, "dur": 18.196, "name": "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275709.204, "dur": 0.105, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275710.236, "dur": 0.7, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275712.187, "dur": 0.089, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275712.658, "dur": 0.03, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275712.91, "dur": 0.239, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275714.524, "dur": 0.671, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275715.501, "dur": 0.725, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275711.616, "dur": 4.681, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275708.446, "dur": 8.117, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275717.532, "dur": 0.787, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275718.441, "dur": 0.104, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275718.823, "dur": 0.099, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.137, "dur": 0.042, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275717.052, "dur": 2.182, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.405, "dur": 0.078, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.55, "dur": 0.06, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.665, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.766, "dur": 0.046, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275719.347, "dur": 2.639, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.114, "dur": 0.063, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.24, "dur": 0.057, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.358, "dur": 0.059, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.476, "dur": 0.044, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.05, "dur": 0.519, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275723.953, "dur": 0.188, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275726.11, "dur": 0.647, "name": "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275727.221, "dur": 0.053, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275727.443, "dur": 0.23, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275728.046, "dur": 0.05, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275728.229, "dur": 0.035, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275728.338, "dur": 0.108, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275728.656, "dur": 0.134, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275730.639, "dur": 0.629, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275731.55, "dur": 0.206, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275731.906, "dur": 0.196, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275732.155, "dur": 0.255, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275732.527, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275732.758, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275732.931, "dur": 0.096, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275733.076, "dur": 0.193, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275733.318, "dur": 0.103, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275733.575, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275733.75, "dur": 0.17, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.037, "dur": 0.104, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.205, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.29, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.378, "dur": 0.265, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.694, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275734.786, "dur": 0.192, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.187, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.35, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.44, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.531, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.621, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.709, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.799, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275735.898, "dur": 0.181, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275736.13, "dur": 0.256, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275736.654, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275736.805, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275736.968, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275737.058, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275737.154, "dur": 0.237, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275737.44, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275738.889, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275738.989, "dur": 0.141, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275739.185, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275739.278, "dur": 0.109, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275739.713, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275739.809, "dur": 0.11, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275739.972, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.063, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.151, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.246, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.336, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.428, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.522, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.614, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275740.763, "dur": 0.167, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.198, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.29, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.381, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.47, "dur": 0.117, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.638, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.73, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.824, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275741.987, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.082, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.169, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.265, "dur": 0.111, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.442, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.859, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275742.955, "dur": 0.106, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.115, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.211, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.301, "dur": 0.116, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.469, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.561, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.655, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.745, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.844, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275743.938, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.03, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.123, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.209, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.692, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.785, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.882, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275744.975, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275745.068, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275745.158, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.072, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.164, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.254, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.353, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.447, "dur": 0.075, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.572, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.661, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.75, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.837, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275746.927, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.05, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.136, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.232, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.323, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.479, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.572, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.661, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.752, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.841, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275747.93, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.02, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.114, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.207, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.296, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.389, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.482, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.571, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.659, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.873, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275748.966, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.056, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.15, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.244, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.338, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.428, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.524, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.614, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.707, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.797, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.892, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275749.987, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275750.077, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275750.172, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275750.267, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275750.365, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275730.341, "dur": 20.18, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275751.65, "dur": 1.291, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275727.892, "dur": 25.451, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275727.106, "dur": 26.397, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275753.811, "dur": 0.151, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275754.042, "dur": 0.096, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275754.204, "dur": 0.089, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275754.354, "dur": 0.083, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275753.713, "dur": 0.772, "name": "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275756.274, "dur": 0.977, "name": "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275757.483, "dur": 0.364, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275758.016, "dur": 0.122, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275758.657, "dur": 0.423, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275678.624, "dur": 80.555, "name": "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275759.507, "dur": 0.28, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275760.067, "dur": 0.046, "name": "_io.StringIO.write", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275763.261, "dur": 0.738, "name": "_io.StringIO.getvalue", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275767.262, "dur": 0.052, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275770.204, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275769.874, "dur": 0.432, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275769.47, "dur": 0.927, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275771.19, "dur": 0.031, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275771.486, "dur": 0.177, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275772.039, "dur": 0.056, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275772.248, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275772.382, "dur": 0.097, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275772.766, "dur": 0.283, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275773.862, "dur": 0.336, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.323, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.499, "dur": 0.054, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.606, "dur": 0.101, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.756, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.9, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275774.991, "dur": 0.198, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.239, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.337, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.497, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.593, "dur": 0.115, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.759, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.848, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275775.948, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.04, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.141, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.234, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.376, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.468, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.559, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275776.647, "dur": 0.76, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275778.75, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275778.848, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275778.941, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.032, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.124, "dur": 0.053, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.367, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.462, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.556, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.651, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.747, "dur": 0.047, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.852, "dur": 0.049, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275779.955, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.047, "dur": 0.061, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.158, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.252, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.389, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.482, "dur": 0.108, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.643, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.8, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.889, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275780.976, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.066, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.152, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.237, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.325, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.413, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.558, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.646, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.737, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.827, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275781.915, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.004, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.09, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.178, "dur": 0.105, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.335, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.435, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.519, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.605, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.825, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275782.919, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.011, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.097, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.187, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.274, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.365, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.454, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275783.542, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275784.564, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275784.661, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275784.753, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275784.846, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275784.939, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.137, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.23, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.323, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.415, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.511, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.608, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.703, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275785.792, "dur": 0.188, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.03, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.126, "dur": 0.375, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.551, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.641, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.729, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.818, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275786.91, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.002, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.129, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.22, "dur": 0.057, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.329, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.422, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.513, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.604, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.695, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.785, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.877, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275787.968, "dur": 0.048, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.067, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.16, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.252, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.343, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.43, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.52, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275788.611, "dur": 0.493, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.153, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.281, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.374, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.462, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.551, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.64, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.731, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275789.818, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.117, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.212, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.305, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.402, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.494, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.586, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.677, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.772, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.866, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275791.956, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.048, "dur": 0.042, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.141, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.234, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.382, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.477, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.569, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.66, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.756, "dur": 0.035, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.841, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275792.926, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.012, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.102, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.188, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.277, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.372, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.457, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.544, "dur": 0.045, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.637, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.728, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.814, "dur": 0.107, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275793.971, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.055, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.145, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.235, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.325, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.451, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.537, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.629, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.719, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.809, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.897, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275794.985, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275795.075, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275795.159, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275795.248, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275795.339, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275795.427, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.27, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.364, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.454, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.549, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.641, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.733, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.823, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275796.913, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.002, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.09, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.178, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.266, "dur": 0.05, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.368, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.509, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.607, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.703, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.799, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.894, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275797.983, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.074, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.164, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.255, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.346, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.435, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.526, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.615, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.704, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.791, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.88, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275798.969, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.054, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.142, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.235, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.323, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.413, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.502, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.589, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.678, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.77, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.859, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275799.948, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275800.076, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275800.161, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275800.253, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275800.345, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275800.436, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275803.794, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275803.89, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275803.982, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.076, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.168, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.259, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.347, "dur": 0.044, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.44, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.543, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.632, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.718, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.804, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.889, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275804.981, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.071, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.157, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.246, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.333, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.425, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.516, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.608, "dur": 0.043, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.703, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.794, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.887, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275805.979, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.067, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.156, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.301, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.397, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.492, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.583, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.676, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.766, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.858, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275806.947, "dur": 0.037, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.035, "dur": 0.036, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.124, "dur": 0.176, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.353, "dur": 0.04, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.45, "dur": 0.056, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.558, "dur": 0.046, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.654, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.747, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.841, "dur": 0.039, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275807.931, "dur": 0.041, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275808.023, "dur": 0.038, "name": "Quoter.__getitem__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275773.696, "dur": 34.454, "name": "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275808.39, "dur": 1.95, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275771.863, "dur": 39.97, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275771.038, "dur": 40.993, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275770.657, "dur": 41.548, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275816.428, "dur": 0.125, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275816.737, "dur": 0.171, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275817.127, "dur": 0.05, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275766.028, "dur": 51.475, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275764.183, "dur": 53.642, "name": "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275822.605, "dur": 0.57, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275822.27, "dur": 0.972, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275824.891, "dur": 0.167, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275824.406, "dur": 0.844, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275826.866, "dur": 0.401, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275826.662, "dur": 0.676, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275828.723, "dur": 6.579, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275835.532, "dur": 0.118, "name": "collections.deque.remove", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275826.456, "dur": 9.382, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275836.767, "dur": 0.112, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275836.472, "dur": 0.511, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275821.138, "dur": 16.046, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275819.174, "dur": 18.26, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275760.503, "dur": 77.062, "name": "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275838.046, "dur": 0.301, "name": "_io.StringIO.close", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275667.794, "dur": 170.609, "name": "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275651.384, "dur": 187.683, "name": "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22358, "ts": 2942275839.817, "dur": 0.134, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273525.903, "dur": 2.413, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273528.72, "dur": 16.228, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2864581573.14, "dur": 85691981.793, "name": "thread_func (/home/edx/PycharmProjects/examples/threads/basic_thread.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273567.879, "dur": 0.848, "name": "time.perf_counter", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273593.517, "dur": 2.093, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2862778786.649, "dur": 87494814.158, "name": "timeit_wrapper (/home/edx/PycharmProjects/examples/threads/utils.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2862778774.199, "dur": 87494830.125, "name": "run (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:859)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273609.226, "dur": 0.379, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273623.396, "dur": 0.353, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273748.015, "dur": 0.099, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273804.478, "dur": 0.055, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273804.199, "dur": 0.422, "name": "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273801.987, "dur": 2.906, "name": "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273869.783, "dur": 0.067, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273870.533, "dur": 0.299, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273876.282, "dur": 0.084, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273876.668, "dur": 0.033, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273876.892, "dur": 0.122, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273877.653, "dur": 0.382, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273878.239, "dur": 0.248, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273876.038, "dur": 17.06, "name": "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273869.506, "dur": 24.024, "name": "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273806.735, "dur": 87.024, "name": "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273895.704, "dur": 0.064, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273895.905, "dur": 0.209, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273896.42, "dur": 0.036, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273745.543, "dur": 151.57, "name": "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273739.431, "dur": 158.329, "name": "make_thread_killed_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:683)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273984.49, "dur": 0.618, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273984.189, "dur": 1.055, "name": "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273988.952, "dur": 0.385, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273988.143, "dur": 1.32, "name": "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273994.67, "dur": 0.376, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273994.354, "dur": 0.808, "name": "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273993.067, "dur": 3.59, "name": "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273999.095, "dur": 0.134, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273998.671, "dur": 0.659, "name": "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273980.534, "dur": 19.083, "name": "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273900.879, "dur": 99.01, "name": "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22343, "ts": 2950273621.983, "dur": 378.159, "name": "notify_thread_not_alive (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd.py:767)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778425.803, "dur": 87495649.334, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274076.685, "dur": 0.165, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274084.501, "dur": 0.108, "name": "_thread.lock.locked", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274087.211, "dur": 0.883, "name": "daemon (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1095)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274083.659, "dur": 4.646, "name": "_stop (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:944)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778424.362, "dur": 87495664.089, "name": "_wait_for_tstate_lock (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1017)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862778413.307, "dur": 87495676.249, "name": "join (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:979)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274098.905, "dur": 5.452, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2862767756.394, "dur": 87506350.639, "name": "main (/home/edx/PycharmProjects/examples/threads/basic_thread.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274111.694, "dur": 0.257, "name": "time.perf_counter", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274120.288, "dur": 1.689, "name": "builtins.print", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2856273562.853, "dur": 94000562.672, "name": "timeit_wrapper (/home/edx/PycharmProjects/examples/threads/utils.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 22324, "tid": 22324, "ts": 2950274147.95, "dur": 0.272, "name": "log_print (/home/edx/.pyenv/versions/examples/lib/python3.8/site-packages/viztracer/tracer.py:156)", "ph": "X", "cat": "FEE"}], "viztracer_metadata": {"version": "0.15.0", "overflow": false}, "file_info": {"files": {"/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py": ["import ctypes\nimport os\nfrom _pydev_bundle import pydev_log, pydev_monkey\nfrom _pydevd_bundle.pydevd_constants import get_frame, IS_PY2, IS_PY37_OR_GREATER, IS_CPYTHON, IS_WINDOWS, IS_LINUX, IS_MACOS, \\\n    IS_64BIT_PROCESS, IS_PYCHARM_ATTACH\nfrom _pydev_imps._pydev_saved_modules import thread, threading\n\ntry:\n    import cStringIO as StringIO #may not always be available @UnusedImport\nexcept:\n    try:\n        import StringIO #@Reimport\n    except:\n        import io as StringIO\n\n\nimport sys #@Reimport\nimport traceback\n\n_original_settrace = sys.settrace\n\nclass TracingFunctionHolder:\n    '''This class exists just to keep some variables (so that we don't keep them in the global namespace). \n    '''\n    _original_tracing = None\n    _warn = True\n    _lock = thread.allocate_lock()\n    _traceback_limit = 1\n    _warnings_shown = {}\n \n \ndef get_exception_traceback_str():\n    exc_info = sys.exc_info()\n    s = StringIO.StringIO()\n    traceback.print_exception(exc_info[0], exc_info[1], exc_info[2], file=s)\n    return s.getvalue()\n\ndef _get_stack_str(frame):\n    \n    msg = '\\nIf this is needed, please check: ' + \\\n          '\\nhttp://pydev.blogspot.com/2007/06/why-cant-pydev-debugger-work-with.html' + \\\n          '\\nto see how to restore the debug tracing back correctly.\\n' \n          \n    if TracingFunctionHolder._traceback_limit:\n        s = StringIO.StringIO()\n        s.write('Call Location:\\n')\n        traceback.print_stack(f=frame, limit=TracingFunctionHolder._traceback_limit, file=s)\n        msg = msg + s.getvalue()\n    \n    return msg\n\ndef _internal_set_trace(tracing_func):\n    if TracingFunctionHolder._warn:\n        frame = get_frame()\n        if frame is not None and frame.f_back is not None:\n            filename = frame.f_back.f_code.co_filename.lower()\n            if not filename.endswith('threading.py') and not filename.endswith('pydevd_tracing.py'):\n                message = \\\n                '\\nPYDEV DEBUGGER WARNING:' + \\\n                '\\nsys.settrace() should not be used when the debugger is being used.' + \\\n                '\\nThis may cause the debugger to stop working correctly.' + \\\n                '%s' % _get_stack_str(frame.f_back)\n                \n                if message not in TracingFunctionHolder._warnings_shown:\n                    #only warn about each message once...\n                    TracingFunctionHolder._warnings_shown[message] = 1\n                    sys.stderr.write('%s\\n' % (message,))\n                    sys.stderr.flush()\n\n    if TracingFunctionHolder._original_tracing:\n        TracingFunctionHolder._original_tracing(tracing_func)\n\n\ndef SetTrace(tracing_func):\n    if TracingFunctionHolder._original_tracing is None:\n        # This may happen before replace_sys_set_trace_func is called.\n        sys.settrace(tracing_func)\n        return\n\n    try:\n        TracingFunctionHolder._lock.acquire()\n        TracingFunctionHolder._warn = False\n        _internal_set_trace(tracing_func)\n        TracingFunctionHolder._warn = True\n    finally:\n        TracingFunctionHolder._lock.release()\n\n\ndef replace_sys_set_trace_func():\n    if TracingFunctionHolder._original_tracing is None:\n        TracingFunctionHolder._original_tracing = sys.settrace\n        sys.settrace = _internal_set_trace\n\n\ndef restore_sys_set_trace_func():\n    if TracingFunctionHolder._original_tracing is not None:\n        sys.settrace = TracingFunctionHolder._original_tracing\n        TracingFunctionHolder._original_tracing = None\n\n\ndef load_python_helper_lib():\n    if not IS_CPYTHON or ctypes is None or sys.version_info[:2] > (3, 9):\n        return None\n\n    if IS_WINDOWS:\n        if IS_64BIT_PROCESS:\n            suffix = 'amd64'\n        else:\n            suffix = 'x86'\n\n        filename = os.path.join(os.path.dirname(__file__), 'pydevd_attach_to_process', 'attach_%s.dll' % (suffix,))\n\n    elif IS_LINUX:\n        if IS_64BIT_PROCESS:\n            suffix = 'amd64'\n        else:\n            suffix = 'x86'\n\n        filename = os.path.join(os.path.dirname(__file__), 'pydevd_attach_to_process', 'attach_linux_%s.so' % (suffix,))\n\n    elif IS_MACOS:\n        if IS_64BIT_PROCESS:\n            suffix = 'x86_64.dylib'\n        else:\n            suffix = 'x86.dylib'\n\n        filename = os.path.join(os.path.dirname(__file__), 'pydevd_attach_to_process', 'attach_%s' % (suffix,))\n\n    else:\n        pydev_log.info('Unable to set trace to all threads in platform: %s' % sys.platform)\n        return None\n\n    if not os.path.exists(filename):\n        pydev_log.error('Expected: %s to exist.' % filename)\n        return None\n\n    try:\n        # Load as pydll so that we don't release the gil.\n        lib = ctypes.pydll.LoadLibrary(filename)\n        return lib\n    except:\n        # Only show message if tracing is on (we don't have pre-compiled\n        # binaries for all architectures -- i.e.: ARM).\n        pydev_log.error('Error loading: %s' % filename)\n        return None\n\n\ndef set_trace_to_threads(tracing_func):\n    lib = load_python_helper_lib()\n    if lib is None:  # This is the case if it's not CPython.\n        return -1\n\n    if hasattr(sys, 'getswitchinterval'):\n        get_interval, set_interval = sys.getswitchinterval, sys.setswitchinterval\n    else:\n        get_interval, set_interval = sys.getcheckinterval, sys.setcheckinterval\n\n    prev_value = get_interval()\n    ret = 0\n    try:\n        if not IS_PY37_OR_GREATER:\n            # Prevent going to any other thread... if we switch the thread during this operation we\n            # could potentially corrupt the interpreter.\n            # Note: on CPython 3.7 onwards this is not needed (we have a different implementation\n            # for setting the tracing for other threads in this case).\n            set_interval(2 ** 15)\n\n        set_trace_func = TracingFunctionHolder._original_tracing or sys.settrace\n\n        # Note: use sys._current_frames() keys to get the thread ids because it'll return\n        # thread ids created in C/C++ where there's user code running, unlike the APIs\n        # from the threading module which see only threads created through it (unless\n        # a call for threading.current_thread() was previously done in that thread,\n        # in which case a dummy thread would've been created for it).\n        thread_idents = set(sys._current_frames().keys())\n\n        if IS_WINDOWS and IS_PYCHARM_ATTACH:\n            # On Windows, when attaching to a process, some existing threads may not\n            # appear in sys._current_frames()` but be available through the `threading`\n            # facilities. See: PY-44778.\n            thread_idents = thread_idents.union(\n                set(t.ident for t in threading.enumerate()))\n\n        thread_idents = thread_idents.difference(\n            # Ignore pydevd threads.\n            set(t.ident for t in threading.enumerate() if getattr(t, 'pydev_do_not_trace', False))\n        )\n\n        curr_ident = thread.get_ident()\n        curr_thread = threading._active.get(curr_ident)\n\n        for thread_ident in thread_idents:\n            # If that thread is not available in the threading module we also need to create a\n            # dummy thread for it (otherwise it'll be invisible to the debugger).\n            if thread_ident not in threading._active:\n\n                class _DummyThread(threading._DummyThread):\n\n                    def _set_ident(self):\n                        # Note: Hack to set the thread ident that we want.\n                        if IS_PY2:\n                            self._Thread__ident = thread_ident\n                        else:\n                            self._ident = thread_ident\n\n                t = _DummyThread()\n                # Reset to the base class (don't expose our own version of the class).\n                t.__class__ = threading._DummyThread\n\n                with threading._active_limbo_lock:\n                    # On Py2 it'll put in active getting the current indent, not using the\n                    # ident that was set, so, we have to update it (should be harmless on Py3\n                    # so, do it always).\n                    threading._active[thread_ident] = t\n                    threading._active[curr_ident] = curr_thread\n\n                    if t.ident != thread_ident:\n                        # Check if it actually worked.\n                        pydev_log.error('pydevd: creation of _DummyThread with fixed thread ident did not succeed.')\n\n            # Some (ptvsd) tests failed because of this, so, leave it always disabled for now.\n            # show_debug_info = 1 if DebugInfoHolder.DEBUG_TRACE_LEVEL >= 1 else 0\n            show_debug_info = 0\n\n            if IS_PY37_OR_GREATER:\n                # Hack to increase _Py_TracingPossible.\n                # See comments on py_settrace_37.hpp\n                proceed = thread.allocate_lock()\n                proceed.acquire()\n\n                def dummy_trace_on_py37(frame, event, arg):\n                    return dummy_trace_on_py37\n\n                def increase_tracing_count_on_py37():\n                    SetTrace(dummy_trace_on_py37)\n                    proceed.release()\n\n                start_new_thread = pydev_monkey.get_original_start_new_thread(thread)\n                start_new_thread(increase_tracing_count_on_py37, ())\n                proceed.acquire()  # Only proceed after the release() is done.\n                proceed = None\n\n            result = lib.AttachDebuggerTracing(\n                ctypes.c_int(show_debug_info),\n                ctypes.py_object(set_trace_func),\n                ctypes.py_object(tracing_func),\n                ctypes.c_uint(thread_ident),\n                ctypes.py_object(None),\n            )\n            if result != 0:\n                pydev_log.info('Unable to set tracing for existing threads. Result: %s' % result)\n                ret = result\n    finally:\n        if not IS_PY37_OR_GREATER:\n            set_interval(prev_value)\n\n    return ret\n", 257], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py": ["''' pydevd - a debugging daemon\nThis is the daemon you launch for python remote debugging.\n\nProtocol:\neach command has a format:\n    id\\tsequence-num\\ttext\n    id: protocol command number\n    sequence-num: each request has a sequence number. Sequence numbers\n    originating at the debugger are odd, sequence numbers originating\n    at the daemon are even. Every response uses the same sequence number\n    as the request.\n    payload: it is protocol dependent. When response is a complex structure, it\n    is returned as XML. Each attribute value is urlencoded, and then the whole\n    payload is urlencoded again to prevent stray characters corrupting protocol/xml encodings\n\n    Commands:\n\n    NUMBER   NAME                     FROM*     ARGUMENTS                     RESPONSE      NOTE\n100 series: program execution\n    101      RUN                      JAVA      -                             -\n    102      LIST_THREADS             JAVA                                    RETURN with XML listing of all threads\n    103      THREAD_CREATE            PYDB      -                             XML with thread information\n    104      THREAD_KILL              JAVA      id (or * to exit)             kills the thread\n                                      PYDB      id                            nofies JAVA that thread was killed\n    105      THREAD_SUSPEND           JAVA      XML of the stack,             suspends the thread\n                                                reason for suspension\n                                      PYDB      id                            notifies JAVA that thread was suspended\n\n    106      CMD_THREAD_RUN           JAVA      id                            resume the thread\n                                      PYDB      id \\t reason                  notifies JAVA that thread was resumed\n\n    107      STEP_INTO                JAVA      thread_id\n    108      STEP_OVER                JAVA      thread_id\n    109      STEP_RETURN              JAVA      thread_id\n\n    110      GET_VARIABLE             JAVA      thread_id \\t frame_id \\t      GET_VARIABLE with XML of var content\n                                                FRAME|GLOBAL \\t attributes*\n\n    111      SET_BREAK                JAVA      file/line of the breakpoint\n    112      REMOVE_BREAK             JAVA      file/line of the return\n    113      CMD_EVALUATE_EXPRESSION  JAVA      expression                    result of evaluating the expression\n    114      CMD_GET_FRAME            JAVA                                    request for frame contents\n    115      CMD_EXEC_EXPRESSION      JAVA\n    116      CMD_WRITE_TO_CONSOLE     PYDB\n    117      CMD_CHANGE_VARIABLE\n    118      CMD_RUN_TO_LINE\n    119      CMD_RELOAD_CODE\n    120      CMD_GET_COMPLETIONS      JAVA\n\n    200      CMD_REDIRECT_OUTPUT      JAVA      streams to redirect as string -\n                                                'STDOUT' (redirect only STDOUT)\n                                                'STDERR' (redirect only STDERR)\n                                                'STDOUT STDERR' (redirect both streams)\n\n500 series diagnostics/ok\n    501      VERSION                  either      Version string (1.0)        Currently just used at startup\n    502      RETURN                   either      Depends on caller    -\n\n900 series: errors\n    901      ERROR                    either      -                           This is reserved for unexpected errors.\n\n    * JAVA - remote debugger, the java end\n    * PYDB - pydevd, the python end\n'''\n\nimport itertools\n\nfrom _pydev_bundle.pydev_imports import _queue\nfrom _pydev_imps._pydev_saved_modules import thread\nfrom _pydev_imps._pydev_saved_modules import threading\nfrom _pydev_imps._pydev_saved_modules import time\nfrom _pydev_imps._pydev_saved_modules import socket\nfrom socket import socket, AF_INET, SOCK_STREAM, SHUT_RD, SHUT_WR, SOL_SOCKET, SO_REUSEADDR, SHUT_RDWR, timeout\nfrom _pydevd_bundle.pydevd_constants import DebugInfoHolder, get_thread_id, IS_JYTHON, IS_PY2, IS_PY3K, \\\n    IS_PY36_OR_GREATER, STATE_RUN, dict_keys, ASYNC_EVAL_TIMEOUT_SEC, IS_IRONPYTHON, GlobalDebuggerHolder, \\\n    get_global_debugger, GetGlobalDebugger, set_global_debugger, NEXT_VALUE_SEPARATOR\nfrom _pydev_bundle.pydev_override import overrides\nimport json\nimport weakref\n\ntry:\n    from urllib import quote_plus, unquote, unquote_plus\nexcept:\n    from urllib.parse import quote_plus, unquote, unquote_plus  #@Reimport @UnresolvedImport\n\nif IS_IRONPYTHON:\n    # redefine `unquote` for IronPython, since we use it only for logging messages, but it leads to SOF with IronPython\n    def unquote(s):\n        return s\n\nfrom _pydevd_bundle import pydevd_console_integration\nfrom _pydevd_bundle import pydevd_vars\nimport pydevd_tracing\nfrom _pydevd_bundle import pydevd_xml\nfrom _pydevd_bundle import pydevd_vm_type\nfrom _pydevd_bundle import pydevd_bytecode_utils\nfrom pydevd_file_utils import get_abs_path_real_path_and_base_from_frame, norm_file_to_client, is_real_file\nimport pydevd_file_utils\nimport os\nimport sys\nimport inspect\nimport traceback\nfrom _pydevd_bundle.pydevd_utils import quote_smart as quote, compare_object_attrs_key, to_string, \\\n    get_non_pydevd_threads, is_pandas_container, is_numpy_container\nfrom _pydev_bundle.pydev_is_thread_alive import is_thread_alive\nfrom _pydev_bundle import pydev_log\nfrom _pydev_bundle import _pydev_completer\nfrom _pydevd_bundle.pydevd_tables import exec_table_command\n\nfrom pydevd_tracing import get_exception_traceback_str\nfrom _pydevd_bundle import pydevd_console\nfrom _pydev_bundle.pydev_monkey import disable_trace_thread_modules, enable_trace_thread_modules\n\ntry:\n    import cStringIO as StringIO #may not always be available @UnusedImport\nexcept:\n    try:\n        import StringIO #@Reimport\n    except:\n        import io as StringIO\n\nfrom _pydevd_bundle.pydevd_dont_trace_files import DONT_TRACE, PYDEV_FILE\nget_file_type = DONT_TRACE.get\n\n\n# CMD_XXX constants imported for backward compatibility\nfrom _pydevd_bundle.pydevd_comm_constants import (\n    ID_TO_MEANING, CMD_RUN, CMD_LIST_THREADS, CMD_THREAD_CREATE, CMD_THREAD_KILL,\n    CMD_THREAD_SUSPEND, CMD_THREAD_RUN, CMD_STEP_INTO, CMD_STEP_OVER, CMD_STEP_RETURN, CMD_GET_VARIABLE,\n    CMD_SET_BREAK, CMD_REMOVE_BREAK, CMD_EVALUATE_EXPRESSION, CMD_GET_FRAME,\n    CMD_EXEC_EXPRESSION, CMD_WRITE_TO_CONSOLE, CMD_CHANGE_VARIABLE, CMD_RUN_TO_LINE,\n    CMD_RELOAD_CODE, CMD_GET_COMPLETIONS, CMD_CONSOLE_EXEC, CMD_ADD_EXCEPTION_BREAK,\n    CMD_REMOVE_EXCEPTION_BREAK, CMD_LOAD_SOURCE, CMD_ADD_DJANGO_EXCEPTION_BREAK,\n    CMD_REMOVE_DJANGO_EXCEPTION_BREAK, CMD_SET_NEXT_STATEMENT, CMD_SMART_STEP_INTO,\n    CMD_EXIT, CMD_SIGNATURE_CALL_TRACE, CMD_SET_PY_EXCEPTION, CMD_GET_FILE_CONTENTS,\n    CMD_SET_PROPERTY_TRACE, CMD_EVALUATE_CONSOLE_EXPRESSION, CMD_RUN_CUSTOM_OPERATION,\n    CMD_GET_BREAKPOINT_EXCEPTION, CMD_STEP_CAUGHT_EXCEPTION, CMD_SEND_CURR_EXCEPTION_TRACE,\n    CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED, CMD_IGNORE_THROWN_EXCEPTION_AT, CMD_ENABLE_DONT_TRACE,\n    CMD_SHOW_CONSOLE, CMD_GET_ARRAY, CMD_STEP_INTO_MY_CODE, CMD_GET_CONCURRENCY_EVENT,\n    CMD_SHOW_RETURN_VALUES, CMD_SET_UNIT_TEST_DEBUGGING_MODE, CMD_INPUT_REQUESTED, CMD_GET_DESCRIPTION, CMD_PROCESS_CREATED,\n    CMD_SHOW_CYTHON_WARNING, CMD_LOAD_FULL_VALUE, CMD_GET_THREAD_STACK, CMD_THREAD_DUMP_TO_STDERR,\n    CMD_STOP_ON_START, CMD_GET_EXCEPTION_DETAILS, CMD_PROCESS_CREATED_MSG_RECEIVED, CMD_PYDEVD_JSON_CONFIG,\n    CMD_THREAD_SUSPEND_SINGLE_NOTIFICATION, CMD_THREAD_RESUME_SINGLE_NOTIFICATION,\n    CMD_REDIRECT_OUTPUT, CMD_GET_NEXT_STATEMENT_TARGETS, CMD_SET_PROJECT_ROOTS, CMD_VERSION,\n    CMD_RETURN, CMD_SET_PROTOCOL, CMD_ERROR, CMD_GET_SMART_STEP_INTO_VARIANTS, CMD_DATAVIEWER_ACTION,\n    CMD_TABLE_EXEC, CMD_INTERRUPT_DEBUG_CONSOLE)\nMAX_IO_MSG_SIZE = 1000  #if the io is too big, we'll not send all (could make the debugger too non-responsive)\n#this number can be changed if there's need to do so\n\nVERSION_STRING = \"@@BUILD_NUMBER@@\"\n\nfrom _pydev_bundle._pydev_filesystem_encoding import getfilesystemencoding\nfile_system_encoding = getfilesystemencoding()\nfilesystem_encoding_is_utf8 = file_system_encoding.lower() in ('utf-8', 'utf_8', 'utf8')\n\n\nclass CommunicationRole(object):\n    \"\"\"The class that contains the constants of roles that `PyDB` can play in\n    the communication with the IDE.\n    \"\"\"\n    CLIENT = 0\n    SERVER = 1\n\n\n#--------------------------------------------------------------------------------------------------- UTILITIES\n\n#=======================================================================================================================\n# pydevd_log\n#=======================================================================================================================\ndef pydevd_log(level, *args):\n    \"\"\" levels are:\n        0 most serious warnings/errors\n        1 warnings/significant events\n        2 informational trace\n    \"\"\"\n    if level <= DebugInfoHolder.DEBUG_TRACE_LEVEL:\n        #yes, we can have errors printing if the console of the program has been finished (and we're still trying to print something)\n        try:\n            sys.stderr.write('%s\\n' % (args,))\n        except:\n            pass\n\n\n#------------------------------------------------------------------- ACTUAL COMM\n\n#=======================================================================================================================\n# PyDBDaemonThread\n#=======================================================================================================================\nclass PyDBDaemonThread(threading.Thread):\n    created_pydb_daemon_threads = {}\n\n    def __init__(self, target_and_args=None):\n        '''\n        :param target_and_args:\n            tuple(func, args, kwargs) if this should be a function and args to run.\n            -- Note: use through run_as_pydevd_daemon_thread().\n        '''\n        threading.Thread.__init__(self)\n        self.killReceived = False\n        mark_as_pydevd_daemon_thread(self)\n        self._target_and_args = target_and_args\n\n    def run(self):\n        created_pydb_daemon = self.created_pydb_daemon_threads\n        created_pydb_daemon[self] = 1\n        try:\n            try:\n                if IS_JYTHON and not isinstance(threading.currentThread(), threading._MainThread):\n                    # we shouldn't update sys.modules for the main thread, cause it leads to the second importing 'threading'\n                    # module, and the new instance of main thread is created\n                    import org.python.core as PyCore #@UnresolvedImport\n                    ss = PyCore.PySystemState()\n                    # Note: Py.setSystemState() affects only the current thread.\n                    PyCore.Py.setSystemState(ss)\n\n                self._stop_trace()\n                self._warn_pydevd_thread_is_traced()\n                self._on_run()\n            except:\n                if sys is not None and traceback is not None:\n                    traceback.print_exc()\n        finally:\n            del created_pydb_daemon[self]\n\n    def _on_run(self):\n        if self._target_and_args is not None:\n            target, args, kwargs = self._target_and_args\n            target(*args, **kwargs)\n        else:\n            raise NotImplementedError('Should be reimplemented by: %s' % self.__class__)\n\n    def do_kill_pydev_thread(self):\n        self.killReceived = True\n\n    def _stop_trace(self):\n        if self.pydev_do_not_trace:\n            pydevd_tracing.SetTrace(None)  # no debugging on this thread\n\n    def _warn_pydevd_thread_is_traced(self):\n        if self.pydev_do_not_trace and sys.gettrace():\n            pydevd_log(1, \"The debugger thread '%s' is traced which may lead to debugging performance issues.\" % self.__class__.__name__)\n\n\ndef mark_as_pydevd_daemon_thread(thread):\n    thread.pydev_do_not_trace = True\n    thread.is_pydev_daemon_thread = True\n    thread.daemon = True\n\n\ndef run_as_pydevd_daemon_thread(func, *args, **kwargs):\n    '''\n    Runs a function as a pydevd daemon thread (without any tracing in place).\n    '''\n    t = PyDBDaemonThread(target_and_args=(func, args, kwargs))\n    t.name = '%s (pydevd daemon thread)' % (func.__name__,)\n    t.start()\n    return t\n\n\n#=======================================================================================================================\n# ReaderThread\n#=======================================================================================================================\nclass ReaderThread(PyDBDaemonThread):\n    \"\"\" reader thread reads and dispatches commands in an infinite loop \"\"\"\n\n    def __init__(self, sock):\n        PyDBDaemonThread.__init__(self)\n        self.sock = sock\n        self.setName(\"pydevd.Reader\")\n        from _pydevd_bundle.pydevd_process_net_command import process_net_command\n        self.process_net_command = process_net_command\n        self.global_debugger_holder = GlobalDebuggerHolder\n\n\n\n    def do_kill_pydev_thread(self):\n        #We must close the socket so that it doesn't stay halted there.\n        self.killReceived = True\n        try:\n            self.sock.shutdown(SHUT_RD) #shutdown the socket for read\n        except:\n            #just ignore that\n            pass\n\n    @overrides(PyDBDaemonThread._on_run)\n    def _on_run(self):\n        read_buffer = \"\"\n        try:\n\n            while not self.killReceived:\n                try:\n                    r = self.sock.recv(1024)\n                except:\n                    if not self.killReceived:\n                        traceback.print_exc()\n                        self.handle_except()\n                    return #Finished communication.\n\n                #Note: the java backend is always expected to pass utf-8 encoded strings. We now work with unicode\n                #internally and thus, we may need to convert to the actual encoding where needed (i.e.: filenames\n                #on python 2 may need to be converted to the filesystem encoding).\n                if hasattr(r, 'decode'):\n                    r = r.decode('utf-8')\n\n                read_buffer += r\n                if DebugInfoHolder.DEBUG_RECORD_SOCKET_READS:\n                    sys.stderr.write(u'debugger: received >>%s<<\\n' % (read_buffer,))\n                    sys.stderr.flush()\n\n                if len(read_buffer) == 0:\n                    self.handle_except()\n                    break\n                while read_buffer.find(u'\\n') != -1:\n                    command, read_buffer = read_buffer.split(u'\\n', 1)\n\n                    args = command.split(u'\\t', 2)\n                    try:\n                        cmd_id = int(args[0])\n                        pydev_log.debug('Received command: %s %s\\n' % (ID_TO_MEANING.get(str(cmd_id), '???'), command,))\n                        self.process_command(cmd_id, int(args[1]), args[2])\n                    except:\n                        traceback.print_exc()\n                        sys.stderr.write(\"Can't process net command: %s\\n\" % command)\n                        sys.stderr.flush()\n\n        except:\n            traceback.print_exc()\n            self.handle_except()\n\n\n    def handle_except(self):\n        self.global_debugger_holder.global_dbg.finish_debugging_session()\n\n    def process_command(self, cmd_id, seq, text):\n        self.process_net_command(self.global_debugger_holder.global_dbg, cmd_id, seq, text)\n\n\n#----------------------------------------------------------------------------------- SOCKET UTILITIES - WRITER\n#=======================================================================================================================\n# WriterThread\n#=======================================================================================================================\nclass WriterThread(PyDBDaemonThread):\n    \"\"\" writer thread writes out the commands in an infinite loop \"\"\"\n    def __init__(self, sock):\n        PyDBDaemonThread.__init__(self)\n        self.sock = sock\n        self.setName(\"pydevd.Writer\")\n        self.cmdQueue = _queue.Queue()\n        if pydevd_vm_type.get_vm_type() == 'python':\n            self.timeout = 0\n        else:\n            self.timeout = 0.1\n\n    def add_command(self, cmd):\n        \"\"\" cmd is NetCommand \"\"\"\n        if not self.killReceived: #we don't take new data after everybody die\n            self.cmdQueue.put(cmd)\n\n    @overrides(PyDBDaemonThread._on_run)\n    def _on_run(self):\n        \"\"\" just loop and write responses \"\"\"\n\n        try:\n            while True:\n                try:\n                    try:\n                        cmd = self.cmdQueue.get(1, 0.1)\n                    except _queue.Empty:\n                        if self.killReceived:\n                            try:\n                                self.sock.shutdown(SHUT_WR)\n                                self.sock.close()\n                            except:\n                                pass\n\n                            return #break if queue is empty and killReceived\n                        else:\n                            continue\n                except:\n                    #pydevd_log(0, 'Finishing debug communication...(1)')\n                    #when liberating the thread here, we could have errors because we were shutting down\n                    #but the thread was still not liberated\n                    return\n                cmd.send(self.sock)\n\n                if cmd.id == CMD_EXIT:\n                    break\n                if time is None:\n                    break #interpreter shutdown\n                time.sleep(self.timeout)\n        except Exception:\n            GlobalDebuggerHolder.global_dbg.finish_debugging_session()\n            if DebugInfoHolder.DEBUG_TRACE_LEVEL >= 0:\n                traceback.print_exc()\n\n    def empty(self):\n        return self.cmdQueue.empty()\n\n\n\n#--------------------------------------------------- CREATING THE SOCKET THREADS\n\n#=======================================================================================================================\n# start_server\n#=======================================================================================================================\ndef start_server(port):\n    \"\"\" binds to a port, waits for the debugger to connect \"\"\"\n    s = socket(AF_INET, SOCK_STREAM)\n    s.settimeout(None)\n\n    try:\n        from socket import SO_REUSEPORT\n        s.setsockopt(SOL_SOCKET, SO_REUSEPORT, 1)\n    except ImportError:\n        s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n\n    s.bind(('', port))\n    pydevd_log(1, \"Bound to port \", str(port))\n\n    try:\n        s.listen(1)\n        newSock, _addr = s.accept()\n        pydevd_log(1, \"Connection accepted\")\n        # closing server socket is not necessary but we don't need it\n        s.shutdown(SHUT_RDWR)\n        s.close()\n        return newSock\n\n    except:\n        sys.stderr.write(\"Could not bind to port: %s\\n\" % (port,))\n        sys.stderr.flush()\n        traceback.print_exc()\n\n#=======================================================================================================================\n# start_client\n#=======================================================================================================================\ndef start_client(host, port):\n    \"\"\" connects to a host/port \"\"\"\n    pydevd_log(1, \"Connecting to \", host, \":\", str(port))\n\n    s = socket(AF_INET, SOCK_STREAM)\n\n    #  Set TCP keepalive on an open socket.\n    #  It activates after 1 second (TCP_KEEPIDLE,) of idleness,\n    #  then sends a keepalive ping once every 3 seconds (TCP_KEEPINTVL),\n    #  and closes the connection after 5 failed ping (TCP_KEEPCNT), or 15 seconds\n    try:\n        from socket import IPPROTO_TCP, SO_KEEPALIVE, TCP_KEEPIDLE, TCP_KEEPINTVL, TCP_KEEPCNT\n        s.setsockopt(SOL_SOCKET, SO_KEEPALIVE, 1)\n        s.setsockopt(IPPROTO_TCP, TCP_KEEPIDLE, 1)\n        s.setsockopt(IPPROTO_TCP, TCP_KEEPINTVL, 3)\n        s.setsockopt(IPPROTO_TCP, TCP_KEEPCNT, 5)\n    except ImportError:\n        pass  # May not be available everywhere.\n\n    try:\n        s.settimeout(10)  # 10 seconds timeout\n        s.connect((host, port))\n        s.settimeout(None)  # no timeout after connected\n        pydevd_log(1, \"Connected.\")\n        return s\n    except:\n        sys.stderr.write(\"Could not connect to %s: %s\\n\" % (host, port))\n        sys.stderr.flush()\n        traceback.print_exc()\n        raise\n\n\n\n\n#------------------------------------------------------------------------------------ MANY COMMUNICATION STUFF\n\n#=======================================================================================================================\n# NetCommand\n#=======================================================================================================================\nclass NetCommand:\n    \"\"\" Commands received/sent over the network.\n\n    Command can represent command received from the debugger,\n    or one to be sent by daemon.\n    \"\"\"\n    next_seq = 0 # sequence numbers\n\n    # Protocol where each line is a new message (text is quoted to prevent new lines).\n    QUOTED_LINE_PROTOCOL = 'quoted-line'\n\n    # Uses http protocol to provide a new message.\n    # i.e.: Content-Length:xxx\\r\\n\\r\\npayload\n    HTTP_PROTOCOL = 'http'\n\n    protocol = QUOTED_LINE_PROTOCOL\n\n    _showing_debug_info = 0\n    _show_debug_info_lock = threading.RLock()\n\n    def __init__(self, cmd_id, seq, text):\n        \"\"\"\n        If sequence is 0, new sequence will be generated (otherwise, this was the response\n        to a command from the client).\n        \"\"\"\n        self.id = cmd_id\n        if seq == 0:\n            NetCommand.next_seq += 2\n            seq = NetCommand.next_seq\n        self.seq = seq\n\n        if IS_PY2:\n            if isinstance(text, unicode):\n                text = text.encode('utf-8')\n            else:\n                assert isinstance(text, str)\n        else:\n            assert isinstance(text, str)\n\n        if DebugInfoHolder.DEBUG_TRACE_LEVEL >= 1:\n            self._show_debug_info(cmd_id, seq, text)\n\n        if self.protocol == self.HTTP_PROTOCOL:\n            msg = '%s\\t%s\\t%s\\n' % (cmd_id, seq, text)\n        else:\n            encoded = quote(to_string(text), '/<>_=\" \\t')\n            msg = '%s\\t%s\\t%s\\n' % (cmd_id, seq, encoded)\n\n\n        if IS_PY2:\n            assert isinstance(msg, str)  # i.e.: bytes\n            as_bytes = msg\n        else:\n            if isinstance(msg, str):\n                msg = msg.encode('utf-8')\n\n            assert isinstance(msg, bytes)\n            as_bytes = msg\n        self._as_bytes = as_bytes\n\n    def send(self, sock):\n        as_bytes = self._as_bytes\n        if self.protocol == self.HTTP_PROTOCOL:\n            sock.sendall(('Content-Length: %s\\r\\n\\r\\n' % len(as_bytes)).encode('ascii'))\n\n        sock.sendall(as_bytes)\n\n    @classmethod\n    def _show_debug_info(cls, cmd_id, seq, text):\n        with cls._show_debug_info_lock:\n            # Only one thread each time (rlock).\n            if cls._showing_debug_info:\n                # avoid recursing in the same thread (just printing could create\n                # a new command when redirecting output).\n                return\n\n            cls._showing_debug_info += 1\n            try:\n                out_message = 'sending cmd --> '\n                out_message += \"%20s\" % ID_TO_MEANING.get(str(cmd_id), 'UNKNOWN')\n                out_message += ' '\n                out_message += text.replace('\\n', ' ')\n                try:\n                    sys.stderr.write('%s\\n' % (out_message,))\n                except:\n                    pass\n            finally:\n                cls._showing_debug_info -= 1\n\n\n#=======================================================================================================================\n# NetCommandFactory\n#=======================================================================================================================\nclass NetCommandFactory:\n\n    def _thread_to_xml(self, thread):\n        \"\"\" thread information as XML \"\"\"\n        name = pydevd_xml.make_valid_xml_value(thread.getName())\n        cmdText = '<thread name=\"%s\" id=\"%s\" />' % (quote(name), get_thread_id(thread))\n        return cmdText\n\n    def make_error_message(self, seq, text):\n        cmd = NetCommand(CMD_ERROR, seq, text)\n        if DebugInfoHolder.DEBUG_TRACE_LEVEL > 2:\n            sys.stderr.write(\"Error: %s\" % (text,))\n        return cmd\n\n    def make_protocol_set_message(self, seq):\n        return NetCommand(CMD_SET_PROTOCOL, seq, '')\n\n    def make_thread_created_message(self, thread):\n        cmdText = \"<xml>\" + self._thread_to_xml(thread) + \"</xml>\"\n        return NetCommand(CMD_THREAD_CREATE, 0, cmdText)\n\n    def make_process_created_message(self):\n        cmdText = '<process/>'\n        return NetCommand(CMD_PROCESS_CREATED, 0, cmdText)\n\n    def make_show_warning_message(self, message_id):\n        try:\n            cmdText = '<xml><warning id=\"%s\" /></xml>' % message_id\n            return NetCommand(CMD_SHOW_CYTHON_WARNING, 0, cmdText)\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_custom_frame_created_message(self, frameId, frameDescription):\n        frameDescription = pydevd_xml.make_valid_xml_value(frameDescription)\n        cmdText = '<xml><thread name=\"%s\" id=\"%s\"/></xml>' % (frameDescription, frameId)\n        return NetCommand(CMD_THREAD_CREATE, 0, cmdText)\n\n\n    def make_list_threads_message(self, seq):\n        \"\"\" returns thread listing as XML \"\"\"\n        try:\n            threads = get_non_pydevd_threads()\n            cmd_text = [\"<xml>\"]\n            append = cmd_text.append\n            for thread in threads:\n                if is_thread_alive(thread):\n                    append(self._thread_to_xml(thread))\n            append(\"</xml>\")\n            return NetCommand(CMD_RETURN, seq, ''.join(cmd_text))\n        except:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_thread_stack_message(self, seq, thread_id, topmost_frame, must_be_suspended=False):\n        \"\"\"\n        Returns thread stack as XML.\n\n        :param be_suspended: If True and the thread is not suspended, returns None.\n        \"\"\"\n        try:\n            # If frame is None, the return is an empty frame list.\n            cmd_text = ['<xml><thread id=\"%s\">' % (thread_id,)]\n\n            if topmost_frame is not None:\n                try:\n                    # Note: if we detect that we're already stopped in a given place within\n                    # the debugger, use that stack instead of creating a new one with the\n                    # current position (this is needed because when an uncaught exception\n                    # is reported for a given frame we are actually stopped in a different\n                    # place within the debugger).\n                    frame = topmost_frame\n                    thread_stack_str = ''\n                    while frame is not None:\n                        if frame.f_code.co_name == 'do_wait_suspend' and frame.f_code.co_filename.endswith('pydevd.py'):\n                            thread_stack_str = frame.f_locals.get('thread_stack_str')\n                            break\n                        frame = frame.f_back\n                    else:\n                        # Could not find stack of suspended frame...\n                        if must_be_suspended:\n                            return None\n                    cmd_text.append(thread_stack_str or self.make_thread_stack_str(topmost_frame))\n                finally:\n                    topmost_frame = None\n            cmd_text.append('</thread></xml>')\n            return NetCommand(CMD_GET_THREAD_STACK, seq, ''.join(cmd_text))\n        except:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_variable_changed_message(self, seq, payload):\n        # notify debugger that value was changed successfully\n        return NetCommand(CMD_RETURN, seq, payload)\n\n    def make_io_message(self, v, ctx):\n        '''\n        @param v: the message to pass to the debug server\n        @param ctx: 1 for stdio 2 for stderr\n        '''\n\n        try:\n            if len(v) > MAX_IO_MSG_SIZE:\n                v = v[0:MAX_IO_MSG_SIZE]\n                v += '...'\n\n            v = pydevd_xml.make_valid_xml_value(quote(v, '/>_= '))\n            return NetCommand(str(CMD_WRITE_TO_CONSOLE), 0, '<xml><io s=\"%s\" ctx=\"%s\"/></xml>' % (v, ctx))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_version_message(self, seq):\n        try:\n            return NetCommand(CMD_VERSION, seq, VERSION_STRING)\n        except:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_thread_killed_message(self, id):\n        try:\n            return NetCommand(CMD_THREAD_KILL, 0, str(id))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_thread_stack_str(self, frame, frame_to_lineno=None):\n        '''\n        :param frame_to_lineno:\n            If available, the line number for the frame will be gotten from this dict,\n            otherwise frame.f_lineno will be used (needed for unhandled exceptions as\n            the place where we report may be different from the place where it's raised).\n        '''\n        if frame_to_lineno is None:\n            frame_to_lineno = {}\n        make_valid_xml_value = pydevd_xml.make_valid_xml_value\n        cmd_text_list = []\n        append = cmd_text_list.append\n\n        curr_frame = frame\n        frame = None  # Clear frame reference\n        try:\n            while curr_frame:\n                my_id = id(curr_frame)\n\n                if curr_frame.f_code is None:\n                    break  # Iron Python sometimes does not have it!\n\n                method_name = curr_frame.f_code.co_name  # method name (if in method) or ? if global\n                if method_name is None:\n                    break  # Iron Python sometimes does not have it!\n\n                abs_path_real_path_and_base = get_abs_path_real_path_and_base_from_frame(curr_frame)\n                if get_file_type(abs_path_real_path_and_base[2]) == PYDEV_FILE:\n                    # Syntax errors are a special case in which we don't want to skip the debugger files.\n                    # When a syntax error happens, we stop either in the `execfile` or `_exec` function.\n                    exception_info, is_syntax_error = curr_frame.f_locals.get('__exception__'), False\n                    if exception_info:\n                        is_syntax_error = exception_info[0] is SyntaxError\n                    if not is_syntax_error:\n                        # Skip pydevd files.\n                        curr_frame = curr_frame.f_back\n                        continue\n\n                my_file = abs_path_real_path_and_base[0]\n\n                if is_real_file(my_file):\n                    # if filename is Jupyter cell id\n                    my_file = pydevd_file_utils.norm_file_to_client(abs_path_real_path_and_base[0])\n\n                if file_system_encoding.lower() != \"utf-8\" and hasattr(my_file, \"decode\"):\n                    # my_file is a byte string encoded using the file system encoding\n                    # convert it to utf8\n                    my_file = my_file.decode(file_system_encoding).encode(\"utf-8\")\n\n                #print \"file is \", my_file\n                #my_file = inspect.getsourcefile(curr_frame) or inspect.getfile(frame)\n\n                lineno = frame_to_lineno.get(curr_frame, curr_frame.f_lineno)\n                # print(\"line is \", lineno)\n\n                # Note: variables are all gotten 'on-demand'.\n                append('<frame id=\"%s\" name=\"%s\" ' % (my_id , make_valid_xml_value(method_name)))\n                append('file=\"%s\" line=\"%s\">' % (make_valid_xml_value(my_file), lineno))\n                append(\"</frame>\")\n                curr_frame = curr_frame.f_back\n        except:\n            traceback.print_exc()\n\n        curr_frame = None  # Clear frame reference\n        return ''.join(cmd_text_list)\n\n    def make_thread_suspend_str(\n            self,\n            thread_id,\n            frame,\n            stop_reason=None,\n            message=None,\n            suspend_type=\"trace\",\n            frame_to_lineno=None\n    ):\n        \"\"\"\n        :return tuple(str,str):\n            Returns tuple(thread_suspended_str, thread_stack_str).\n\n            i.e.:\n            (\n                '''\n                    <xml>\n                        <thread id=\"id\" stop_reason=\"reason\">\n                            <frame id=\"id\" name=\"functionName \" file=\"file\" line=\"line\">\n                            </frame>\n                        </thread>\n                    </xml>\n                '''\n                ,\n                '''\n                <frame id=\"id\" name=\"functionName \" file=\"file\" line=\"line\">\n                </frame>\n                '''\n            )\n        \"\"\"\n        make_valid_xml_value = pydevd_xml.make_valid_xml_value\n        cmd_text_list = []\n        append = cmd_text_list.append\n\n        cmd_text_list.append('<xml>')\n        if message:\n            message = make_valid_xml_value(message)\n\n        append('<thread id=\"%s\"' % (thread_id,))\n        if stop_reason is not None:\n            append(' stop_reason=\"%s\"' % (stop_reason,))\n        if message is not None:\n            append(' message=\"%s\"' % (message,))\n        if suspend_type is not None:\n            append(' suspend_type=\"%s\"' % (suspend_type,))\n        append('>')\n        thread_stack_str = self.make_thread_stack_str(frame, frame_to_lineno)\n        append(thread_stack_str)\n        append(\"</thread></xml>\")\n\n        return ''.join(cmd_text_list), thread_stack_str\n\n    def make_thread_suspend_message(self, thread_id, frame, stop_reason, message, suspend_type, frame_to_lineno=None):\n        try:\n            thread_suspend_str, thread_stack_str = self.make_thread_suspend_str(\n                thread_id, frame, stop_reason, message, suspend_type, frame_to_lineno=frame_to_lineno)\n            cmd = NetCommand(CMD_THREAD_SUSPEND, 0, thread_suspend_str)\n            cmd.thread_stack_str = thread_stack_str\n            cmd.thread_suspend_str = thread_suspend_str\n            return cmd\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_thread_suspend_single_notification(self, thread_id, stop_reason):\n        try:\n            return NetCommand(CMD_THREAD_SUSPEND_SINGLE_NOTIFICATION, 0, json.dumps(\n                {'thread_id': thread_id, 'stop_reason': stop_reason}))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_thread_resume_single_notification(self, thread_id):\n        try:\n            return NetCommand(CMD_THREAD_RESUME_SINGLE_NOTIFICATION, 0, json.dumps(\n                {'thread_id': thread_id}))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_thread_run_message(self, thread_id, reason):\n        try:\n            return NetCommand(CMD_THREAD_RUN, 0, \"%s\\t%s\" % (thread_id, reason))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_get_variable_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_VARIABLE, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n\n    def make_get_array_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_ARRAY, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_successful_dataviewer_action_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_DATAVIEWER_ACTION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_description_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_DESCRIPTION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_frame_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_FRAME, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n\n    def make_evaluate_expression_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_EVALUATE_EXPRESSION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_completions_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_COMPLETIONS, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_file_contents(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_FILE_CONTENTS, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_send_breakpoint_exception_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_BREAKPOINT_EXCEPTION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def _make_send_curr_exception_trace_str(self, thread_id, exc_type, exc_desc, trace_obj):\n        while trace_obj.tb_next is not None:\n            trace_obj = trace_obj.tb_next\n\n        exc_type = pydevd_xml.make_valid_xml_value(str(exc_type)).replace('\\t', '  ') or 'exception: type unknown'\n        exc_desc = pydevd_xml.make_valid_xml_value(str(exc_desc)).replace('\\t', '  ') or 'exception: no description'\n\n        thread_suspend_str, thread_stack_str = self.make_thread_suspend_str(\n            thread_id, trace_obj.tb_frame, CMD_SEND_CURR_EXCEPTION_TRACE, '')\n        return exc_type, exc_desc, thread_suspend_str, thread_stack_str\n\n    def make_send_curr_exception_trace_message(self, seq, thread_id, curr_frame_id, exc_type, exc_desc, trace_obj):\n        try:\n            exc_type, exc_desc, thread_suspend_str, _thread_stack_str = self._make_send_curr_exception_trace_str(\n                thread_id, exc_type, exc_desc, trace_obj)\n            payload = str(curr_frame_id) + '\\t' + exc_type + \"\\t\" + exc_desc + \"\\t\" + thread_suspend_str\n            return NetCommand(CMD_SEND_CURR_EXCEPTION_TRACE, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_get_exception_details_message(self, seq, thread_id, topmost_frame):\n        \"\"\"Returns exception details as XML \"\"\"\n        try:\n            # If the debugger is not suspended, just return the thread and its id.\n            cmd_text = ['<xml><thread id=\"%s\" ' % (thread_id,)]\n\n            if topmost_frame is not None:\n                try:\n                    frame = topmost_frame\n                    topmost_frame = None\n                    while frame is not None:\n                        if frame.f_code.co_name == 'do_wait_suspend' and frame.f_code.co_filename.endswith('pydevd.py'):\n                            arg = frame.f_locals.get('arg', None)\n                            if arg is not None:\n                                exc_type, exc_desc, _thread_suspend_str, thread_stack_str = self._make_send_curr_exception_trace_str(\n                                    thread_id, *arg)\n                                cmd_text.append('exc_type=\"%s\" ' % (exc_type,))\n                                cmd_text.append('exc_desc=\"%s\" ' % (exc_desc,))\n                                cmd_text.append('>')\n                                cmd_text.append(thread_stack_str)\n                                break\n                        frame = frame.f_back\n                    else:\n                        cmd_text.append('>')\n                finally:\n                    frame = None\n            cmd_text.append('</thread></xml>')\n            return NetCommand(CMD_GET_EXCEPTION_DETAILS, seq, ''.join(cmd_text))\n        except:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_send_curr_exception_trace_proceeded_message(self, seq, thread_id):\n        try:\n            return NetCommand(CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED, 0, str(thread_id))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_send_console_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_EVALUATE_CONSOLE_EXPRESSION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_custom_operation_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_RUN_CUSTOM_OPERATION, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_load_source_message(self, seq, source, dbg=None):\n        try:\n            net = NetCommand(CMD_LOAD_SOURCE, seq, '%s' % source)\n\n        except:\n            net = self.make_error_message(0, get_exception_traceback_str())\n\n        if dbg:\n            dbg.writer.add_command(net)\n        return net\n\n    def make_show_console_message(self, thread_id, frame):\n        try:\n            thread_suspended_str, _thread_stack_str = self.make_thread_suspend_str(thread_id, frame, CMD_SHOW_CONSOLE, '')\n            return NetCommand(CMD_SHOW_CONSOLE, 0, thread_suspended_str)\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_input_requested_message(self, started):\n        try:\n            return NetCommand(CMD_INPUT_REQUESTED, 0, str(started))\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_set_next_stmnt_status_message(self, seq, is_success, exception_msg):\n        try:\n            message = str(is_success) + '\\t' + exception_msg\n            return NetCommand(CMD_SET_NEXT_STATEMENT, int(seq), message)\n        except:\n            return self.make_error_message(0, get_exception_traceback_str())\n\n    def make_load_full_value_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_LOAD_FULL_VALUE, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n    def make_exit_message(self):\n        try:\n            net = NetCommand(CMD_EXIT, 0, '')\n\n        except:\n            net = self.make_error_message(0, get_exception_traceback_str())\n\n        return net\n\n    def make_get_next_statement_targets_message(self, seq, payload):\n        try:\n            return NetCommand(CMD_GET_NEXT_STATEMENT_TARGETS, seq, payload)\n        except Exception:\n            return self.make_error_message(seq, get_exception_traceback_str())\n\n\nINTERNAL_TERMINATE_THREAD = 1\nINTERNAL_SUSPEND_THREAD = 2\n\n\n#=======================================================================================================================\n# InternalThreadCommand\n#=======================================================================================================================\nclass InternalThreadCommand:\n    \"\"\" internal commands are generated/executed by the debugger.\n\n    The reason for their existence is that some commands have to be executed\n    on specific threads. These are the InternalThreadCommands that get\n    get posted to PyDB.cmdQueue.\n    \"\"\"\n\n    def __init__(self, thread_id):\n        self.thread_id = thread_id\n\n    def can_be_executed_by(self, thread_id):\n        '''By default, it must be in the same thread to be executed\n        '''\n        return self.thread_id == thread_id or self.thread_id.endswith('|' + thread_id)\n\n    def do_it(self, dbg):\n        raise NotImplementedError(\"you have to override do_it\")\n\n\nclass ReloadCodeCommand(InternalThreadCommand):\n\n\n    def __init__(self, module_name, thread_id):\n        self.thread_id = thread_id\n        self.module_name = module_name\n        self.executed = False\n        self.lock = thread.allocate_lock()\n\n\n    def can_be_executed_by(self, thread_id):\n        if self.thread_id == '*':\n            return True  #Any thread can execute it!\n\n        return InternalThreadCommand.can_be_executed_by(self, thread_id)\n\n\n    def do_it(self, dbg):\n        self.lock.acquire()\n        try:\n            if self.executed:\n                return\n            self.executed = True\n        finally:\n            self.lock.release()\n\n        module_name = self.module_name\n        if module_name not in sys.modules:\n            if '.' in module_name:\n                new_module_name = module_name.split('.')[-1]\n                if new_module_name in sys.modules:\n                    module_name = new_module_name\n\n        if module_name not in sys.modules:\n            sys.stderr.write('pydev debugger: Unable to find module to reload: \"' + module_name + '\".\\n')\n            # Too much info...\n            # sys.stderr.write('pydev debugger: This usually means you are trying to reload the __main__ module (which cannot be reloaded).\\n')\n\n        else:\n            sys.stderr.write('pydev debugger: Start reloading module: \"' + module_name + '\" ... \\n')\n            from _pydevd_bundle import pydevd_reload\n            if pydevd_reload.xreload(sys.modules[module_name]):\n                sys.stderr.write('pydev debugger: reload finished\\n')\n            else:\n                sys.stderr.write('pydev debugger: reload finished without applying any change\\n')\n\n\n#=======================================================================================================================\n# InternalGetThreadStack\n#=======================================================================================================================\nclass InternalGetThreadStack(InternalThreadCommand):\n    '''\n    This command will either wait for a given thread to be paused to get its stack or will provide\n    it anyways after a timeout (in which case the stack will be gotten but local variables won't\n    be available and it'll not be possible to interact with the frame as it's not actually\n    stopped in a breakpoint).\n    '''\n\n    def __init__(self, seq, thread_id, py_db, set_additional_thread_info, timeout=.5):\n        InternalThreadCommand.__init__(self, thread_id)\n        self._py_db = weakref.ref(py_db)\n        self._timeout = time.time() + timeout\n        self.seq = seq\n        self._cmd = None\n\n        # Note: receives set_additional_thread_info to avoid a circular import\n        # in this module.\n        self._set_additional_thread_info = set_additional_thread_info\n\n    @overrides(InternalThreadCommand.can_be_executed_by)\n    def can_be_executed_by(self, _thread_id):\n        timed_out = time.time() >= self._timeout\n\n        py_db = self._py_db()\n        t = pydevd_find_thread_by_id(self.thread_id)\n        frame = None\n        if t and not getattr(t, 'pydev_do_not_trace', None):\n            additional_info = self._set_additional_thread_info(t)\n            frame = additional_info.get_topmost_frame(t)\n        try:\n            self._cmd = py_db.cmd_factory.make_get_thread_stack_message(\n                self.seq, self.thread_id, frame, must_be_suspended=not timed_out)\n        finally:\n            frame = None\n            t = None\n\n        return self._cmd is not None or timed_out\n\n    @overrides(InternalThreadCommand.do_it)\n    def do_it(self, dbg):\n        if self._cmd is not None:\n            dbg.writer.add_command(self._cmd)\n            self._cmd = None\n\n\n#=======================================================================================================================\n# InternalRunThread\n#=======================================================================================================================\nclass InternalRunThread(InternalThreadCommand):\n\n    def do_it(self, dbg):\n        t = pydevd_find_thread_by_id(self.thread_id)\n        if t:\n            t.additional_info.pydev_step_cmd = -1\n            t.additional_info.pydev_step_stop = None\n            t.additional_info.pydev_state = STATE_RUN\n\n\n#=======================================================================================================================\n# InternalStepThread\n#=======================================================================================================================\nclass InternalStepThread(InternalThreadCommand):\n    def __init__(self, thread_id, cmd_id):\n        self.thread_id = thread_id\n        self.cmd_id = cmd_id\n\n    def do_it(self, dbg):\n        t = pydevd_find_thread_by_id(self.thread_id)\n        if t:\n            t.additional_info.pydev_step_cmd = self.cmd_id\n            t.additional_info.pydev_state = STATE_RUN\n\n\n#=======================================================================================================================\n# InternalSetNextStatementThread\n#=======================================================================================================================\nclass InternalSetNextStatementThread(InternalThreadCommand):\n    def __init__(self, thread_id, cmd_id, line, func_name, seq=0):\n        self.thread_id = thread_id\n        self.cmd_id = cmd_id\n        self.line = line\n        self.seq = seq\n\n        if IS_PY2:\n            if isinstance(func_name, unicode):\n                # On cython with python 2.X it requires an str, not unicode (but on python 3.3 it should be a str, not bytes).\n                func_name = func_name.encode('utf-8')\n\n        self.func_name = func_name\n\n    def do_it(self, dbg):\n        t = pydevd_find_thread_by_id(self.thread_id)\n        if t:\n            t.additional_info.pydev_step_cmd = self.cmd_id\n            t.additional_info.pydev_next_line = int(self.line)\n            t.additional_info.pydev_func_name = self.func_name\n            t.additional_info.pydev_state = STATE_RUN\n            t.additional_info.pydev_message = str(self.seq)\n\n\nclass InternalSmartStepInto(InternalThreadCommand):\n    def __init__(self, thread_id, frame_id, cmd_id, func_name, line, call_order, start_line, end_line, seq=0):\n        self.thread_id = thread_id\n        self.cmd_id = cmd_id\n        self.line = line\n        self.start_line = start_line\n        self.end_line = end_line\n        self.seq = seq\n        self.call_order = call_order\n\n        if IS_PY2:\n            if isinstance(func_name, unicode):\n                # On cython with python 2.X it requires an str, not unicode (but on python 3.3 it should be a str, not bytes).\n                func_name = func_name.encode('utf-8')\n\n        self.func_name = func_name\n\n    def do_it(self, dbg):\n        t = pydevd_find_thread_by_id(self.thread_id)\n        if t:\n            t.additional_info.pydev_step_cmd = self.cmd_id\n            t.additional_info.pydev_next_line = int(self.line)\n            t.additional_info.pydev_func_name = self.func_name\n            t.additional_info.pydev_state = STATE_RUN\n            t.additional_info.pydev_message = str(self.seq)\n            t.additional_info.pydev_smart_step_context.call_order = int(self.call_order)\n            t.additional_info.pydev_smart_step_context.start_line = int(self.start_line)\n            t.additional_info.pydev_smart_step_context.end_line = int(self.end_line)\n\n\n#=======================================================================================================================\n# InternalGetVariable\n#=======================================================================================================================\nclass InternalGetVariable(InternalThreadCommand):\n    \"\"\" gets the value of a variable \"\"\"\n    def __init__(self, seq, thread_id, frame_id, scope, attrs):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.scope = scope\n        self.attributes = attrs\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into python variable \"\"\"\n        try:\n            xml = StringIO.StringIO()\n            xml.write(\"<xml>\")\n            _typeName, val_dict = pydevd_vars.resolve_compound_variable_fields(self.thread_id, self.frame_id, self.scope, self.attributes)\n            if val_dict is None:\n                val_dict = {}\n\n            # assume properly ordered if resolver returns 'OrderedDict'\n            # check type as string to support OrderedDict backport for older Python\n            keys = dict_keys(val_dict)\n            if not (_typeName == \"OrderedDict\" or val_dict.__class__.__name__ == \"OrderedDict\" or IS_PY36_OR_GREATER):\n                keys.sort(key=compare_object_attrs_key)\n\n            for k in keys:\n                val = val_dict[k]\n                evaluate_full_value = pydevd_xml.should_evaluate_full_value(val)\n                xml.write(pydevd_xml.var_to_xml(val, k, evaluate_full_value=evaluate_full_value))\n\n            xml.write(\"</xml>\")\n            cmd = dbg.cmd_factory.make_get_variable_message(self.sequence, xml.getvalue())\n            xml.close()\n            dbg.writer.add_command(cmd)\n        except Exception:\n            cmd = dbg.cmd_factory.make_error_message(\n                self.sequence, \"Error resolving variables %s\" % (get_exception_traceback_str(),))\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalGetArray\n#=======================================================================================================================\nclass InternalGetArray(InternalThreadCommand):\n    def __init__(self, seq, roffset, coffset, rows, cols, format, thread_id, frame_id, scope, attrs):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.scope = scope\n        self.name = attrs.split(\"\\t\")[-1]\n        self.attrs = attrs\n        self.roffset = int(roffset)\n        self.coffset = int(coffset)\n        self.rows = int(rows)\n        self.cols = int(cols)\n        self.format = format\n\n    def do_it(self, dbg):\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            var = pydevd_vars.eval_in_context(self.name, frame.f_globals, frame.f_locals)\n            xml = pydevd_vars.table_like_struct_to_xml(var, self.name, self.roffset, self.coffset, self.rows, self.cols, self.format)\n            cmd = dbg.cmd_factory.make_get_array_message(self.sequence, xml)\n            dbg.writer.add_command(cmd)\n        except:\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error resolving array: \" + get_exception_traceback_str())\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalDataViewerAction\n#=======================================================================================================================\nclass InternalDataViewerAction(InternalThreadCommand):\n    def __init__(self, sequence, thread_id, frame_id, var, action, args):\n        self.sequence = sequence\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.var = var\n        self.action = action\n        self.args = args\n\n    def do_it(self, dbg):\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            tmp_var = pydevd_vars.eval_in_context(self.var, frame.f_globals, frame.f_locals)\n\n            self.act(tmp_var, self.action, self.args)\n\n            cmd = dbg.cmd_factory.make_successful_dataviewer_action_message(\n                self.sequence,\n                \"Successful execution\")\n            dbg.writer.add_command(cmd)\n\n        except Exception as e:\n            cmd = dbg.cmd_factory.make_error_message(\n                self.sequence,\n                type(e).__name__ + \"\\nError exporting frame: \" + get_exception_traceback_str())\n            dbg.writer.add_command(cmd)\n\n    @staticmethod\n    def act(tmp_var, action, args):\n        if action == 'EXPORT':\n            return InternalDataViewerAction.export_action(tmp_var, args)\n\n    @staticmethod\n    def get_type_info(var):\n        tp = type(var)\n        tp_name = tp.__name__\n        tp_qualifier = getattr(tp, \"__module__\", \"\")\n\n        return tp_qualifier, tp_name\n\n    @staticmethod\n    def export_action(var, args):\n        # args: (filepath)\n        filepath = args[0]\n        extension = filepath.rsplit('.', 1)[1].lower()\n\n        tp_qualifier, tp_name = InternalDataViewerAction.get_type_info(var)\n\n        if is_pandas_container(tp_qualifier, tp_name, var):\n            if extension in ('csv', 'tsv'):\n                delim = ',' if extension == 'csv' else '\\t'\n                var.to_csv(filepath, sep=delim)\n            else:\n                raise AttributeError(\"Format '{}' is not supported\".format(extension))\n\n        elif is_numpy_container(tp_qualifier, tp_name, var):\n            try:\n                import numpy as np\n\n            except ImportError:\n                # Strange. We have an instance of numpy array but we failed to import numpy\n                raise\n\n            if extension in ('csv', 'tsv'):\n                delim = ',' if extension == 'csv' else '\\t'\n                np.savetxt(filepath, var, fmt=\"%s\", delimiter=delim)\n            else:\n                raise AttributeError(\"Format '{}' is not supported\".format(extension))\n\n        else:\n            raise AttributeError(\"Type {} is not supported\".format(type(var)))\n\n\n#=======================================================================================================================\n# InternalDataViewerAction\n#=======================================================================================================================\nclass InternalTableCommand(InternalThreadCommand):\n    def __init__(self, sequence, thread_id, frame_id, init_command, command_type):\n        super().__init__(thread_id)\n        self.sequence = sequence\n        self.frame_id = frame_id\n        self.init_command = init_command\n        self.command_type = command_type\n\n    def do_it(self, dbg):\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            success, res = self.exec_command(frame)\n\n            if success:\n                cmd = NetCommand(CMD_TABLE_EXEC, self.sequence, res)\n                dbg.writer.add_command(cmd)\n            else:\n                cmd = dbg.cmd_factory.make_error_message(self.sequence, str(res))\n                dbg.writer.add_command(cmd)\n        except Exception as e:\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, get_exception_traceback_str())\n            dbg.writer.add_command(cmd)\n\n    def exec_command(self, frame):\n        return exec_table_command(self.init_command, self.command_type, frame.f_globals,\n                                  frame.f_locals)\n\n\n#=======================================================================================================================\n# InternalChangeVariable\n#=======================================================================================================================\nclass InternalChangeVariable(InternalThreadCommand):\n    \"\"\" changes the value of a variable \"\"\"\n    def __init__(self, seq, thread_id, frame_id, scope, attr, expression):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.scope = scope\n        self.attr = attr\n        self.expression = expression\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into python variable \"\"\"\n        try:\n            result = pydevd_vars.change_attr_expression(self.thread_id, self.frame_id, self.attr, self.expression, dbg)\n            xml = \"<xml>\"\n            xml += pydevd_xml.var_to_xml(result, \"\")\n            xml += \"</xml>\"\n            cmd = dbg.cmd_factory.make_variable_changed_message(self.sequence, xml)\n            dbg.writer.add_command(cmd)\n        except Exception:\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error changing variable attr:%s expression:%s traceback:%s\" % (self.attr, self.expression, get_exception_traceback_str()))\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalGetFrame\n#=======================================================================================================================\nclass InternalGetFrame(InternalThreadCommand):\n    \"\"\" gets the value of a variable \"\"\"\n    def __init__(self, seq, thread_id, frame_id):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into python variable \"\"\"\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            if frame is not None:\n                hidden_ns = pydevd_console_integration.get_ipython_hidden_vars()\n                xml = \"<xml>\"\n                xml += pydevd_xml.frame_vars_to_xml(frame.f_locals, hidden_ns)\n                del frame\n                xml += \"</xml>\"\n                cmd = dbg.cmd_factory.make_get_frame_message(self.sequence, xml)\n                dbg.writer.add_command(cmd)\n            else:\n                #pydevd_vars.dump_frames(self.thread_id)\n                #don't print this error: frame not found: means that the client is not synchronized (but that's ok)\n                cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Frame not found: %s from thread: %s\" % (self.frame_id, self.thread_id))\n                dbg.writer.add_command(cmd)\n        except:\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error resolving frame: %s from thread: %s\" % (self.frame_id, self.thread_id))\n            dbg.writer.add_command(cmd)\n\n\nclass InternalGetSmartStepIntoVariants(InternalThreadCommand):\n    def __init__(self, seq, thread_id, frame_id, start_line, end_line):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.start_line = int(start_line)\n        self.end_line = int(end_line)\n\n    def do_it(self, dbg):\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            variants = pydevd_bytecode_utils.calculate_smart_step_into_variants(frame, self.start_line, self.end_line)\n            xml = \"<xml>\"\n\n            for name, is_visited in variants:\n                xml += '<variant name=\"%s\" isVisited=\"%s\"></variant>' % (quote(name), str(is_visited).lower())\n\n            xml += \"</xml>\"\n            cmd = NetCommand(CMD_GET_SMART_STEP_INTO_VARIANTS, self.sequence, xml)\n            dbg.writer.add_command(cmd)\n        except:\n            pydevd_log(1, traceback.format_exc())\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error getting smart step into veriants for frame: %s from thread: %s\"\n                                                     % (self.frame_id, self.thread_id))\n            self._reset_smart_step_context()\n            dbg.writer.add_command(cmd)\n\n    def _reset_smart_step_context(self):\n        t = pydevd_find_thread_by_id(self.thread_id)\n        if t:\n            try:\n                t.additional_info.pydev_smart_step_context.reset()\n            except:\n                pydevd_log(1, \"Error while resetting smart step into context for thread %s\" % self.thread_id)\n\n\n#=======================================================================================================================\n# InternalGetNextStatementTargets\n#=======================================================================================================================\nclass InternalGetNextStatementTargets(InternalThreadCommand):\n    \"\"\" gets the valid line numbers for use with set next statement \"\"\"\n    def __init__(self, seq, thread_id, frame_id):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into set of line numbers \"\"\"\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            if frame is not None:\n                code = frame.f_code\n                xml = \"<xml>\"\n                if hasattr(code, 'co_lnotab'):\n                    lineno = code.co_firstlineno\n                    lnotab = code.co_lnotab\n                    for i in itertools.islice(lnotab, 1, len(lnotab), 2):\n                        if isinstance(i, int):\n                            lineno = lineno + i\n                        else:\n                            # in python 2 elements in co_lnotab are of type str\n                            lineno = lineno + ord(i)\n                        xml += \"<line>%d</line>\" % (lineno,)\n                else:\n                    xml += \"<line>%d</line>\" % (frame.f_lineno,)\n                del frame\n                xml += \"</xml>\"\n                cmd = dbg.cmd_factory.make_get_next_statement_targets_message(self.sequence, xml)\n                dbg.writer.add_command(cmd)\n            else:\n                cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Frame not found: %s from thread: %s\" % (self.frame_id, self.thread_id))\n                dbg.writer.add_command(cmd)\n        except:\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error resolving frame: %s from thread: %s\" % (self.frame_id, self.thread_id))\n            dbg.writer.add_command(cmd)\n\n#=======================================================================================================================\n# InternalEvaluateExpression\n#=======================================================================================================================\nclass InternalEvaluateExpression(InternalThreadCommand):\n    \"\"\" gets the value of a variable \"\"\"\n\n    def __init__(self, seq, thread_id, frame_id, expression, doExec, doTrim, temp_name):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.expression = expression\n        self.doExec = doExec\n        self.doTrim = doTrim\n        self.temp_name = temp_name\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into python variable \"\"\"\n        try:\n            result = pydevd_vars.evaluate_expression(self.thread_id, self.frame_id, self.expression, self.doExec)\n            if self.temp_name != \"\":\n                pydevd_vars.change_attr_expression(self.thread_id, self.frame_id, self.temp_name, self.expression, dbg, result)\n            xml = \"<xml>\"\n            xml += pydevd_xml.var_to_xml(result, self.expression, self.doTrim)\n            xml += \"</xml>\"\n            cmd = dbg.cmd_factory.make_evaluate_expression_message(self.sequence, xml)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error evaluating expression \" + exc)\n            dbg.writer.add_command(cmd)\n\n#=======================================================================================================================\n# InternalGetCompletions\n#=======================================================================================================================\nclass InternalGetCompletions(InternalThreadCommand):\n    \"\"\" Gets the completions in a given scope \"\"\"\n\n    def __init__(self, seq, thread_id, frame_id, act_tok):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.act_tok = act_tok\n\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into completions \"\"\"\n        try:\n            remove_path = None\n            try:\n\n                frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n                if frame is not None:\n\n                    msg = _pydev_completer.generate_completions_as_xml(frame, self.act_tok)\n\n                    cmd = dbg.cmd_factory.make_get_completions_message(self.sequence, msg)\n                    dbg.writer.add_command(cmd)\n                else:\n                    cmd = dbg.cmd_factory.make_error_message(self.sequence, \"InternalGetCompletions: Frame not found: %s from thread: %s\" % (self.frame_id, self.thread_id))\n                    dbg.writer.add_command(cmd)\n\n\n            finally:\n                if remove_path is not None:\n                    sys.path.remove(remove_path)\n\n        except:\n            exc = get_exception_traceback_str()\n            sys.stderr.write('%s\\n' % (exc,))\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error evaluating expression \" + exc)\n            dbg.writer.add_command(cmd)\n\n\n# =======================================================================================================================\n# InternalGetDescription\n# =======================================================================================================================\nclass InternalGetDescription(InternalThreadCommand):\n    \"\"\" Fetch the variable description stub from the debug console\n    \"\"\"\n\n    def __init__(self, seq, thread_id, frame_id, expression):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.expression = expression\n\n    def do_it(self, dbg):\n        \"\"\" Get completions and write back to the client\n        \"\"\"\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            description = pydevd_console.get_description(frame, self.thread_id, self.frame_id, self.expression)\n            description = pydevd_xml.make_valid_xml_value(quote(description, '/>_= \\t'))\n            description_xml = '<xml><var name=\"\" type=\"\" value=\"%s\"/></xml>' % description\n            cmd = dbg.cmd_factory.make_get_description_message(self.sequence, description_xml)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error in fetching description\" + exc)\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalGetBreakpointException\n#=======================================================================================================================\nclass InternalGetBreakpointException(InternalThreadCommand):\n    \"\"\" Send details of exception raised while evaluating conditional breakpoint \"\"\"\n    def __init__(self, thread_id, exc_type, stacktrace):\n        self.sequence = 0\n        self.thread_id = thread_id\n        self.stacktrace = stacktrace\n        self.exc_type = exc_type\n\n    def do_it(self, dbg):\n        try:\n            callstack = \"<xml>\"\n\n            makeValid = pydevd_xml.make_valid_xml_value\n\n            for filename, line, methodname, methodobj in self.stacktrace:\n                if file_system_encoding.lower() != \"utf-8\" and hasattr(filename, \"decode\"):\n                    # filename is a byte string encoded using the file system encoding\n                    # convert it to utf8\n                    filename = filename.decode(file_system_encoding).encode(\"utf-8\")\n\n                callstack += '<frame thread_id = \"%s\" file=\"%s\" line=\"%s\" name=\"%s\" obj=\"%s\" />' \\\n                             % (self.thread_id, makeValid(filename), line, makeValid(methodname), makeValid(methodobj))\n            callstack += \"</xml>\"\n\n            cmd = dbg.cmd_factory.make_send_breakpoint_exception_message(self.sequence, self.exc_type + \"\\t\" + callstack)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            sys.stderr.write('%s\\n' % (exc,))\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error Sending Exception: \" + exc)\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalSendCurrExceptionTrace\n#=======================================================================================================================\nclass InternalSendCurrExceptionTrace(InternalThreadCommand):\n    \"\"\" Send details of the exception that was caught and where we've broken in.\n    \"\"\"\n    def __init__(self, thread_id, arg, curr_frame_id):\n        '''\n        :param arg: exception type, description, traceback object\n        '''\n        self.sequence = 0\n        self.thread_id = thread_id\n        self.curr_frame_id = curr_frame_id\n        self.arg = arg\n\n    def do_it(self, dbg):\n        try:\n            cmd = dbg.cmd_factory.make_send_curr_exception_trace_message(self.sequence, self.thread_id, self.curr_frame_id, *self.arg)\n            del self.arg\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            sys.stderr.write('%s\\n' % (exc,))\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error Sending Current Exception Trace: \" + exc)\n            dbg.writer.add_command(cmd)\n\n#=======================================================================================================================\n# InternalSendCurrExceptionTraceProceeded\n#=======================================================================================================================\nclass InternalSendCurrExceptionTraceProceeded(InternalThreadCommand):\n    \"\"\" Send details of the exception that was caught and where we've broken in.\n    \"\"\"\n    def __init__(self, thread_id):\n        self.sequence = 0\n        self.thread_id = thread_id\n\n    def do_it(self, dbg):\n        try:\n            cmd = dbg.cmd_factory.make_send_curr_exception_trace_proceeded_message(self.sequence, self.thread_id)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            sys.stderr.write('%s\\n' % (exc,))\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error Sending Current Exception Trace Proceeded: \" + exc)\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalEvaluateConsoleExpression\n#=======================================================================================================================\nclass InternalEvaluateConsoleExpression(InternalThreadCommand):\n    \"\"\" Execute the given command in the debug console \"\"\"\n\n    def __init__(self, seq, thread_id, frame_id, line, buffer_output=True):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.line = line\n        self.buffer_output = buffer_output\n\n    def do_it(self, dbg):\n        \"\"\" Create an XML for console output, error and more (true/false)\n        <xml>\n            <output message=output_message></output>\n            <error message=error_message></error>\n            <more>true/false</more>\n        </xml>\n        \"\"\"\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            if frame is not None:\n                console_message = pydevd_console.execute_console_command(\n                    frame, self.thread_id, self.frame_id, self.line, self.buffer_output)\n\n                cmd = dbg.cmd_factory.make_send_console_message(self.sequence, console_message.to_xml())\n            else:\n                from _pydevd_bundle.pydevd_console import ConsoleMessage\n                console_message = ConsoleMessage()\n                console_message.add_console_message(\n                    pydevd_console.CONSOLE_ERROR,\n                    \"Select the valid frame in the debug view (thread: %s, frame: %s invalid)\" % (self.thread_id, self.frame_id),\n                    )\n                cmd = dbg.cmd_factory.make_error_message(self.sequence, console_message.to_xml())\n        except:\n            exc = get_exception_traceback_str()\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error evaluating expression \" + exc)\n        dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalRunCustomOperation\n#=======================================================================================================================\nclass InternalRunCustomOperation(InternalThreadCommand):\n    \"\"\" Run a custom command on an expression\n    \"\"\"\n    def __init__(self, seq, thread_id, frame_id, scope, attrs, style, encoded_code_or_file, fnname):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.scope = scope\n        self.attrs = attrs\n        self.style = style\n        self.code_or_file = unquote_plus(encoded_code_or_file)\n        self.fnname = fnname\n\n    def do_it(self, dbg):\n        try:\n            res = pydevd_vars.custom_operation(self.thread_id, self.frame_id, self.scope, self.attrs,\n                                               self.style, self.code_or_file, self.fnname)\n            resEncoded = quote_plus(res)\n            cmd = dbg.cmd_factory.make_custom_operation_message(self.sequence, resEncoded)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error in running custom operation\" + exc)\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalConsoleGetCompletions\n#=======================================================================================================================\nclass InternalConsoleGetCompletions(InternalThreadCommand):\n    \"\"\" Fetch the completions in the debug console\n    \"\"\"\n    def __init__(self, seq, thread_id, frame_id, act_tok):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.act_tok = act_tok\n\n    def do_it(self, dbg):\n        \"\"\" Get completions and write back to the client\n        \"\"\"\n        try:\n            frame = pydevd_vars.find_frame(self.thread_id, self.frame_id)\n            completions_xml = pydevd_console.get_completions(frame, self.act_tok)\n            cmd = dbg.cmd_factory.make_send_console_message(self.sequence, completions_xml)\n            dbg.writer.add_command(cmd)\n        except:\n            exc = get_exception_traceback_str()\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error in fetching completions\" + exc)\n            dbg.writer.add_command(cmd)\n\n\n#=======================================================================================================================\n# InternalConsoleExec\n#=======================================================================================================================\nclass InternalConsoleExec(InternalThreadCommand):\n    \"\"\" gets the value of a variable \"\"\"\n\n    def __init__(self, seq, thread_id, frame_id, expression):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.expression = expression\n\n    def do_it(self, dbg):\n        \"\"\" Converts request into python variable \"\"\"\n        try:\n            try:\n                #don't trace new threads created by console command\n                disable_trace_thread_modules()\n\n                result, exception_occurred = pydevd_console_integration.console_exec(self.thread_id, self.frame_id, self.expression, dbg)\n                xml = \"<xml>\"\n                xml += pydevd_xml.var_to_xml(result, \"\")\n                xml += pydevd_xml.var_to_xml(exception_occurred, \"exception_occurred\")\n                xml += \"</xml>\"\n                cmd = dbg.cmd_factory.make_evaluate_expression_message(self.sequence, xml)\n                dbg.writer.add_command(cmd)\n            except:\n                exc = get_exception_traceback_str()\n                sys.stderr.write('%s\\n' % (exc,))\n                cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error evaluating console expression \" + exc)\n                dbg.writer.add_command(cmd)\n        finally:\n            enable_trace_thread_modules()\n\n            sys.stderr.flush()\n            sys.stdout.flush()\n\n\n#=======================================================================================================================\n# InternalLoadFullValue\n#=======================================================================================================================\nclass InternalLoadFullValue(InternalThreadCommand):\n    \"\"\"\n    Loads values asynchronously\n    \"\"\"\n    def __init__(self, seq, thread_id, frame_id, vars):\n        self.sequence = seq\n        self.thread_id = thread_id\n        self.frame_id = frame_id\n        self.vars = vars\n\n    def do_it(self, dbg):\n        \"\"\"Starts a thread that will load values asynchronously\"\"\"\n        try:\n            var_objects = []\n            for variable in self.vars:\n                variable = variable.strip()\n                if len(variable) > 0:\n                    if '\\t' in variable:  # there are attributes beyond scope\n                        scope, attrs = variable.split('\\t', 1)\n                        name = attrs[0]\n                    else:\n                        scope, attrs = (variable, None)\n                        name = scope\n                    var_obj = pydevd_vars.getVariable(self.thread_id, self.frame_id, scope, attrs)\n                    var_objects.append((var_obj, name))\n\n            t = GetValueAsyncThreadDebug(dbg, self.sequence, var_objects)\n            t.start()\n        except:\n            exc = get_exception_traceback_str()\n            sys.stderr.write('%s\\n' % (exc,))\n            cmd = dbg.cmd_factory.make_error_message(self.sequence, \"Error evaluating variable %s \" % exc)\n            dbg.writer.add_command(cmd)\n\n\nclass AbstractGetValueAsyncThread(PyDBDaemonThread):\n    \"\"\"\n    Abstract class for a thread, which evaluates values for async variables\n    \"\"\"\n    def __init__(self, frame_accessor, seq, var_objects):\n        PyDBDaemonThread.__init__(self)\n        self.frame_accessor = frame_accessor\n        self.seq = seq\n        self.var_objs = var_objects\n        self.cancel_event = threading.Event()\n\n    def send_result(self, xml):\n        raise NotImplementedError()\n\n    @overrides(PyDBDaemonThread._on_run)\n    def _on_run(self):\n        start = time.time()\n        xml = StringIO.StringIO()\n        xml.write(\"<xml>\")\n        for (var_obj, name) in self.var_objs:\n            current_time = time.time()\n            if current_time - start > ASYNC_EVAL_TIMEOUT_SEC or self.cancel_event.is_set():\n                break\n            xml.write(pydevd_xml.var_to_xml(var_obj, name, evaluate_full_value=True))\n        xml.write(\"</xml>\")\n        self.send_result(xml)\n        xml.close()\n\n\nclass GetValueAsyncThreadDebug(AbstractGetValueAsyncThread):\n    \"\"\"\n    A thread for evaluation async values, which returns result for debugger\n    Create message and send it via writer thread\n    \"\"\"\n    def send_result(self, xml):\n        if self.frame_accessor is not None:\n            cmd = self.frame_accessor.cmd_factory.make_load_full_value_message(self.seq, xml.getvalue())\n            self.frame_accessor.writer.add_command(cmd)\n\n\nclass GetValueAsyncThreadConsole(AbstractGetValueAsyncThread):\n    \"\"\"\n    A thread for evaluation async values, which returns result for Console\n    Send result directly to Console's server\n    \"\"\"\n    def send_result(self, xml):\n        if self.frame_accessor is not None:\n            self.frame_accessor.ReturnFullValue(self.seq, xml.getvalue())\n\n\n#=======================================================================================================================\n# pydevd_find_thread_by_id\n#=======================================================================================================================\ndef pydevd_find_thread_by_id(thread_id):\n    try:\n        # there was a deadlock here when I did not remove the tracing function when thread was dead\n        threads = threading.enumerate()\n        for i in threads:\n            tid = get_thread_id(i)\n            if thread_id == tid or thread_id.endswith('|' + tid):\n                return i\n\n        # This can happen when a request comes for a thread which was previously removed.\n        pydevd_log(1, \"Could not find thread %s\\n\" % thread_id)\n        pydevd_log(1, \"Available: %s\\n\" % [get_thread_id(t) for t in threads])\n    except:\n        traceback.print_exc()\n\n    return None\n", 1962], "/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py": ["\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\n\nimport os as _os\nimport sys as _sys\nimport _thread\n\nfrom time import monotonic as _time\nfrom _weakrefset import WeakSet\nfrom itertools import islice as _islice, count as _count\ntry:\n    from _collections import deque as _deque\nexcept ImportError:\n    from collections import deque as _deque\n\n# Note regarding PEP 8 compliant names\n#  This threading model was originally inspired by Java, and inherited\n# the convention of camelCase function and method names from that\n# language. Those original names are not in any imminent danger of\n# being deprecated (even for Py3k),so this module provides them as an\n# alias for the PEP 8 compliant names\n# Note that using the new PEP 8 compliant names facilitates substitution\n# with the multiprocessing module, which doesn't provide the old\n# Java inspired names.\n\n__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',\n           'enumerate', 'main_thread', 'TIMEOUT_MAX',\n           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',\n           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',\n           'setprofile', 'settrace', 'local', 'stack_size',\n           'excepthook', 'ExceptHookArgs']\n\n# Rename some stuff so \"from threading import *\" is safe\n_start_new_thread = _thread.start_new_thread\n_allocate_lock = _thread.allocate_lock\n_set_sentinel = _thread._set_sentinel\nget_ident = _thread.get_ident\ntry:\n    get_native_id = _thread.get_native_id\n    _HAVE_THREAD_NATIVE_ID = True\n    __all__.append('get_native_id')\nexcept AttributeError:\n    _HAVE_THREAD_NATIVE_ID = False\nThreadError = _thread.error\ntry:\n    _CRLock = _thread.RLock\nexcept AttributeError:\n    _CRLock = None\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\ndel _thread\n\n\n# Support for profile and trace hooks\n\n_profile_hook = None\n_trace_hook = None\n\ndef setprofile(func):\n    \"\"\"Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n\n    \"\"\"\n    global _profile_hook\n    _profile_hook = func\n\ndef settrace(func):\n    \"\"\"Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n\n    \"\"\"\n    global _trace_hook\n    _trace_hook = func\n\n# Synchronization classes\n\nLock = _allocate_lock\n\ndef RLock(*args, **kwargs):\n    \"\"\"Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    \"\"\"\n    if _CRLock is None:\n        return _PyRLock(*args, **kwargs)\n    return _CRLock(*args, **kwargs)\n\nclass _RLock:\n    \"\"\"This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    \"\"\"\n\n    def __init__(self):\n        self._block = _allocate_lock()\n        self._owner = None\n        self._count = 0\n\n    def __repr__(self):\n        owner = self._owner\n        try:\n            owner = _active[owner].name\n        except KeyError:\n            pass\n        return \"<%s %s.%s object owner=%r count=%d at %s>\" % (\n            \"locked\" if self._block.locked() else \"unlocked\",\n            self.__class__.__module__,\n            self.__class__.__qualname__,\n            owner,\n            self._count,\n            hex(id(self))\n        )\n\n    def acquire(self, blocking=True, timeout=-1):\n        \"\"\"Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        \"\"\"\n        me = get_ident()\n        if self._owner == me:\n            self._count += 1\n            return 1\n        rc = self._block.acquire(blocking, timeout)\n        if rc:\n            self._owner = me\n            self._count = 1\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        \"\"\"\n        if self._owner != get_ident():\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self._count = count = self._count - 1\n        if not count:\n            self._owner = None\n            self._block.release()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n    # Internal methods used by condition variables\n\n    def _acquire_restore(self, state):\n        self._block.acquire()\n        self._count, self._owner = state\n\n    def _release_save(self):\n        if self._count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        count = self._count\n        self._count = 0\n        owner = self._owner\n        self._owner = None\n        self._block.release()\n        return (count, owner)\n\n    def _is_owned(self):\n        return self._owner == get_ident()\n\n_PyRLock = _RLock\n\n\nclass Condition:\n    \"\"\"Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    \"\"\"\n\n    def __init__(self, lock=None):\n        if lock is None:\n            lock = RLock()\n        self._lock = lock\n        # Export the lock's acquire() and release() methods\n        self.acquire = lock.acquire\n        self.release = lock.release\n        # If the lock defines _release_save() and/or _acquire_restore(),\n        # these override the default implementations (which just call\n        # release() and acquire() on the lock).  Ditto for _is_owned().\n        try:\n            self._release_save = lock._release_save\n        except AttributeError:\n            pass\n        try:\n            self._acquire_restore = lock._acquire_restore\n        except AttributeError:\n            pass\n        try:\n            self._is_owned = lock._is_owned\n        except AttributeError:\n            pass\n        self._waiters = _deque()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def __repr__(self):\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\n\n    def _release_save(self):\n        self._lock.release()           # No state to save\n\n    def _acquire_restore(self, x):\n        self._lock.acquire()           # Ignore saved state\n\n    def _is_owned(self):\n        # Return True if lock is owned by current_thread.\n        # This method is called only if _lock doesn't have _is_owned().\n        if self._lock.acquire(0):\n            self._lock.release()\n            return False\n        else:\n            return True\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n                waiter.acquire()\n                gotit = True\n            else:\n                if timeout > 0:\n                    gotit = waiter.acquire(True, timeout)\n                else:\n                    gotit = waiter.acquire(False)\n            return gotit\n        finally:\n            self._acquire_restore(saved_state)\n            if not gotit:\n                try:\n                    self._waiters.remove(waiter)\n                except ValueError:\n                    pass\n\n    def wait_for(self, predicate, timeout=None):\n        \"\"\"Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        \"\"\"\n        endtime = None\n        waittime = timeout\n        result = predicate()\n        while not result:\n            if waittime is not None:\n                if endtime is None:\n                    endtime = _time() + waittime\n                else:\n                    waittime = endtime - _time()\n                    if waittime <= 0:\n                        break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n    def notify(self, n=1):\n        \"\"\"Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\n        all_waiters = self._waiters\n        waiters_to_notify = _deque(_islice(all_waiters, n))\n        if not waiters_to_notify:\n            return\n        for waiter in waiters_to_notify:\n            waiter.release()\n            try:\n                all_waiters.remove(waiter)\n            except ValueError:\n                pass\n\n    def notify_all(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        \"\"\"\n        self.notify(len(self._waiters))\n\n    notifyAll = notify_all\n\n\nclass Semaphore:\n    \"\"\"This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    # After Tim Peters' semaphore class, but not quite the same (no maximum)\n\n    def __init__(self, value=1):\n        if value < 0:\n            raise ValueError(\"semaphore initial value must be >= 0\")\n        self._cond = Condition(Lock())\n        self._value = value\n\n    def acquire(self, blocking=True, timeout=None):\n        \"\"\"Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        \"\"\"\n        if not blocking and timeout is not None:\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\n        rc = False\n        endtime = None\n        with self._cond:\n            while self._value == 0:\n                if not blocking:\n                    break\n                if timeout is not None:\n                    if endtime is None:\n                        endtime = _time() + timeout\n                    else:\n                        timeout = endtime - _time()\n                        if timeout <= 0:\n                            break\n                self._cond.wait(timeout)\n            else:\n                self._value -= 1\n                rc = True\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        \"\"\"\n        with self._cond:\n            self._value += 1\n            self._cond.notify()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n\nclass BoundedSemaphore(Semaphore):\n    \"\"\"Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    def __init__(self, value=1):\n        Semaphore.__init__(self, value)\n        self._initial_value = value\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        \"\"\"\n        with self._cond:\n            if self._value >= self._initial_value:\n                raise ValueError(\"Semaphore released too many times\")\n            self._value += 1\n            self._cond.notify()\n\n\nclass Event:\n    \"\"\"Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    \"\"\"\n\n    # After Tim Peters' event class (without is_posted())\n\n    def __init__(self):\n        self._cond = Condition(Lock())\n        self._flag = False\n\n    def _reset_internal_locks(self):\n        # private!  called by Thread._reset_internal_locks by _after_fork()\n        self._cond.__init__(Lock())\n\n    def is_set(self):\n        \"\"\"Return true if and only if the internal flag is true.\"\"\"\n        return self._flag\n\n    isSet = is_set\n\n    def set(self):\n        \"\"\"Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        \"\"\"\n        with self._cond:\n            self._flag = True\n            self._cond.notify_all()\n\n    def clear(self):\n        \"\"\"Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        \"\"\"\n        with self._cond:\n            self._flag = False\n\n    def wait(self, timeout=None):\n        \"\"\"Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        \"\"\"\n        with self._cond:\n            signaled = self._flag\n            if not signaled:\n                signaled = self._cond.wait(timeout)\n            return signaled\n\n\n# A barrier class.  Inspired in part by the pthread_barrier_* api and\n# the CyclicBarrier class from Java.  See\n# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and\n# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/\n#        CyclicBarrier.html\n# for information.\n# We maintain two main states, 'filling' and 'draining' enabling the barrier\n# to be cyclic.  Threads are not allowed into it until it has fully drained\n# since the previous cycle.  In addition, a 'resetting' state exists which is\n# similar to 'draining' except that threads leave with a BrokenBarrierError,\n# and a 'broken' state in which all threads get the exception.\nclass Barrier:\n    \"\"\"Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    \"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        \"\"\"Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is used as the\n        default for all subsequent 'wait()' calls.\n\n        \"\"\"\n        self._cond = Condition(Lock())\n        self._action = action\n        self._timeout = timeout\n        self._parties = parties\n        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken\n        self._count = 0\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        \"\"\"\n        if timeout is None:\n            timeout = self._timeout\n        with self._cond:\n            self._enter() # Block while the barrier drains.\n            index = self._count\n            self._count += 1\n            try:\n                if index + 1 == self._parties:\n                    # We release the barrier\n                    self._release()\n                else:\n                    # We wait until someone releases us\n                    self._wait(timeout)\n                return index\n            finally:\n                self._count -= 1\n                # Wake up any threads waiting for barrier to drain.\n                self._exit()\n\n    # Block until the barrier is ready for us, or raise an exception\n    # if it is broken.\n    def _enter(self):\n        while self._state in (-1, 1):\n            # It is draining or resetting, wait until done\n            self._cond.wait()\n        #see if the barrier is in a broken state\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 0\n\n    # Optionally run the 'action' and release the threads waiting\n    # in the barrier.\n    def _release(self):\n        try:\n            if self._action:\n                self._action()\n            # enter draining state\n            self._state = 1\n            self._cond.notify_all()\n        except:\n            #an exception during the _action handler.  Break and reraise\n            self._break()\n            raise\n\n    # Wait in the barrier until we are released.  Raise an exception\n    # if the barrier is reset or broken.\n    def _wait(self, timeout):\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\n            #timed out.  Break the barrier\n            self._break()\n            raise BrokenBarrierError\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 1\n\n    # If we are the last thread to exit the barrier, signal any threads\n    # waiting for the barrier to drain.\n    def _exit(self):\n        if self._count == 0:\n            if self._state in (-1, 1):\n                #resetting or draining\n                self._state = 0\n                self._cond.notify_all()\n\n    def reset(self):\n        \"\"\"Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        \"\"\"\n        with self._cond:\n            if self._count > 0:\n                if self._state == 0:\n                    #reset the barrier, waking up threads\n                    self._state = -1\n                elif self._state == -2:\n                    #was broken, set it to reset state\n                    #which clears when the last thread exits\n                    self._state = -1\n            else:\n                self._state = 0\n            self._cond.notify_all()\n\n    def abort(self):\n        \"\"\"Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        \"\"\"\n        with self._cond:\n            self._break()\n\n    def _break(self):\n        # An internal error was detected.  The barrier is set to\n        # a broken state all parties awakened.\n        self._state = -2\n        self._cond.notify_all()\n\n    @property\n    def parties(self):\n        \"\"\"Return the number of threads required to trip the barrier.\"\"\"\n        return self._parties\n\n    @property\n    def n_waiting(self):\n        \"\"\"Return the number of threads currently waiting at the barrier.\"\"\"\n        # We don't need synchronization here since this is an ephemeral result\n        # anyway.  It returns the correct value in the steady state.\n        if self._state == 0:\n            return self._count\n        return 0\n\n    @property\n    def broken(self):\n        \"\"\"Return True if the barrier is in a broken state.\"\"\"\n        return self._state == -2\n\n# exception raised by the Barrier class\nclass BrokenBarrierError(RuntimeError):\n    pass\n\n\n# Helper to generate new thread names\n_counter = _count().__next__\n_counter() # Consume 0 so first non-main thread has id 1.\ndef _newname(template=\"Thread-%d\"):\n    return template % _counter()\n\n# Active thread administration\n_active_limbo_lock = _allocate_lock()\n_active = {}    # maps thread id to Thread object\n_limbo = {}\n_dangling = WeakSet()\n# Set of Thread._tstate_lock locks of non-daemon threads used by _shutdown()\n# to wait until all Python thread states get deleted:\n# see Thread._set_tstate_lock().\n_shutdown_locks_lock = _allocate_lock()\n_shutdown_locks = set()\n\n# Main class for threads\n\nclass Thread:\n    \"\"\"A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    \"\"\"\n\n    _initialized = False\n\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs=None, *, daemon=None):\n        \"\"\"This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form \"Thread-N\" where N is a small decimal number.\n\n        *args* is the argument tuple for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        \"\"\"\n        assert group is None, \"group argument must be None for now\"\n        if kwargs is None:\n            kwargs = {}\n        self._target = target\n        self._name = str(name or _newname())\n        self._args = args\n        self._kwargs = kwargs\n        if daemon is not None:\n            self._daemonic = daemon\n        else:\n            self._daemonic = current_thread().daemon\n        self._ident = None\n        if _HAVE_THREAD_NATIVE_ID:\n            self._native_id = None\n        self._tstate_lock = None\n        self._started = Event()\n        self._is_stopped = False\n        self._initialized = True\n        # Copy of sys.stderr used by self._invoke_excepthook()\n        self._stderr = _sys.stderr\n        self._invoke_excepthook = _make_invoke_excepthook()\n        # For debugging and _after_fork()\n        _dangling.add(self)\n\n    def _reset_internal_locks(self, is_alive):\n        # private!  Called by _after_fork() to reset our internal locks as\n        # they may be in an invalid state leading to a deadlock or crash.\n        self._started._reset_internal_locks()\n        if is_alive:\n            self._set_tstate_lock()\n        else:\n            # The thread isn't alive after fork: it doesn't have a tstate\n            # anymore.\n            self._is_stopped = True\n            self._tstate_lock = None\n\n    def __repr__(self):\n        assert self._initialized, \"Thread.__init__() was not called\"\n        status = \"initial\"\n        if self._started.is_set():\n            status = \"started\"\n        self.is_alive() # easy way to get ._is_stopped set when appropriate\n        if self._is_stopped:\n            status = \"stopped\"\n        if self._daemonic:\n            status += \" daemon\"\n        if self._ident is not None:\n            status += \" %s\" % self._ident\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\n\n    def start(self):\n        \"\"\"Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"thread.__init__() not called\")\n\n        if self._started.is_set():\n            raise RuntimeError(\"threads can only be started once\")\n        with _active_limbo_lock:\n            _limbo[self] = self\n        try:\n            _start_new_thread(self._bootstrap, ())\n        except Exception:\n            with _active_limbo_lock:\n                del _limbo[self]\n            raise\n        self._started.wait()\n\n    def run(self):\n        \"\"\"Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        \"\"\"\n        try:\n            if self._target:\n                self._target(*self._args, **self._kwargs)\n        finally:\n            # Avoid a refcycle if the thread is running a function with\n            # an argument that has a member that points to the thread.\n            del self._target, self._args, self._kwargs\n\n    def _bootstrap(self):\n        # Wrapper around the real bootstrap code that ignores\n        # exceptions during interpreter cleanup.  Those typically\n        # happen when a daemon thread wakes up at an unfortunate\n        # moment, finds the world around it destroyed, and raises some\n        # random exception *** while trying to report the exception in\n        # _bootstrap_inner() below ***.  Those random exceptions\n        # don't help anybody, and they confuse users, so we suppress\n        # them.  We suppress them only when it appears that the world\n        # indeed has already been destroyed, so that exceptions in\n        # _bootstrap_inner() during normal business hours are properly\n        # reported.  Also, we only suppress them for daemonic threads;\n        # if a non-daemonic encounters this, something else is wrong.\n        try:\n            self._bootstrap_inner()\n        except:\n            if self._daemonic and _sys is None:\n                return\n            raise\n\n    def _set_ident(self):\n        self._ident = get_ident()\n\n    if _HAVE_THREAD_NATIVE_ID:\n        def _set_native_id(self):\n            self._native_id = get_native_id()\n\n    def _set_tstate_lock(self):\n        \"\"\"\n        Set a lock object which will be released by the interpreter when\n        the underlying thread state (see pystate.h) gets deleted.\n        \"\"\"\n        self._tstate_lock = _set_sentinel()\n        self._tstate_lock.acquire()\n\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.add(self._tstate_lock)\n\n    def _bootstrap_inner(self):\n        try:\n            self._set_ident()\n            self._set_tstate_lock()\n            if _HAVE_THREAD_NATIVE_ID:\n                self._set_native_id()\n            self._started.set()\n            with _active_limbo_lock:\n                _active[self._ident] = self\n                del _limbo[self]\n\n            if _trace_hook:\n                _sys.settrace(_trace_hook)\n            if _profile_hook:\n                _sys.setprofile(_profile_hook)\n\n            try:\n                self.run()\n            except:\n                self._invoke_excepthook(self)\n        finally:\n            with _active_limbo_lock:\n                try:\n                    # We don't call self._delete() because it also\n                    # grabs _active_limbo_lock.\n                    del _active[get_ident()]\n                except:\n                    pass\n\n    def _stop(self):\n        # After calling ._stop(), .is_alive() returns False and .join() returns\n        # immediately.  ._tstate_lock must be released before calling ._stop().\n        #\n        # Normal case:  C code at the end of the thread's life\n        # (release_sentinel in _threadmodule.c) releases ._tstate_lock, and\n        # that's detected by our ._wait_for_tstate_lock(), called by .join()\n        # and .is_alive().  Any number of threads _may_ call ._stop()\n        # simultaneously (for example, if multiple threads are blocked in\n        # .join() calls), and they're not serialized.  That's harmless -\n        # they'll just make redundant rebindings of ._is_stopped and\n        # ._tstate_lock.  Obscure:  we rebind ._tstate_lock last so that the\n        # \"assert self._is_stopped\" in ._wait_for_tstate_lock() always works\n        # (the assert is executed only if ._tstate_lock is None).\n        #\n        # Special case:  _main_thread releases ._tstate_lock via this\n        # module's _shutdown() function.\n        lock = self._tstate_lock\n        if lock is not None:\n            assert not lock.locked()\n        self._is_stopped = True\n        self._tstate_lock = None\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.discard(lock)\n\n    def _delete(self):\n        \"Remove current thread from the dict of currently running threads.\"\n        with _active_limbo_lock:\n            del _active[get_ident()]\n            # There must not be any python code between the previous line\n            # and after the lock is released.  Otherwise a tracing function\n            # could try to acquire the lock again in the same thread, (in\n            # current_thread()), and would block.\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n            raise RuntimeError(\"cannot join thread before it is started\")\n        if self is current_thread():\n            raise RuntimeError(\"cannot join current thread\")\n\n        if timeout is None:\n            self._wait_for_tstate_lock()\n        else:\n            # the behavior of a negative timeout isn't documented, but\n            # historically .join(timeout=x) for x<0 has acted as if timeout=0\n            self._wait_for_tstate_lock(timeout=max(timeout, 0))\n\n    def _wait_for_tstate_lock(self, block=True, timeout=-1):\n        # Issue #18808: wait for the thread state to be gone.\n        # At the end of the thread's life, after all knowledge of the thread\n        # is removed from C data structures, C code releases our _tstate_lock.\n        # This method passes its arguments to _tstate_lock.acquire().\n        # If the lock is acquired, the C code is done, and self._stop() is\n        # called.  That sets ._is_stopped to True, and ._tstate_lock to None.\n        lock = self._tstate_lock\n        if lock is None:  # already determined that the C code is done\n            assert self._is_stopped\n        elif lock.acquire(block, timeout):\n            lock.release()\n            self._stop()\n\n    @property\n    def name(self):\n        \"\"\"A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert self._initialized, \"Thread.__init__() not called\"\n        self._name = str(name)\n\n    @property\n    def ident(self):\n        \"\"\"Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._ident\n\n    if _HAVE_THREAD_NATIVE_ID:\n        @property\n        def native_id(self):\n            \"\"\"Native integral thread ID of this thread, or None if it has not been started.\n\n            This is a non-negative integer. See the get_native_id() function.\n            This represents the Thread ID as reported by the kernel.\n\n            \"\"\"\n            assert self._initialized, \"Thread.__init__() not called\"\n            return self._native_id\n\n    def is_alive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. The module function enumerate()\n        returns a list of all alive threads.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        if self._is_stopped or not self._started.is_set():\n            return False\n        self._wait_for_tstate_lock(False)\n        return not self._is_stopped\n\n    def isAlive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method is deprecated, use is_alive() instead.\n        \"\"\"\n        import warnings\n        warnings.warn('isAlive() is deprecated, use is_alive() instead',\n                      DeprecationWarning, stacklevel=2)\n        return self.is_alive()\n\n    @property\n    def daemon(self):\n        \"\"\"A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when only daemon threads are left.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._daemonic\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if self._started.is_set():\n            raise RuntimeError(\"cannot set daemon status of active thread\")\n        self._daemonic = daemonic\n\n    def isDaemon(self):\n        return self.daemon\n\n    def setDaemon(self, daemonic):\n        self.daemon = daemonic\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name\n\n\ntry:\n    from _thread import (_excepthook as excepthook,\n                         _ExceptHookArgs as ExceptHookArgs)\nexcept ImportError:\n    # Simple Python implementation if _thread._excepthook() is not available\n    from traceback import print_exception as _print_exception\n    from collections import namedtuple\n\n    _ExceptHookArgs = namedtuple(\n        'ExceptHookArgs',\n        'exc_type exc_value exc_traceback thread')\n\n    def ExceptHookArgs(args):\n        return _ExceptHookArgs(*args)\n\n    def excepthook(args, /):\n        \"\"\"\n        Handle uncaught Thread.run() exception.\n        \"\"\"\n        if args.exc_type == SystemExit:\n            # silently ignore SystemExit\n            return\n\n        if _sys is not None and _sys.stderr is not None:\n            stderr = _sys.stderr\n        elif args.thread is not None:\n            stderr = args.thread._stderr\n            if stderr is None:\n                # do nothing if sys.stderr is None and sys.stderr was None\n                # when the thread was created\n                return\n        else:\n            # do nothing if sys.stderr is None and args.thread is None\n            return\n\n        if args.thread is not None:\n            name = args.thread.name\n        else:\n            name = get_ident()\n        print(f\"Exception in thread {name}:\",\n              file=stderr, flush=True)\n        _print_exception(args.exc_type, args.exc_value, args.exc_traceback,\n                         file=stderr)\n        stderr.flush()\n\n\ndef _make_invoke_excepthook():\n    # Create a local namespace to ensure that variables remain alive\n    # when _invoke_excepthook() is called, even if it is called late during\n    # Python shutdown. It is mostly needed for daemon threads.\n\n    old_excepthook = excepthook\n    old_sys_excepthook = _sys.excepthook\n    if old_excepthook is None:\n        raise RuntimeError(\"threading.excepthook is None\")\n    if old_sys_excepthook is None:\n        raise RuntimeError(\"sys.excepthook is None\")\n\n    sys_exc_info = _sys.exc_info\n    local_print = print\n    local_sys = _sys\n\n    def invoke_excepthook(thread):\n        global excepthook\n        try:\n            hook = excepthook\n            if hook is None:\n                hook = old_excepthook\n\n            args = ExceptHookArgs([*sys_exc_info(), thread])\n\n            hook(args)\n        except Exception as exc:\n            exc.__suppress_context__ = True\n            del exc\n\n            if local_sys is not None and local_sys.stderr is not None:\n                stderr = local_sys.stderr\n            else:\n                stderr = thread._stderr\n\n            local_print(\"Exception in threading.excepthook:\",\n                        file=stderr, flush=True)\n\n            if local_sys is not None and local_sys.excepthook is not None:\n                sys_excepthook = local_sys.excepthook\n            else:\n                sys_excepthook = old_sys_excepthook\n\n            sys_excepthook(*sys_exc_info())\n        finally:\n            # Break reference cycle (exception stored in a variable)\n            args = None\n\n    return invoke_excepthook\n\n\n# The timer class was contributed by Itamar Shtull-Trauring\n\nclass Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=None, kwargs=None):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args if args is not None else []\n        self.kwargs = kwargs if kwargs is not None else {}\n        self.finished = Event()\n\n    def cancel(self):\n        \"\"\"Stop the timer if it hasn't finished yet.\"\"\"\n        self.finished.set()\n\n    def run(self):\n        self.finished.wait(self.interval)\n        if not self.finished.is_set():\n            self.function(*self.args, **self.kwargs)\n        self.finished.set()\n\n\n# Special thread class to represent the main thread\n\nclass _MainThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\n        self._set_tstate_lock()\n        self._started.set()\n        self._set_ident()\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n\n# Dummy thread class to represent threads not started here.\n# These aren't garbage collected when they die, nor can they be waited for.\n# If they invoke anything in threading.py that calls current_thread(), they\n# leave an entry in the _active dict forever after.\n# Their purpose is to return *something* from current_thread().\n# They are marked as daemon threads so we won't wait for them\n# when we exit (conform previous semantics).\n\nclass _DummyThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"), daemon=True)\n\n        self._started.set()\n        self._set_ident()\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n    def _stop(self):\n        pass\n\n    def is_alive(self):\n        assert not self._is_stopped and self._started.is_set()\n        return True\n\n    def join(self, timeout=None):\n        assert False, \"cannot join a dummy thread\"\n\n\n# Global API functions\n\ndef current_thread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    \"\"\"\n    try:\n        return _active[get_ident()]\n    except KeyError:\n        return _DummyThread()\n\ncurrentThread = current_thread\n\ndef active_count():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    \"\"\"\n    with _active_limbo_lock:\n        return len(_active) + len(_limbo)\n\nactiveCount = active_count\n\ndef _enumerate():\n    # Same as enumerate(), but without the lock. Internal use only.\n    return list(_active.values()) + list(_limbo.values())\n\ndef enumerate():\n    \"\"\"Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    \"\"\"\n    with _active_limbo_lock:\n        return list(_active.values()) + list(_limbo.values())\n\nfrom _thread import stack_size\n\n# Create the main thread object,\n# and make it available for the interpreter\n# (Py_Main) as threading._shutdown.\n\n_main_thread = _MainThread()\n\ndef _shutdown():\n    \"\"\"\n    Wait until the Python thread state of all non-daemon threads get deleted.\n    \"\"\"\n    # Obscure:  other threads may be waiting to join _main_thread.  That's\n    # dubious, but some code does it.  We can't wait for C code to release\n    # the main thread's tstate_lock - that won't happen until the interpreter\n    # is nearly dead.  So we release it here.  Note that just calling _stop()\n    # isn't enough:  other threads may already be waiting on _tstate_lock.\n    if _main_thread._is_stopped:\n        # _shutdown() was already called\n        return\n\n    # Main thread\n    tlock = _main_thread._tstate_lock\n    # The main thread isn't finished yet, so its thread state lock can't have\n    # been released.\n    assert tlock is not None\n    assert tlock.locked()\n    tlock.release()\n    _main_thread._stop()\n\n    # Join all non-deamon threads\n    while True:\n        with _shutdown_locks_lock:\n            locks = list(_shutdown_locks)\n            _shutdown_locks.clear()\n\n        if not locks:\n            break\n\n        for lock in locks:\n            # mimick Thread.join()\n            lock.acquire()\n            lock.release()\n\n        # new threads can be spawned while we were waiting for the other\n        # threads to complete\n\n\ndef main_thread():\n    \"\"\"Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    \"\"\"\n    return _main_thread\n\n# get thread-local implementation, either from the thread\n# module, or from the python fallback\n\ntry:\n    from _thread import _local as local\nexcept ImportError:\n    from _threading_local import local\n\n\ndef _after_fork():\n    \"\"\"\n    Cleanup threading module state that should not exist after a fork.\n    \"\"\"\n    # Reset _active_limbo_lock, in case we forked while the lock was held\n    # by another (non-forked) thread.  http://bugs.python.org/issue874900\n    global _active_limbo_lock, _main_thread\n    global _shutdown_locks_lock, _shutdown_locks\n    _active_limbo_lock = _allocate_lock()\n\n    # fork() only copied the current thread; clear references to others.\n    new_active = {}\n    current = current_thread()\n    _main_thread = current\n\n    # reset _shutdown() locks: threads re-register their _tstate_lock below\n    _shutdown_locks_lock = _allocate_lock()\n    _shutdown_locks = set()\n\n    with _active_limbo_lock:\n        # Dangling thread instances must still have their locks reset,\n        # because someone may join() them.\n        threads = set(_enumerate())\n        threads.update(_dangling)\n        for thread in threads:\n            # Any lock/condition variable may be currently locked or in an\n            # invalid state, so we reinitialize them.\n            if thread is current:\n                # There is only one active thread. We reset the ident to\n                # its new value since it can have changed.\n                thread._reset_internal_locks(True)\n                ident = get_ident()\n                thread._ident = ident\n                new_active[ident] = thread\n            else:\n                # All the others are already stopped.\n                thread._reset_internal_locks(False)\n                thread._stop()\n\n        _limbo.clear()\n        _active.clear()\n        _active.update(new_active)\n        assert len(_active) == 1\n\n\nif hasattr(_os, \"register_at_fork\"):\n    _os.register_at_fork(after_in_child=_after_fork)\n", 1458], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py": ["\"\"\"Contains methods for building XML structures for interacting with IDE\n\nThe methods from this file are used for the debugger interaction. Please note\nthat Python console now uses Thrift structures with the similar methods\ncontained in `pydevd_thrift.py` file.\n\"\"\"\nimport sys\nimport traceback\n\nfrom _pydev_bundle import pydev_log\nfrom _pydev_bundle.pydev_imports import quote\nfrom _pydevd_bundle import pydevd_extension_utils\nfrom _pydevd_bundle import pydevd_resolver\nfrom _pydevd_bundle.pydevd_constants import dict_iter_items, dict_keys, IS_PY3K, \\\n    MAXIMUM_VARIABLE_REPRESENTATION_SIZE, RETURN_VALUES_DICT, LOAD_VALUES_POLICY, DEFAULT_VALUES_DICT\nfrom _pydevd_bundle.pydevd_extension_api import TypeResolveProvider, StrPresentationProvider\nfrom _pydevd_bundle.pydevd_utils import take_first_n_coll_elements, is_pandas_container, is_string, pandas_to_str, \\\n    should_evaluate_full_value, should_evaluate_shape\n\ntry:\n    import types\n\n    frame_type = types.FrameType\nexcept:\n    frame_type = None\n\n\ndef make_valid_xml_value(s):\n    # Same thing as xml.sax.saxutils.escape but also escaping double quotes.\n    return s.replace(\"&\", \"&amp;\").replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;')\n\n\nclass ExceptionOnEvaluate:\n    def __init__(self, result):\n        self.result = result\n\n\n_IS_JYTHON = sys.platform.startswith(\"java\")\n\n\ndef _create_default_type_map():\n    if not _IS_JYTHON:\n        default_type_map = [\n            # None means that it should not be treated as a compound variable\n\n            # isintance does not accept a tuple on some versions of python, so, we must declare it expanded\n            (type(None), None,),\n            (int, None),\n            (float, None),\n            (complex, None),\n            (str, None),\n            (tuple, pydevd_resolver.tupleResolver),\n            (list, pydevd_resolver.tupleResolver),\n            (dict, pydevd_resolver.dictResolver),\n        ]\n        try:\n            default_type_map.append((long, None))  # @UndefinedVariable\n        except:\n            pass  # not available on all python versions\n\n        try:\n            default_type_map.append((unicode, None))  # @UndefinedVariable\n        except:\n            pass  # not available on all python versions\n\n        try:\n            default_type_map.append((set, pydevd_resolver.setResolver))\n        except:\n            pass  # not available on all python versions\n\n        try:\n            default_type_map.append((frozenset, pydevd_resolver.setResolver))\n        except:\n            pass  # not available on all python versions\n\n        try:\n            from django.utils.datastructures import MultiValueDict\n            default_type_map.insert(0, (MultiValueDict, pydevd_resolver.multiValueDictResolver))\n            # we should put it before dict\n        except:\n            pass  # django may not be installed\n\n        try:\n            from django.forms import BaseForm\n            default_type_map.insert(0, (BaseForm, pydevd_resolver.djangoFormResolver))\n            # we should put it before instance resolver\n        except:\n            pass  # django may not be installed\n\n        try:\n            from collections import deque\n            default_type_map.append((deque, pydevd_resolver.dequeResolver))\n        except:\n            pass\n\n        try:\n            from collections import OrderedDict\n            default_type_map.insert(0, (OrderedDict, pydevd_resolver.orderedDictResolver))\n            # we should put it before dict\n        except:\n            pass\n\n        if frame_type is not None:\n            default_type_map.append((frame_type, pydevd_resolver.frameResolver))\n\n    else:\n        from org.python import core  # @UnresolvedImport\n        default_type_map = [\n            (core.PyNone, None),\n            (core.PyInteger, None),\n            (core.PyLong, None),\n            (core.PyFloat, None),\n            (core.PyComplex, None),\n            (core.PyString, None),\n            (core.PyTuple, pydevd_resolver.tupleResolver),\n            (core.PyList, pydevd_resolver.tupleResolver),\n            (core.PyDictionary, pydevd_resolver.dictResolver),\n            (core.PyStringMap, pydevd_resolver.dictResolver),\n        ]\n        if hasattr(core, 'PyJavaInstance'):\n            # Jython 2.5b3 removed it.\n            default_type_map.append((core.PyJavaInstance, pydevd_resolver.instanceResolver))\n\n    return default_type_map\n\n\nclass TypeResolveHandler(object):\n    NO_PROVIDER = []  # Sentinel value (any mutable object to be used as a constant would be valid).\n\n    def __init__(self):\n        # Note: don't initialize with the types we already know about so that the extensions can override\n        # the default resolvers that are already available if they want.\n        self._type_to_resolver_cache = {}\n        self._type_to_str_provider_cache = {}\n        self._initialized = False\n\n    def _initialize(self):\n        self._default_type_map = _create_default_type_map()\n        self._resolve_providers = pydevd_extension_utils.extensions_of_type(TypeResolveProvider)\n        self._str_providers = pydevd_extension_utils.extensions_of_type(StrPresentationProvider)\n        self._initialized = True\n\n    def get_type(self, o):\n        try:\n            try:\n                # Faster than type(o) as we don't need the function call.\n                type_object = o.__class__\n            except:\n                # Not all objects have __class__ (i.e.: there are bad bindings around).\n                type_object = type(o)\n\n            type_name = type_object.__name__\n        except:\n            # This happens for org.python.core.InitModule\n            return 'Unable to get Type', 'Unable to get Type', None\n\n        return self._get_type(o, type_object, type_name)\n\n    def _get_type(self, o, type_object, type_name):\n        resolver = self._type_to_resolver_cache.get(type_object)\n        if resolver is not None:\n            return type_object, type_name, resolver\n\n        if not self._initialized:\n            self._initialize()\n\n        try:\n            for resolver in self._resolve_providers:\n                if resolver.can_provide(type_object, type_name):\n                    # Cache it\n                    self._type_to_resolver_cache[type_object] = resolver\n                    return type_object, type_name, resolver\n\n            for t in self._default_type_map:\n                if isinstance(o, t[0]):\n                    # Cache it\n                    resolver = t[1]\n                    self._type_to_resolver_cache[type_object] = resolver\n                    return (type_object, type_name, resolver)\n        except:\n            traceback.print_exc()\n\n        # No match return default (and cache it).\n        resolver = pydevd_resolver.defaultResolver\n        self._type_to_resolver_cache[type_object] = resolver\n        return type_object, type_name, resolver\n\n    if _IS_JYTHON:\n        _base_get_type = _get_type\n\n        def _get_type(self, o, type_object, type_name):\n            if type_name == 'org.python.core.PyJavaInstance':\n                return type_object, type_name, pydevd_resolver.instanceResolver\n\n            if type_name == 'org.python.core.PyArray':\n                return type_object, type_name, pydevd_resolver.jyArrayResolver\n\n            return self._base_get_type(o, type_name, type_name)\n\n    def str_from_providers(self, o, type_object, type_name):\n        provider = self._type_to_str_provider_cache.get(type_object)\n\n        if provider is self.NO_PROVIDER:\n            return None\n\n        if provider is not None:\n            return provider.get_str(o)\n\n        if not self._initialized:\n            self._initialize()\n\n        for provider in self._str_providers:\n            if provider.can_provide(type_object, type_name):\n                self._type_to_str_provider_cache[type_object] = provider\n                return provider.get_str(o)\n\n        self._type_to_str_provider_cache[type_object] = self.NO_PROVIDER\n        return None\n\n\n_TYPE_RESOLVE_HANDLER = TypeResolveHandler()\n\n\"\"\" \ndef get_type(o):\n    Receives object and returns a triple (typeObject, typeString, resolver).\n\n    resolver != None means that variable is a container, and should be displayed as a hierarchy.\n\n    Use the resolver to get its attributes.\n\n    All container objects should have a resolver.\n\"\"\"\nget_type = _TYPE_RESOLVE_HANDLER.get_type\n\n_str_from_providers = _TYPE_RESOLVE_HANDLER.str_from_providers\n\n\ndef frame_vars_to_xml(frame_f_locals, hidden_ns=None):\n    \"\"\" dumps frame variables to XML\n    <var name=\"var_name\" scope=\"local\" type=\"type\" value=\"value\"/>\n    \"\"\"\n    xml = \"\"\n\n    keys = dict_keys(frame_f_locals)\n    if hasattr(keys, 'sort'):\n        keys.sort()  # Python 3.0 does not have it\n    else:\n        keys = sorted(keys)  # Jython 2.1 does not have it\n\n    return_values_xml = ''\n\n    for k in keys:\n        try:\n            v = frame_f_locals[k]\n            eval_full_val = should_evaluate_full_value(v)\n\n            if k == RETURN_VALUES_DICT:\n                for name, val in dict_iter_items(v):\n                    return_values_xml += var_to_xml(val, name, additional_in_xml=' isRetVal=\"True\"')\n\n            else:\n                if hidden_ns is not None and k in hidden_ns:\n                    xml += var_to_xml(v, str(k), additional_in_xml=' isIPythonHidden=\"True\"',\n                                      evaluate_full_value=eval_full_val)\n                else:\n                    xml += var_to_xml(v, str(k), evaluate_full_value=eval_full_val)\n        except Exception:\n            traceback.print_exc()\n            pydev_log.error(\"Unexpected error, recovered safely.\\n\")\n\n    # Show return values as the first entry.\n    return return_values_xml + xml\n\n\ndef var_to_xml(val, name, doTrim=True, additional_in_xml='', evaluate_full_value=True, format='%s'):\n    \"\"\" single variable or dictionary to xml representation \"\"\"\n\n    try:\n        # This should be faster than isinstance (but we have to protect against not having a '__class__' attribute).\n        is_exception_on_eval = val.__class__ == ExceptionOnEvaluate\n    except:\n        is_exception_on_eval = False\n\n    if is_exception_on_eval:\n        v = val.result\n    else:\n        v = val\n\n    _type, typeName, resolver = get_type(v)\n    type_qualifier = getattr(_type, \"__module__\", \"\")\n    if not evaluate_full_value:\n        value = DEFAULT_VALUES_DICT[LOAD_VALUES_POLICY]\n    else:\n        try:\n            str_from_provider = _str_from_providers(v, _type, typeName)\n            if str_from_provider is not None:\n                value = str_from_provider\n            elif hasattr(v, '__class__'):\n                if v.__class__ == frame_type:\n                    value = pydevd_resolver.frameResolver.get_frame_name(v)\n\n                elif v.__class__ in (list, tuple, set, frozenset, dict):\n                    if len(v) > pydevd_resolver.MAX_ITEMS_TO_HANDLE:\n                        value = '%s' % take_first_n_coll_elements(v, pydevd_resolver.MAX_ITEMS_TO_HANDLE)\n                        value = value.rstrip(')]}') + '...'\n                    else:\n                        value = '%s' % v\n                else:\n                    value = format % v\n            else:\n                value = str(v)\n        except:\n            try:\n                value = repr(v)\n            except:\n                value = 'Unable to get repr for %s' % v.__class__\n\n    try:\n        name = quote(name, '/>_= ')  # TODO: Fix PY-5834 without using quote\n    except:\n        pass\n\n    xml = '<var name=\"%s\" type=\"%s\" ' % (make_valid_xml_value(name), make_valid_xml_value(typeName))\n\n    if type_qualifier:\n        xml_qualifier = 'qualifier=\"%s\"' % make_valid_xml_value(type_qualifier)\n    else:\n        xml_qualifier = ''\n\n    # cannot be too big... communication may not handle it.\n    if len(value) > MAXIMUM_VARIABLE_REPRESENTATION_SIZE and doTrim:\n        value = value[0:MAXIMUM_VARIABLE_REPRESENTATION_SIZE]\n        value += '...'\n\n    # fix to work with unicode values\n    try:\n        if not IS_PY3K:\n            if value.__class__ == unicode:  # @UndefinedVariable\n                value = value.encode('utf-8')\n        else:\n            if value.__class__ == bytes:\n                value = value.encode('utf-8')\n    except TypeError:  # in java, unicode is a function\n        pass\n\n    if is_pandas_container(type_qualifier, typeName, v):\n        value = pandas_to_str(v, typeName, value, pydevd_resolver.MAX_ITEMS_TO_HANDLE)\n    xml_value = ' value=\"%s\"' % (make_valid_xml_value(quote(value, '/>_= ')))\n\n    xml_shape = ''\n    try:\n        if should_evaluate_shape():\n            if hasattr(v, 'shape') and not callable(v.shape):\n                xml_shape = ' shape=\"%s\"' % make_valid_xml_value(str(tuple(v.shape)))\n            elif hasattr(v, '__len__') and not is_string(v):\n                xml_shape = ' shape=\"%s\"' % make_valid_xml_value(\"%s\" % str(len(v)))\n    except:\n        pass\n\n    if is_exception_on_eval:\n        xml_container = ' isErrorOnEval=\"True\"'\n    else:\n        if resolver is not None:\n            xml_container = ' isContainer=\"True\"'\n        else:\n            xml_container = ''\n\n    return ''.join((xml, xml_qualifier, xml_value, xml_container, xml_shape, additional_in_xml, ' />\\n'))\n\n", 369], "/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py": ["\"\"\"Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zawinski, July 1998.\n\nRFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior.\n\"\"\"\n\nimport re\nimport sys\nimport collections\nimport warnings\n\n__all__ = [\"urlparse\", \"urlunparse\", \"urljoin\", \"urldefrag\",\n           \"urlsplit\", \"urlunsplit\", \"urlencode\", \"parse_qs\",\n           \"parse_qsl\", \"quote\", \"quote_plus\", \"quote_from_bytes\",\n           \"unquote\", \"unquote_plus\", \"unquote_to_bytes\",\n           \"DefragResult\", \"ParseResult\", \"SplitResult\",\n           \"DefragResultBytes\", \"ParseResultBytes\", \"SplitResultBytes\"]\n\n# A classification of schemes.\n# The empty string classifies URLs with no scheme specified,\n# being the default value returned by \u201curlsplit\u201d and \u201curlparse\u201d.\n\nuses_relative = ['', 'ftp', 'http', 'gopher', 'nntp', 'imap',\n                 'wais', 'file', 'https', 'shttp', 'mms',\n                 'prospero', 'rtsp', 'rtspu', 'sftp',\n                 'svn', 'svn+ssh', 'ws', 'wss']\n\nuses_netloc = ['', 'ftp', 'http', 'gopher', 'nntp', 'telnet',\n               'imap', 'wais', 'file', 'mms', 'https', 'shttp',\n               'snews', 'prospero', 'rtsp', 'rtspu', 'rsync',\n               'svn', 'svn+ssh', 'sftp', 'nfs', 'git', 'git+ssh',\n               'ws', 'wss']\n\nuses_params = ['', 'ftp', 'hdl', 'prospero', 'http', 'imap',\n               'https', 'shttp', 'rtsp', 'rtspu', 'sip', 'sips',\n               'mms', 'sftp', 'tel']\n\n# These are not actually used anymore, but should stay for backwards\n# compatibility.  (They are undocumented, but have a public-looking name.)\n\nnon_hierarchical = ['gopher', 'hdl', 'mailto', 'news',\n                    'telnet', 'wais', 'imap', 'snews', 'sip', 'sips']\n\nuses_query = ['', 'http', 'wais', 'imap', 'https', 'shttp', 'mms',\n              'gopher', 'rtsp', 'rtspu', 'sip', 'sips']\n\nuses_fragment = ['', 'ftp', 'hdl', 'http', 'gopher', 'news',\n                 'nntp', 'wais', 'https', 'shttp', 'snews',\n                 'file', 'prospero']\n\n# Characters valid in scheme names\nscheme_chars = ('abcdefghijklmnopqrstuvwxyz'\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                '0123456789'\n                '+-.')\n\n# XXX: Consider replacing with functools.lru_cache\nMAX_CACHE_SIZE = 20\n_parse_cache = {}\n\ndef clear_cache():\n    \"\"\"Clear the parse cache and the quoters cache.\"\"\"\n    _parse_cache.clear()\n    _safe_quoters.clear()\n\n\n# Helpers for bytes handling\n# For 3.2, we deliberately require applications that\n# handle improperly quoted URLs to do their own\n# decoding and encoding. If valid use cases are\n# presented, we may relax this by using latin-1\n# decoding internally for 3.3\n_implicit_encoding = 'ascii'\n_implicit_errors = 'strict'\n\ndef _noop(obj):\n    return obj\n\ndef _encode_result(obj, encoding=_implicit_encoding,\n                        errors=_implicit_errors):\n    return obj.encode(encoding, errors)\n\ndef _decode_args(args, encoding=_implicit_encoding,\n                       errors=_implicit_errors):\n    return tuple(x.decode(encoding, errors) if x else '' for x in args)\n\ndef _coerce_args(*args):\n    # Invokes decode if necessary to create str args\n    # and returns the coerced inputs along with\n    # an appropriate result coercion function\n    #   - noop for str inputs\n    #   - encoding function otherwise\n    str_input = isinstance(args[0], str)\n    for arg in args[1:]:\n        # We special-case the empty string to support the\n        # \"scheme=''\" default argument to some functions\n        if arg and isinstance(arg, str) != str_input:\n            raise TypeError(\"Cannot mix str and non-str arguments\")\n    if str_input:\n        return args + (_noop,)\n    return _decode_args(args) + (_encode_result,)\n\n# Result objects are more helpful than simple tuples\nclass _ResultMixinStr(object):\n    \"\"\"Standard approach to encoding parsed results from str to bytes\"\"\"\n    __slots__ = ()\n\n    def encode(self, encoding='ascii', errors='strict'):\n        return self._encoded_counterpart(*(x.encode(encoding, errors) for x in self))\n\n\nclass _ResultMixinBytes(object):\n    \"\"\"Standard approach to decoding parsed results from bytes to str\"\"\"\n    __slots__ = ()\n\n    def decode(self, encoding='ascii', errors='strict'):\n        return self._decoded_counterpart(*(x.decode(encoding, errors) for x in self))\n\n\nclass _NetlocResultMixinBase(object):\n    \"\"\"Shared methods for the parsed result objects containing a netloc element\"\"\"\n    __slots__ = ()\n\n    @property\n    def username(self):\n        return self._userinfo[0]\n\n    @property\n    def password(self):\n        return self._userinfo[1]\n\n    @property\n    def hostname(self):\n        hostname = self._hostinfo[0]\n        if not hostname:\n            return None\n        # Scoped IPv6 address may have zone info, which must not be lowercased\n        # like http://[fe80::822a:a8ff:fe49:470c%tESt]:1234/keys\n        separator = '%' if isinstance(hostname, str) else b'%'\n        hostname, percent, zone = hostname.partition(separator)\n        return hostname.lower() + percent + zone\n\n    @property\n    def port(self):\n        port = self._hostinfo[1]\n        if port is not None:\n            try:\n                port = int(port, 10)\n            except ValueError:\n                message = f'Port could not be cast to integer value as {port!r}'\n                raise ValueError(message) from None\n            if not ( 0 <= port <= 65535):\n                raise ValueError(\"Port out of range 0-65535\")\n        return port\n\n\nclass _NetlocResultMixinStr(_NetlocResultMixinBase, _ResultMixinStr):\n    __slots__ = ()\n\n    @property\n    def _userinfo(self):\n        netloc = self.netloc\n        userinfo, have_info, hostinfo = netloc.rpartition('@')\n        if have_info:\n            username, have_password, password = userinfo.partition(':')\n            if not have_password:\n                password = None\n        else:\n            username = password = None\n        return username, password\n\n    @property\n    def _hostinfo(self):\n        netloc = self.netloc\n        _, _, hostinfo = netloc.rpartition('@')\n        _, have_open_br, bracketed = hostinfo.partition('[')\n        if have_open_br:\n            hostname, _, port = bracketed.partition(']')\n            _, _, port = port.partition(':')\n        else:\n            hostname, _, port = hostinfo.partition(':')\n        if not port:\n            port = None\n        return hostname, port\n\n\nclass _NetlocResultMixinBytes(_NetlocResultMixinBase, _ResultMixinBytes):\n    __slots__ = ()\n\n    @property\n    def _userinfo(self):\n        netloc = self.netloc\n        userinfo, have_info, hostinfo = netloc.rpartition(b'@')\n        if have_info:\n            username, have_password, password = userinfo.partition(b':')\n            if not have_password:\n                password = None\n        else:\n            username = password = None\n        return username, password\n\n    @property\n    def _hostinfo(self):\n        netloc = self.netloc\n        _, _, hostinfo = netloc.rpartition(b'@')\n        _, have_open_br, bracketed = hostinfo.partition(b'[')\n        if have_open_br:\n            hostname, _, port = bracketed.partition(b']')\n            _, _, port = port.partition(b':')\n        else:\n            hostname, _, port = hostinfo.partition(b':')\n        if not port:\n            port = None\n        return hostname, port\n\n\nfrom collections import namedtuple\n\n_DefragResultBase = namedtuple('DefragResult', 'url fragment')\n_SplitResultBase = namedtuple(\n    'SplitResult', 'scheme netloc path query fragment')\n_ParseResultBase = namedtuple(\n    'ParseResult', 'scheme netloc path params query fragment')\n\n_DefragResultBase.__doc__ = \"\"\"\nDefragResult(url, fragment)\n\nA 2-tuple that contains the url without fragment identifier and the fragment\nidentifier as a separate argument.\n\"\"\"\n\n_DefragResultBase.url.__doc__ = \"\"\"The URL with no fragment identifier.\"\"\"\n\n_DefragResultBase.fragment.__doc__ = \"\"\"\nFragment identifier separated from URL, that allows indirect identification of a\nsecondary resource by reference to a primary resource and additional identifying\ninformation.\n\"\"\"\n\n_SplitResultBase.__doc__ = \"\"\"\nSplitResult(scheme, netloc, path, query, fragment)\n\nA 5-tuple that contains the different components of a URL. Similar to\nParseResult, but does not split params.\n\"\"\"\n\n_SplitResultBase.scheme.__doc__ = \"\"\"Specifies URL scheme for the request.\"\"\"\n\n_SplitResultBase.netloc.__doc__ = \"\"\"\nNetwork location where the request is made to.\n\"\"\"\n\n_SplitResultBase.path.__doc__ = \"\"\"\nThe hierarchical path, such as the path to a file to download.\n\"\"\"\n\n_SplitResultBase.query.__doc__ = \"\"\"\nThe query component, that contains non-hierarchical data, that along with data\nin path component, identifies a resource in the scope of URI's scheme and\nnetwork location.\n\"\"\"\n\n_SplitResultBase.fragment.__doc__ = \"\"\"\nFragment identifier, that allows indirect identification of a secondary resource\nby reference to a primary resource and additional identifying information.\n\"\"\"\n\n_ParseResultBase.__doc__ = \"\"\"\nParseResult(scheme, netloc, path, params, query, fragment)\n\nA 6-tuple that contains components of a parsed URL.\n\"\"\"\n\n_ParseResultBase.scheme.__doc__ = _SplitResultBase.scheme.__doc__\n_ParseResultBase.netloc.__doc__ = _SplitResultBase.netloc.__doc__\n_ParseResultBase.path.__doc__ = _SplitResultBase.path.__doc__\n_ParseResultBase.params.__doc__ = \"\"\"\nParameters for last path element used to dereference the URI in order to provide\naccess to perform some operation on the resource.\n\"\"\"\n\n_ParseResultBase.query.__doc__ = _SplitResultBase.query.__doc__\n_ParseResultBase.fragment.__doc__ = _SplitResultBase.fragment.__doc__\n\n\n# For backwards compatibility, alias _NetlocResultMixinStr\n# ResultBase is no longer part of the documented API, but it is\n# retained since deprecating it isn't worth the hassle\nResultBase = _NetlocResultMixinStr\n\n# Structured result objects for string data\nclass DefragResult(_DefragResultBase, _ResultMixinStr):\n    __slots__ = ()\n    def geturl(self):\n        if self.fragment:\n            return self.url + '#' + self.fragment\n        else:\n            return self.url\n\nclass SplitResult(_SplitResultBase, _NetlocResultMixinStr):\n    __slots__ = ()\n    def geturl(self):\n        return urlunsplit(self)\n\nclass ParseResult(_ParseResultBase, _NetlocResultMixinStr):\n    __slots__ = ()\n    def geturl(self):\n        return urlunparse(self)\n\n# Structured result objects for bytes data\nclass DefragResultBytes(_DefragResultBase, _ResultMixinBytes):\n    __slots__ = ()\n    def geturl(self):\n        if self.fragment:\n            return self.url + b'#' + self.fragment\n        else:\n            return self.url\n\nclass SplitResultBytes(_SplitResultBase, _NetlocResultMixinBytes):\n    __slots__ = ()\n    def geturl(self):\n        return urlunsplit(self)\n\nclass ParseResultBytes(_ParseResultBase, _NetlocResultMixinBytes):\n    __slots__ = ()\n    def geturl(self):\n        return urlunparse(self)\n\n# Set up the encode/decode result pairs\ndef _fix_result_transcoding():\n    _result_pairs = (\n        (DefragResult, DefragResultBytes),\n        (SplitResult, SplitResultBytes),\n        (ParseResult, ParseResultBytes),\n    )\n    for _decoded, _encoded in _result_pairs:\n        _decoded._encoded_counterpart = _encoded\n        _encoded._decoded_counterpart = _decoded\n\n_fix_result_transcoding()\ndel _fix_result_transcoding\n\ndef urlparse(url, scheme='', allow_fragments=True):\n    \"\"\"Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n    url, scheme, _coerce_result = _coerce_args(url, scheme)\n    splitresult = urlsplit(url, scheme, allow_fragments)\n    scheme, netloc, url, query, fragment = splitresult\n    if scheme in uses_params and ';' in url:\n        url, params = _splitparams(url)\n    else:\n        params = ''\n    result = ParseResult(scheme, netloc, url, params, query, fragment)\n    return _coerce_result(result)\n\ndef _splitparams(url):\n    if '/'  in url:\n        i = url.find(';', url.rfind('/'))\n        if i < 0:\n            return url, ''\n    else:\n        i = url.find(';')\n    return url[:i], url[i+1:]\n\ndef _splitnetloc(url, start=0):\n    delim = len(url)   # position of end of domain part of url, default is end\n    for c in '/?#':    # look for delimiters; the order is NOT important\n        wdelim = url.find(c, start)        # find first of this delim\n        if wdelim >= 0:                    # if found\n            delim = min(delim, wdelim)     # use earliest delim position\n    return url[start:delim], url[delim:]   # return (domain, rest)\n\ndef _checknetloc(netloc):\n    if not netloc or netloc.isascii():\n        return\n    # looking for characters like \\u2100 that expand to 'a/c'\n    # IDNA uses NFKC equivalence, so normalize for this check\n    import unicodedata\n    n = netloc.replace('@', '')   # ignore characters already included\n    n = n.replace(':', '')        # but not the surrounding text\n    n = n.replace('#', '')\n    n = n.replace('?', '')\n    netloc2 = unicodedata.normalize('NFKC', n)\n    if n == netloc2:\n        return\n    for c in '/?#@:':\n        if c in netloc2:\n            raise ValueError(\"netloc '\" + netloc + \"' contains invalid \" +\n                             \"characters under NFKC normalization\")\n\ndef urlsplit(url, scheme='', allow_fragments=True):\n    \"\"\"Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"\n    url, scheme, _coerce_result = _coerce_args(url, scheme)\n    allow_fragments = bool(allow_fragments)\n    key = url, scheme, allow_fragments, type(url), type(scheme)\n    cached = _parse_cache.get(key, None)\n    if cached:\n        return _coerce_result(cached)\n    if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth\n        clear_cache()\n    netloc = query = fragment = ''\n    i = url.find(':')\n    if i > 0:\n        for c in url[:i]:\n            if c not in scheme_chars:\n                break\n        else:\n            scheme, url = url[:i].lower(), url[i+1:]\n\n    if url[:2] == '//':\n        netloc, url = _splitnetloc(url, 2)\n        if (('[' in netloc and ']' not in netloc) or\n                (']' in netloc and '[' not in netloc)):\n            raise ValueError(\"Invalid IPv6 URL\")\n    if allow_fragments and '#' in url:\n        url, fragment = url.split('#', 1)\n    if '?' in url:\n        url, query = url.split('?', 1)\n    _checknetloc(netloc)\n    v = SplitResult(scheme, netloc, url, query, fragment)\n    _parse_cache[key] = v\n    return _coerce_result(v)\n\ndef urlunparse(components):\n    \"\"\"Put a parsed URL back together again.  This may result in a\n    slightly different, but equivalent URL, if the URL that was parsed\n    originally had redundant delimiters, e.g. a ? with an empty query\n    (the draft states that these are equivalent).\"\"\"\n    scheme, netloc, url, params, query, fragment, _coerce_result = (\n                                                  _coerce_args(*components))\n    if params:\n        url = \"%s;%s\" % (url, params)\n    return _coerce_result(urlunsplit((scheme, netloc, url, query, fragment)))\n\ndef urlunsplit(components):\n    \"\"\"Combine the elements of a tuple as returned by urlsplit() into a\n    complete URL as a string. The data argument can be any five-item iterable.\n    This may result in a slightly different, but equivalent URL, if the URL that\n    was parsed originally had unnecessary delimiters (for example, a ? with an\n    empty query; the RFC states that these are equivalent).\"\"\"\n    scheme, netloc, url, query, fragment, _coerce_result = (\n                                          _coerce_args(*components))\n    if netloc or (scheme and scheme in uses_netloc and url[:2] != '//'):\n        if url and url[:1] != '/': url = '/' + url\n        url = '//' + (netloc or '') + url\n    if scheme:\n        url = scheme + ':' + url\n    if query:\n        url = url + '?' + query\n    if fragment:\n        url = url + '#' + fragment\n    return _coerce_result(url)\n\ndef urljoin(base, url, allow_fragments=True):\n    \"\"\"Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.\"\"\"\n    if not base:\n        return url\n    if not url:\n        return base\n\n    base, url, _coerce_result = _coerce_args(base, url)\n    bscheme, bnetloc, bpath, bparams, bquery, bfragment = \\\n            urlparse(base, '', allow_fragments)\n    scheme, netloc, path, params, query, fragment = \\\n            urlparse(url, bscheme, allow_fragments)\n\n    if scheme != bscheme or scheme not in uses_relative:\n        return _coerce_result(url)\n    if scheme in uses_netloc:\n        if netloc:\n            return _coerce_result(urlunparse((scheme, netloc, path,\n                                              params, query, fragment)))\n        netloc = bnetloc\n\n    if not path and not params:\n        path = bpath\n        params = bparams\n        if not query:\n            query = bquery\n        return _coerce_result(urlunparse((scheme, netloc, path,\n                                          params, query, fragment)))\n\n    base_parts = bpath.split('/')\n    if base_parts[-1] != '':\n        # the last item is not a directory, so will not be taken into account\n        # in resolving the relative path\n        del base_parts[-1]\n\n    # for rfc3986, ignore all base path should the first character be root.\n    if path[:1] == '/':\n        segments = path.split('/')\n    else:\n        segments = base_parts + path.split('/')\n        # filter out elements that would cause redundant slashes on re-joining\n        # the resolved_path\n        segments[1:-1] = filter(None, segments[1:-1])\n\n    resolved_path = []\n\n    for seg in segments:\n        if seg == '..':\n            try:\n                resolved_path.pop()\n            except IndexError:\n                # ignore any .. segments that would otherwise cause an IndexError\n                # when popped from resolved_path if resolving for rfc3986\n                pass\n        elif seg == '.':\n            continue\n        else:\n            resolved_path.append(seg)\n\n    if segments[-1] in ('.', '..'):\n        # do some post-processing here. if the last segment was a relative dir,\n        # then we need to append the trailing '/'\n        resolved_path.append('')\n\n    return _coerce_result(urlunparse((scheme, netloc, '/'.join(\n        resolved_path) or '/', params, query, fragment)))\n\n\ndef urldefrag(url):\n    \"\"\"Removes any existing fragment from URL.\n\n    Returns a tuple of the defragmented URL and the fragment.  If\n    the URL contained no fragments, the second element is the\n    empty string.\n    \"\"\"\n    url, _coerce_result = _coerce_args(url)\n    if '#' in url:\n        s, n, p, a, q, frag = urlparse(url)\n        defrag = urlunparse((s, n, p, a, q, ''))\n    else:\n        frag = ''\n        defrag = url\n    return _coerce_result(DefragResult(defrag, frag))\n\n_hexdig = '0123456789ABCDEFabcdef'\n_hextobyte = None\n\ndef unquote_to_bytes(string):\n    \"\"\"unquote_to_bytes('abc%20def') -> b'abc def'.\"\"\"\n    # Note: strings are encoded as UTF-8. This is only an issue if it contains\n    # unescaped non-ASCII characters, which URIs should not.\n    if not string:\n        # Is it a string-like object?\n        string.split\n        return b''\n    if isinstance(string, str):\n        string = string.encode('utf-8')\n    bits = string.split(b'%')\n    if len(bits) == 1:\n        return string\n    res = [bits[0]]\n    append = res.append\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    global _hextobyte\n    if _hextobyte is None:\n        _hextobyte = {(a + b).encode(): bytes.fromhex(a + b)\n                      for a in _hexdig for b in _hexdig}\n    for item in bits[1:]:\n        try:\n            append(_hextobyte[item[:2]])\n            append(item[2:])\n        except KeyError:\n            append(b'%')\n            append(item)\n    return b''.join(res)\n\n_asciire = re.compile('([\\x00-\\x7f]+)')\n\ndef unquote(string, encoding='utf-8', errors='replace'):\n    \"\"\"Replace %xx escapes by their single-character equivalent. The optional\n    encoding and errors parameters specify how to decode percent-encoded\n    sequences into Unicode characters, as accepted by the bytes.decode()\n    method.\n    By default, percent-encoded sequences are decoded with UTF-8, and invalid\n    sequences are replaced by a placeholder character.\n\n    unquote('abc%20def') -> 'abc def'.\n    \"\"\"\n    if '%' not in string:\n        string.split\n        return string\n    if encoding is None:\n        encoding = 'utf-8'\n    if errors is None:\n        errors = 'replace'\n    bits = _asciire.split(string)\n    res = [bits[0]]\n    append = res.append\n    for i in range(1, len(bits), 2):\n        append(unquote_to_bytes(bits[i]).decode(encoding, errors))\n        append(bits[i + 1])\n    return ''.join(res)\n\n\ndef parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n             encoding='utf-8', errors='replace', max_num_fields=None):\n    \"\"\"Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n\n        encoding and errors: specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n\n        max_num_fields: int. If set, then throws a ValueError if there\n            are more than n fields read by parse_qsl().\n\n        Returns a dictionary.\n    \"\"\"\n    parsed_result = {}\n    pairs = parse_qsl(qs, keep_blank_values, strict_parsing,\n                      encoding=encoding, errors=errors,\n                      max_num_fields=max_num_fields)\n    for name, value in pairs:\n        if name in parsed_result:\n            parsed_result[name].append(value)\n        else:\n            parsed_result[name] = [value]\n    return parsed_result\n\n\ndef parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n              encoding='utf-8', errors='replace', max_num_fields=None):\n    \"\"\"Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as blank\n            strings.  The default false value indicates that blank values\n            are to be ignored and treated as if they were  not included.\n\n        strict_parsing: flag indicating what to do with parsing errors. If\n            false (the default), errors are silently ignored. If true,\n            errors raise a ValueError exception.\n\n        encoding and errors: specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n\n        max_num_fields: int. If set, then throws a ValueError\n            if there are more than n fields read by parse_qsl().\n\n        Returns a list, as G-d intended.\n    \"\"\"\n    qs, _coerce_result = _coerce_args(qs)\n\n    # If max_num_fields is defined then check that the number of fields\n    # is less than max_num_fields. This prevents a memory exhaustion DOS\n    # attack via post bodies with many fields.\n    if max_num_fields is not None:\n        num_fields = 1 + qs.count('&') + qs.count(';')\n        if max_num_fields < num_fields:\n            raise ValueError('Max number of fields exceeded')\n\n    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n    r = []\n    for name_value in pairs:\n        if not name_value and not strict_parsing:\n            continue\n        nv = name_value.split('=', 1)\n        if len(nv) != 2:\n            if strict_parsing:\n                raise ValueError(\"bad query field: %r\" % (name_value,))\n            # Handle case of a control-name with no equal sign\n            if keep_blank_values:\n                nv.append('')\n            else:\n                continue\n        if len(nv[1]) or keep_blank_values:\n            name = nv[0].replace('+', ' ')\n            name = unquote(name, encoding=encoding, errors=errors)\n            name = _coerce_result(name)\n            value = nv[1].replace('+', ' ')\n            value = unquote(value, encoding=encoding, errors=errors)\n            value = _coerce_result(value)\n            r.append((name, value))\n    return r\n\ndef unquote_plus(string, encoding='utf-8', errors='replace'):\n    \"\"\"Like unquote(), but also replace plus signs by spaces, as required for\n    unquoting HTML form values.\n\n    unquote_plus('%7e/abc+def') -> '~/abc def'\n    \"\"\"\n    string = string.replace('+', ' ')\n    return unquote(string, encoding, errors)\n\n_ALWAYS_SAFE = frozenset(b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                         b'abcdefghijklmnopqrstuvwxyz'\n                         b'0123456789'\n                         b'_.-~')\n_ALWAYS_SAFE_BYTES = bytes(_ALWAYS_SAFE)\n_safe_quoters = {}\n\nclass Quoter(collections.defaultdict):\n    \"\"\"A mapping from bytes (in range(0,256)) to strings.\n\n    String values are percent-encoded byte values, unless the key < 128, and\n    in the \"safe\" set (either the specified safe set, or default set).\n    \"\"\"\n    # Keeps a cache internally, using defaultdict, for efficiency (lookups\n    # of cached keys don't call Python code at all).\n    def __init__(self, safe):\n        \"\"\"safe: bytes object.\"\"\"\n        self.safe = _ALWAYS_SAFE.union(safe)\n\n    def __repr__(self):\n        # Without this, will just display as a defaultdict\n        return \"<%s %r>\" % (self.__class__.__name__, dict(self))\n\n    def __missing__(self, b):\n        # Handle a cache miss. Store quoted string in cache and return.\n        res = chr(b) if b in self.safe else '%{:02X}'.format(b)\n        self[b] = res\n        return res\n\ndef quote(string, safe='/', encoding=None, errors=None):\n    \"\"\"quote('abc def') -> 'abc%20def'\n\n    Each part of a URL, e.g. the path info, the query, etc., has a\n    different set of reserved characters that must be quoted. The\n    quote function offers a cautious (not minimal) way to quote a\n    string for most of these parts.\n\n    RFC 3986 Uniform Resource Identifier (URI): Generic Syntax lists\n    the following (un)reserved characters.\n\n    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n    reserved      = gen-delims / sub-delims\n    gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\n    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                  / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n    Each of the reserved characters is reserved in some component of a URL,\n    but not necessarily in all of them.\n\n    The quote function %-escapes all characters that are neither in the\n    unreserved chars (\"always safe\") nor the additional chars set via the\n    safe arg.\n\n    The default for the safe arg is '/'. The character is reserved, but in\n    typical usage the quote function is being called on a path where the\n    existing slash characters are to be preserved.\n\n    Python 3.7 updates from using RFC 2396 to RFC 3986 to quote URL strings.\n    Now, \"~\" is included in the set of unreserved characters.\n\n    string and safe may be either str or bytes objects. encoding and errors\n    must not be specified if string is a bytes object.\n\n    The optional encoding and errors parameters specify how to deal with\n    non-ASCII characters, as accepted by the str.encode method.\n    By default, encoding='utf-8' (characters are encoded with UTF-8), and\n    errors='strict' (unsupported characters raise a UnicodeEncodeError).\n    \"\"\"\n    if isinstance(string, str):\n        if not string:\n            return string\n        if encoding is None:\n            encoding = 'utf-8'\n        if errors is None:\n            errors = 'strict'\n        string = string.encode(encoding, errors)\n    else:\n        if encoding is not None:\n            raise TypeError(\"quote() doesn't support 'encoding' for bytes\")\n        if errors is not None:\n            raise TypeError(\"quote() doesn't support 'errors' for bytes\")\n    return quote_from_bytes(string, safe)\n\ndef quote_plus(string, safe='', encoding=None, errors=None):\n    \"\"\"Like quote(), but also replace ' ' with '+', as required for quoting\n    HTML form values. Plus signs in the original string are escaped unless\n    they are included in safe. It also does not have safe default to '/'.\n    \"\"\"\n    # Check if ' ' in string, where string may either be a str or bytes.  If\n    # there are no spaces, the regular quote will produce the right answer.\n    if ((isinstance(string, str) and ' ' not in string) or\n        (isinstance(string, bytes) and b' ' not in string)):\n        return quote(string, safe, encoding, errors)\n    if isinstance(safe, str):\n        space = ' '\n    else:\n        space = b' '\n    string = quote(string, safe + space, encoding, errors)\n    return string.replace(' ', '+')\n\ndef quote_from_bytes(bs, safe='/'):\n    \"\"\"Like quote(), but accepts a bytes object rather than a str, and does\n    not perform string-to-bytes encoding.  It always returns an ASCII string.\n    quote_from_bytes(b'abc def\\x3f') -> 'abc%20def%3f'\n    \"\"\"\n    if not isinstance(bs, (bytes, bytearray)):\n        raise TypeError(\"quote_from_bytes() expected bytes\")\n    if not bs:\n        return ''\n    if isinstance(safe, str):\n        # Normalize 'safe' by converting to bytes and removing non-ASCII chars\n        safe = safe.encode('ascii', 'ignore')\n    else:\n        safe = bytes([c for c in safe if c < 128])\n    if not bs.rstrip(_ALWAYS_SAFE_BYTES + safe):\n        return bs.decode()\n    try:\n        quoter = _safe_quoters[safe]\n    except KeyError:\n        _safe_quoters[safe] = quoter = Quoter(safe).__getitem__\n    return ''.join([quoter(char) for char in bs])\n\ndef urlencode(query, doseq=False, safe='', encoding=None, errors=None,\n              quote_via=quote_plus):\n    \"\"\"Encode a dict or sequence of two-element tuples into a URL query string.\n\n    If any values in the query arg are sequences and doseq is true, each\n    sequence element is converted to a separate parameter.\n\n    If the query arg is a sequence of two-element tuples, the order of the\n    parameters in the output will match the order of parameters in the\n    input.\n\n    The components of a query arg may each be either a string or a bytes type.\n\n    The safe, encoding, and errors parameters are passed down to the function\n    specified by quote_via (encoding and errors only if a component is a str).\n    \"\"\"\n\n    if hasattr(query, \"items\"):\n        query = query.items()\n    else:\n        # It's a bother at times that strings and string-like objects are\n        # sequences.\n        try:\n            # non-sequence items should not work with len()\n            # non-empty strings will fail this\n            if len(query) and not isinstance(query[0], tuple):\n                raise TypeError\n            # Zero-length sequences of all types will get here and succeed,\n            # but that's a minor nit.  Since the original implementation\n            # allowed empty dicts that type of behavior probably should be\n            # preserved for consistency\n        except TypeError:\n            ty, va, tb = sys.exc_info()\n            raise TypeError(\"not a valid non-string sequence \"\n                            \"or mapping object\").with_traceback(tb)\n\n    l = []\n    if not doseq:\n        for k, v in query:\n            if isinstance(k, bytes):\n                k = quote_via(k, safe)\n            else:\n                k = quote_via(str(k), safe, encoding, errors)\n\n            if isinstance(v, bytes):\n                v = quote_via(v, safe)\n            else:\n                v = quote_via(str(v), safe, encoding, errors)\n            l.append(k + '=' + v)\n    else:\n        for k, v in query:\n            if isinstance(k, bytes):\n                k = quote_via(k, safe)\n            else:\n                k = quote_via(str(k), safe, encoding, errors)\n\n            if isinstance(v, bytes):\n                v = quote_via(v, safe)\n                l.append(k + '=' + v)\n            elif isinstance(v, str):\n                v = quote_via(v, safe, encoding, errors)\n                l.append(k + '=' + v)\n            else:\n                try:\n                    # Is this a sufficient test for sequence-ness?\n                    x = len(v)\n                except TypeError:\n                    # not a sequence\n                    v = quote_via(str(v), safe, encoding, errors)\n                    l.append(k + '=' + v)\n                else:\n                    # loop over the sequence\n                    for elt in v:\n                        if isinstance(elt, bytes):\n                            elt = quote_via(elt, safe)\n                        else:\n                            elt = quote_via(str(elt), safe, encoding, errors)\n                        l.append(k + '=' + elt)\n    return '&'.join(l)\n\n\ndef to_bytes(url):\n    warnings.warn(\"urllib.parse.to_bytes() is deprecated as of 3.8\",\n                  DeprecationWarning, stacklevel=2)\n    return _to_bytes(url)\n\n\ndef _to_bytes(url):\n    \"\"\"to_bytes(u\"URL\") --> 'URL'.\"\"\"\n    # Most URL schemes require ASCII. If that changes, the conversion\n    # can be relaxed.\n    # XXX get rid of to_bytes()\n    if isinstance(url, str):\n        try:\n            url = url.encode(\"ASCII\").decode()\n        except UnicodeError:\n            raise UnicodeError(\"URL \" + repr(url) +\n                               \" contains non-ASCII characters\")\n    return url\n\n\ndef unwrap(url):\n    \"\"\"Transform a string like '<URL:scheme://host/path>' into 'scheme://host/path'.\n\n    The string is returned unchanged if it's not a wrapped URL.\n    \"\"\"\n    url = str(url).strip()\n    if url[:1] == '<' and url[-1:] == '>':\n        url = url[1:-1].strip()\n    if url[:4] == 'URL:':\n        url = url[4:].strip()\n    return url\n\n\ndef splittype(url):\n    warnings.warn(\"urllib.parse.splittype() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splittype(url)\n\n\n_typeprog = None\ndef _splittype(url):\n    \"\"\"splittype('type:opaquestring') --> 'type', 'opaquestring'.\"\"\"\n    global _typeprog\n    if _typeprog is None:\n        _typeprog = re.compile('([^/:]+):(.*)', re.DOTALL)\n\n    match = _typeprog.match(url)\n    if match:\n        scheme, data = match.groups()\n        return scheme.lower(), data\n    return None, url\n\n\ndef splithost(url):\n    warnings.warn(\"urllib.parse.splithost() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splithost(url)\n\n\n_hostprog = None\ndef _splithost(url):\n    \"\"\"splithost('//host[:port]/path') --> 'host[:port]', '/path'.\"\"\"\n    global _hostprog\n    if _hostprog is None:\n        _hostprog = re.compile('//([^/#?]*)(.*)', re.DOTALL)\n\n    match = _hostprog.match(url)\n    if match:\n        host_port, path = match.groups()\n        if path and path[0] != '/':\n            path = '/' + path\n        return host_port, path\n    return None, url\n\n\ndef splituser(host):\n    warnings.warn(\"urllib.parse.splituser() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splituser(host)\n\n\ndef _splituser(host):\n    \"\"\"splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'.\"\"\"\n    user, delim, host = host.rpartition('@')\n    return (user if delim else None), host\n\n\ndef splitpasswd(user):\n    warnings.warn(\"urllib.parse.splitpasswd() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitpasswd(user)\n\n\ndef _splitpasswd(user):\n    \"\"\"splitpasswd('user:passwd') -> 'user', 'passwd'.\"\"\"\n    user, delim, passwd = user.partition(':')\n    return user, (passwd if delim else None)\n\n\ndef splitport(host):\n    warnings.warn(\"urllib.parse.splitport() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitport(host)\n\n\n# splittag('/path#tag') --> '/path', 'tag'\n_portprog = None\ndef _splitport(host):\n    \"\"\"splitport('host:port') --> 'host', 'port'.\"\"\"\n    global _portprog\n    if _portprog is None:\n        _portprog = re.compile('(.*):([0-9]*)$', re.DOTALL)\n\n    match = _portprog.match(host)\n    if match:\n        host, port = match.groups()\n        if port:\n            return host, port\n    return host, None\n\n\ndef splitnport(host, defport=-1):\n    warnings.warn(\"urllib.parse.splitnport() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitnport(host, defport)\n\n\ndef _splitnport(host, defport=-1):\n    \"\"\"Split host and port, returning numeric port.\n    Return given default port if no ':' found; defaults to -1.\n    Return numerical port if a valid number are found after ':'.\n    Return None if ':' but not a valid number.\"\"\"\n    host, delim, port = host.rpartition(':')\n    if not delim:\n        host = port\n    elif port:\n        try:\n            nport = int(port)\n        except ValueError:\n            nport = None\n        return host, nport\n    return host, defport\n\n\ndef splitquery(url):\n    warnings.warn(\"urllib.parse.splitquery() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitquery(url)\n\n\ndef _splitquery(url):\n    \"\"\"splitquery('/path?query') --> '/path', 'query'.\"\"\"\n    path, delim, query = url.rpartition('?')\n    if delim:\n        return path, query\n    return url, None\n\n\ndef splittag(url):\n    warnings.warn(\"urllib.parse.splittag() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splittag(url)\n\n\ndef _splittag(url):\n    \"\"\"splittag('/path#tag') --> '/path', 'tag'.\"\"\"\n    path, delim, tag = url.rpartition('#')\n    if delim:\n        return path, tag\n    return url, None\n\n\ndef splitattr(url):\n    warnings.warn(\"urllib.parse.splitattr() is deprecated as of 3.8, \"\n                  \"use urllib.parse.urlparse() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitattr(url)\n\n\ndef _splitattr(url):\n    \"\"\"splitattr('/path;attr1=value1;attr2=value2;...') ->\n        '/path', ['attr1=value1', 'attr2=value2', ...].\"\"\"\n    words = url.split(';')\n    return words[0], words[1:]\n\n\ndef splitvalue(attr):\n    warnings.warn(\"urllib.parse.splitvalue() is deprecated as of 3.8, \"\n                  \"use urllib.parse.parse_qsl() instead\",\n                  DeprecationWarning, stacklevel=2)\n    return _splitvalue(attr)\n\n\ndef _splitvalue(attr):\n    \"\"\"splitvalue('attr=value') --> 'attr', 'value'.\"\"\"\n    attr, delim, value = attr.partition('=')\n    return attr, (value if delim else None)\n", 1145], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py": ["from __future__ import nested_scopes\n\nimport os\nimport traceback\n\nimport pydevd_file_utils\n\ntry:\n    from urllib import quote\nexcept:\n    from urllib.parse import quote  # @UnresolvedImport\n\ntry:\n    from collections import OrderedDict\nexcept:\n    OrderedDict = dict\n\nimport inspect\nfrom _pydevd_bundle.pydevd_constants import BUILTINS_MODULE_NAME, IS_PY38_OR_GREATER, dict_iter_items, get_global_debugger, IS_PY3K, LOAD_VALUES_POLICY, \\\n    ValuesPolicy\nimport sys\nfrom _pydev_bundle import pydev_log\nfrom _pydev_imps._pydev_saved_modules import threading\n\n\ndef _normpath(filename):\n    return pydevd_file_utils.get_abs_path_real_path_and_base_from_file(filename)[0]\n\n\ndef save_main_module(file, module_name):\n    # patch provided by: Scott Schlesier - when script is run, it does not\n    # use globals from pydevd:\n    # This will prevent the pydevd script from contaminating the namespace for the script to be debugged\n    # pretend pydevd is not the main module, and\n    # convince the file to be debugged that it was loaded as main\n    sys.modules[module_name] = sys.modules['__main__']\n    sys.modules[module_name].__name__ = module_name\n\n    try:\n        from importlib.machinery import ModuleSpec\n        from importlib.util import module_from_spec\n        m = module_from_spec(ModuleSpec('__main__', loader=None))\n    except:\n        # A fallback for Python <= 3.4\n        from imp import new_module\n        m = new_module('__main__')\n\n    sys.modules['__main__'] = m\n    orig_module = sys.modules[module_name]\n    for attr in ['__loader__', '__spec__']:\n        if hasattr(orig_module, attr):\n            orig_attr = getattr(orig_module, attr)\n            setattr(m, attr, orig_attr)\n    m.__file__ = file\n\n    return m\n\n\ndef to_number(x):\n    if is_string(x):\n        try:\n            n = float(x)\n            return n\n        except ValueError:\n            pass\n\n        l = x.find('(')\n        if l != -1:\n            y = x[0:l - 1]\n            # print y\n            try:\n                n = float(y)\n                return n\n            except ValueError:\n                pass\n    return None\n\n\ndef compare_object_attrs_key(x):\n    if '__len__' == x:\n        # __len__ should appear after other attributes in a list.\n        num = 99999999\n    else:\n        num = to_number(x)\n    if num is not None:\n        return 1, num\n    else:\n        return -1, to_string(x)\n\n\n\nif IS_PY3K:\n\n    def is_string(x):\n        return isinstance(x, str)\n\nelse:\n\n    def is_string(x):\n        return isinstance(x, basestring)\n\n\ndef to_string(x):\n    if is_string(x):\n        return x\n    else:\n        return str(x)\n\n\ndef print_exc():\n    if traceback:\n        traceback.print_exc()\n\n\nif IS_PY3K:\n\n    def quote_smart(s, safe='/'):\n        return quote(s, safe)\n\nelse:\n\n    def quote_smart(s, safe='/'):\n        if isinstance(s, unicode):\n            s = s.encode('utf-8')\n\n        return quote(s, safe)\n\n\ndef get_clsname_for_code(code, frame):\n    clsname = None\n    if len(code.co_varnames) > 0:\n        # We are checking the first argument of the function\n        # (`self` or `cls` for methods).\n        first_arg_name = code.co_varnames[0]\n        if first_arg_name in frame.f_locals:\n            first_arg_obj = frame.f_locals[first_arg_name]\n            if inspect.isclass(first_arg_obj):  # class method\n                first_arg_class = first_arg_obj\n            else:  # instance method\n                first_arg_class = first_arg_obj.__class__\n            func_name = code.co_name\n            if hasattr(first_arg_class, func_name):\n                method = getattr(first_arg_class, func_name)\n                func_code = None\n                if hasattr(method, 'func_code'):  # Python2\n                    func_code = method.func_code\n                elif hasattr(method, '__code__'):  # Python3\n                    func_code = method.__code__\n                if func_code and func_code == code:\n                    clsname = first_arg_class.__name__\n\n    return clsname\n\n\n_PROJECT_ROOTS_CACHE = []\n_LIBRARY_ROOTS_CACHE = []\n_FILENAME_TO_IN_SCOPE_CACHE = {}\n\n\ndef _convert_to_str_and_clear_empty(roots):\n    if sys.version_info[0] <= 2:\n        # In py2 we need bytes for the files.\n        roots = [\n            root if not isinstance(root, unicode) else root.encode(sys.getfilesystemencoding())\n            for root in roots\n        ]\n\n    new_roots = []\n    for root in roots:\n        assert isinstance(root, str), '%s not str (found: %s)' % (root, type(root))\n        if root:\n            new_roots.append(root)\n    return new_roots\n\n\ndef _clear_caches_related_to_scope_changes():\n    # Clear related caches.\n    _FILENAME_TO_IN_SCOPE_CACHE.clear()\n    debugger = get_global_debugger()\n    if debugger is not None:\n        debugger.clear_skip_caches()\n\n\ndef _set_roots(roots, cache):\n    roots = _convert_to_str_and_clear_empty(roots)\n    new_roots = []\n    for root in roots:\n        new_roots.append(_normpath(root))\n    cache.append(new_roots)\n    # Leave only the last one added.\n    del cache[:-1]\n    _clear_caches_related_to_scope_changes()\n    return new_roots\n\n\ndef _get_roots(cache, env_var, set_when_not_cached, get_default_val=None):\n    if not cache:\n        roots = os.getenv(env_var, None)\n        if roots is not None:\n            roots = roots.split(os.pathsep)\n        else:\n            if not get_default_val:\n                roots = []\n            else:\n                roots = get_default_val()\n        if not roots:\n            pydev_log.warn('%s being set to empty list.' % (env_var,))\n        set_when_not_cached(roots)\n    return cache[-1]  # returns the roots with case normalized\n\n\ndef _get_default_library_roots():\n    # Provide sensible defaults if not in env vars.\n    import site\n    roots = [sys.prefix]\n    if hasattr(sys, 'base_prefix'):\n        roots.append(sys.base_prefix)\n    if hasattr(sys, 'real_prefix'):\n        roots.append(sys.real_prefix)\n\n    if hasattr(site, 'getusersitepackages'):\n        site_paths = site.getusersitepackages()\n        if isinstance(site_paths, (list, tuple)):\n            for site_path in site_paths:\n                roots.append(site_path)\n        else:\n            roots.append(site_paths)\n\n    if hasattr(site, 'getsitepackages'):\n        site_paths = site.getsitepackages()\n        if isinstance(site_paths, (list, tuple)):\n            for site_path in site_paths:\n                roots.append(site_path)\n        else:\n            roots.append(site_paths)\n\n    for path in sys.path:\n        if os.path.exists(path) and os.path.basename(path) == 'site-packages':\n            roots.append(path)\n\n    return sorted(set(roots))\n\n\n# --- Project roots\ndef set_project_roots(project_roots):\n    project_roots = _set_roots(project_roots, _PROJECT_ROOTS_CACHE)\n    pydev_log.debug(\"IDE_PROJECT_ROOTS %s\\n\" % project_roots)\n\n\ndef _get_project_roots(project_roots_cache=_PROJECT_ROOTS_CACHE):\n    return _get_roots(project_roots_cache, 'IDE_PROJECT_ROOTS', set_project_roots)\n\n\n# --- Library roots\ndef set_library_roots(roots):\n    roots = _set_roots(roots, _LIBRARY_ROOTS_CACHE)\n    pydev_log.debug(\"LIBRARY_ROOTS %s\\n\" % roots)\n\n\ndef _get_library_roots(library_roots_cache=_LIBRARY_ROOTS_CACHE):\n    return _get_roots(library_roots_cache, 'LIBRARY_ROOTS', set_library_roots, _get_default_library_roots)\n\n\ndef in_project_roots(filename, filename_to_in_scope_cache=_FILENAME_TO_IN_SCOPE_CACHE):\n    # Note: the filename_to_in_scope_cache is the same instance among the many calls to the method\n    try:\n        return filename_to_in_scope_cache[filename]\n    except:\n        project_roots = _get_project_roots()\n        original_filename = filename\n        if not filename.endswith('>'):\n            filename = _normpath(filename)\n\n        found_in_project = []\n        for root in project_roots:\n            if root and filename.startswith(root):\n                found_in_project.append(root)\n\n        found_in_library = []\n        library_roots = _get_library_roots()\n        for root in library_roots:\n            if root and filename.startswith(root):\n                found_in_library.append(root)\n\n        if not project_roots:\n            # If we have no project roots configured, consider it being in the project\n            # roots if it's not found in site-packages (because we have defaults for those\n            # and not the other way around).\n            if filename.endswith('>'):\n                in_project = False\n            else:\n                in_project = not found_in_library\n        else:\n            in_project = False\n            if found_in_project:\n                if not found_in_library:\n                    in_project = True\n                else:\n                    # Found in both, let's see which one has the bigger path matched.\n                    if max(len(x) for x in found_in_project) > max(len(x) for x in found_in_library):\n                        in_project = True\n\n        filename_to_in_scope_cache[original_filename] = in_project\n        return in_project\n\n\ndef is_exception_trace_in_project_scope(trace):\n    if trace is None:\n        return False\n    elif in_project_roots(trace.tb_frame.f_code.co_filename):\n        return True\n    else:\n        while trace is not None:\n            if not in_project_roots(trace.tb_frame.f_code.co_filename):\n                return False\n            trace = trace.tb_next\n        return True\n\n\ndef is_top_level_trace_in_project_scope(trace):\n    if trace is not None and trace.tb_next is not None:\n        return is_exception_trace_in_project_scope(trace) and not is_exception_trace_in_project_scope(trace.tb_next)\n    return is_exception_trace_in_project_scope(trace)\n\n\ndef is_test_item_or_set_up_caller(trace):\n    \"\"\"Check if the frame is the test item or set up caller.\n\n    A test function caller is a function that calls actual test code which can be, for example,\n    `unittest.TestCase` test method or function `pytest` assumes to be a test. A caller function\n    is the one we want to trace to catch failed test events. Tracing test functions\n    themselves is not possible because some exceptions can be caught in the test code, and\n    we are interested only in exceptions that are propagated to the test framework level.\n    \"\"\"\n    if not trace:\n        return False\n\n    frame = trace.tb_frame\n\n    abs_path, _, _ = pydevd_file_utils.get_abs_path_real_path_and_base_from_frame(frame)\n    if in_project_roots(abs_path):\n        # We are interested in exceptions made it to the test framework scope.\n        return False\n\n    if not trace.tb_next:\n        # This can happen when the exception has been raised inside a test item or set up caller.\n        return False\n\n    if not _is_next_stack_trace_in_project_roots(trace):\n        # The next stack frame must be the frame of a project scope function, otherwise we risk stopping\n        # at a line a few times since multiple test framework functions we are looking for may appear in the stack.\n        return False\n\n    # Set up and tear down methods can be checked immediately, since they are shared by both `pytest` and `unittest`.\n    unittest_set_up_and_tear_down_methods = ('_callSetUp', '_callTearDown')\n    if frame.f_code.co_name in unittest_set_up_and_tear_down_methods:\n        return True\n\n    # It is important to check if the tests are run with `pytest` first because it can run `unittest` code\n    # internally. This may lead to stopping on  broken tests twice: one in the `pytest` test runner\n    # and second in the `unittest` runner.\n    is_pytest = False\n\n    f = frame\n    while f:\n        # noinspection SpellCheckingInspection\n        if f.f_code.co_name == 'pytest_cmdline_main':\n            is_pytest = True\n        f = f.f_back\n\n    unittest_caller_names = ['_callTestMethod', 'runTest', 'run']\n    if IS_PY3K:\n        unittest_caller_names.append('subTest')\n\n    if is_pytest:\n        # noinspection SpellCheckingInspection\n        if frame.f_code.co_name in ('pytest_pyfunc_call', 'call_fixture_func', '_eval_scope_callable', '_teardown_yield_fixture'):\n            return True\n        else:\n            return frame.f_code.co_name in unittest_caller_names\n\n    else:\n        import unittest\n        test_case_obj = frame.f_locals.get('self')\n\n        # Check for `_FailedTest` is important to detect cases when tests cannot be run on the first place,\n        # e.g. there was an import error in the test module. Can happen both in Python 3.8 and earlier versions.\n        if isinstance(test_case_obj, getattr(getattr(unittest, 'loader', None), '_FailedTest', None)):\n            return False\n\n        if frame.f_code.co_name in unittest_caller_names:\n            # unittest and nose\n            return True\n\n    return False\n\n\ndef _is_next_stack_trace_in_project_roots(trace):\n    if trace and trace.tb_next and trace.tb_next.tb_frame:\n        frame = trace.tb_next.tb_frame\n        return in_project_roots(pydevd_file_utils.get_abs_path_real_path_and_base_from_frame(frame)[0])\n    return False\n\n\n# noinspection SpellCheckingInspection\ndef should_stop_on_failed_test(exc_info):\n    \"\"\"Check if the debugger should stop on failed test. Some failed tests can be marked as expected failures\n    and should be ignored because of that.\n\n    :param exc_info: exception type, value, and traceback\n    :return: `False` if test is marked as an expected failure, ``True`` otherwise.\n    \"\"\"\n    exc_type, _, trace = exc_info\n\n    # unittest\n    test_item = trace.tb_frame.f_locals.get('method') if IS_PY38_OR_GREATER else trace.tb_frame.f_locals.get('testMethod')\n    if test_item:\n        return not getattr(test_item, '__unittest_expecting_failure__', False)\n\n    # pytest\n    testfunction = trace.tb_frame.f_locals.get('testfunction')\n    if testfunction and hasattr(testfunction, 'pytestmark'):\n        # noinspection PyBroadException\n        try:\n            for attr in testfunction.pytestmark:\n                # noinspection PyUnresolvedReferences\n                if attr.name == 'xfail':\n                    # noinspection PyUnresolvedReferences\n                    exc_to_ignore = attr.kwargs.get('raises')\n                    if not exc_to_ignore:\n                        # All exceptions should be ignored, if no type is specified.\n                        return False\n                    elif hasattr(exc_to_ignore, '__iter__'):\n                        return exc_type not in exc_to_ignore\n                    else:\n                        return exc_type is not exc_to_ignore\n        except BaseException:\n            pass\n    return True\n\n\ndef is_exception_in_test_unit_can_be_ignored(exception):\n    return exception.__name__ == 'SkipTest'\n\n\ndef get_top_level_trace_in_project_scope(trace):\n    while trace:\n        if is_top_level_trace_in_project_scope(trace):\n            break\n        trace = trace.tb_next\n    return trace\n\n\ndef is_filter_enabled():\n    return os.getenv('PYDEVD_FILTERS') is not None\n\n\ndef is_filter_libraries():\n    is_filter = os.getenv('PYDEVD_FILTER_LIBRARIES') is not None\n    pydev_log.debug(\"PYDEVD_FILTER_LIBRARIES %s\\n\" % is_filter)\n    return is_filter\n\n\ndef _get_stepping_filters(filters_cache=[]):\n    if not filters_cache:\n        filters = os.getenv('PYDEVD_FILTERS', '').split(';')\n        pydev_log.debug(\"PYDEVD_FILTERS %s\\n\" % filters)\n        new_filters = []\n        for new_filter in filters:\n            new_filters.append(new_filter)\n        filters_cache.append(new_filters)\n    return filters_cache[-1]\n\n\ndef is_ignored_by_filter(filename, filename_to_ignored_by_filters_cache={}):\n    try:\n        return filename_to_ignored_by_filters_cache[filename]\n    except:\n        import fnmatch\n        for stepping_filter in _get_stepping_filters():\n            if fnmatch.fnmatch(filename, stepping_filter):\n                pydev_log.debug(\"File %s ignored by filter %s\" % (filename, stepping_filter))\n                filename_to_ignored_by_filters_cache[filename] = True\n                break\n        else:\n            filename_to_ignored_by_filters_cache[filename] = False\n\n        return filename_to_ignored_by_filters_cache[filename]\n\n\ndef get_non_pydevd_threads():\n    threads = threading.enumerate()\n    return [t for t in threads if t and not getattr(t, 'is_pydev_daemon_thread', False)]\n\n\ndef dump_threads(stream=None):\n    '''\n    Helper to dump thread info.\n    '''\n    if stream is None:\n        stream = sys.stderr\n    thread_id_to_name = {}\n    try:\n        for t in threading.enumerate():\n            thread_id_to_name[t.ident] = '%s  (daemon: %s, pydevd thread: %s)' % (\n                t.name, t.daemon, getattr(t, 'is_pydev_daemon_thread', False))\n    except:\n        pass\n\n    from _pydevd_bundle.pydevd_additional_thread_info_regular import _current_frames\n\n    stream.write('===============================================================================\\n')\n    stream.write('Threads running\\n')\n    stream.write('================================= Thread Dump =================================\\n')\n    stream.flush()\n\n    for thread_id, stack in _current_frames().items():\n        stream.write('\\n-------------------------------------------------------------------------------\\n')\n        stream.write(\" Thread %s\" % thread_id_to_name.get(thread_id, thread_id))\n        stream.write('\\n\\n')\n\n        for i, (filename, lineno, name, line) in enumerate(traceback.extract_stack(stack)):\n\n            stream.write(' File \"%s\", line %d, in %s\\n' % (filename, lineno, name))\n            if line:\n                stream.write(\"   %s\\n\" % (line.strip()))\n\n            if i == 0 and 'self' in stack.f_locals:\n                stream.write('   self: ')\n                try:\n                    stream.write(str(stack.f_locals['self']))\n                except:\n                    stream.write('Unable to get str of: %s' % (type(stack.f_locals['self']),))\n                stream.write('\\n')\n        stream.flush()\n\n    stream.write('\\n=============================== END Thread Dump ===============================')\n    stream.flush()\n\n\ndef take_first_n_coll_elements(coll, n):\n    if coll.__class__ in (list, tuple):\n        return coll[:n]\n    elif coll.__class__ in (set, frozenset):\n        buf = []\n        for i, x in enumerate(coll):\n            if i >= n:\n                break\n            buf.append(x)\n        return type(coll)(buf)\n    elif coll.__class__ in (dict, OrderedDict):\n        ret = type(coll)()\n        for i, (k, v) in enumerate(dict_iter_items(coll)):\n            if i >= n:\n                break\n            ret[k] = v\n        return ret\n    else:\n        raise TypeError(\"Unsupported collection type: '%s'\" % str(coll.__class__))\n\n\nclass VariableWithOffset(object):\n    def __init__(self, data, offset):\n        self.data, self.offset = data, offset\n\n\ndef get_var_and_offset(var):\n    if isinstance(var, VariableWithOffset):\n        return var.data, var.offset\n    return var, 0\n\n\ndef is_pandas_container(type_qualifier, var_type, var):\n    return var_type in (\"DataFrame\", \"Series\") and type_qualifier.startswith(\"pandas\") and hasattr(var, \"shape\")\n\n\ndef is_numpy_container(type_qualifier, var_type, var):\n    return var_type == \"ndarray\" and type_qualifier == \"numpy\" and hasattr(var, \"shape\")\n\n\ndef is_builtin(x):\n    return getattr(x, '__module__', None) == BUILTINS_MODULE_NAME\n\n\ndef is_numpy(x):\n    if not getattr(x, '__module__', None) == 'numpy':\n        return False\n    type_name = x.__name__\n    return type_name == 'dtype' or type_name == 'bool_' or type_name == 'str_' or 'int' in type_name or 'uint' in type_name \\\n           or 'float' in type_name or 'complex' in type_name\n\n\ndef should_evaluate_full_value(val):\n    return LOAD_VALUES_POLICY == ValuesPolicy.SYNC \\\n           or ((is_builtin(type(val)) or is_numpy(type(val))) and not isinstance(val, (list, tuple, dict, set, frozenset))) \\\n           or (is_in_unittests_debugging_mode() and isinstance(val, Exception))\n\n\ndef should_evaluate_shape():\n    return LOAD_VALUES_POLICY != ValuesPolicy.ON_DEMAND\n\n\ndef _series_to_str(s, max_items):\n    res = []\n    s = s[:max_items]\n    for item in s.iteritems():\n        # item: (index, value)\n        res.append(str(item))\n    return ' '.join(res)\n\n\ndef _df_to_str(value):\n    # Avoid using df.iteritems() or df.values[i], because it works very slow for large data frames\n    # df.__str__() is already optimised and works fast enough\n    res = []\n    rows = value.split('\\n')\n    for (i, r) in enumerate(rows):\n        if i == 0:\n            res.append(r.strip())\n        else:\n            res.append(\"[%s]\" % r)\n    return ' '.join(res)\n\n\ndef pandas_to_str(df, type_name, str_value, max_items):\n    try:\n        if type_name == \"Series\":\n            return _series_to_str(df, max_items)\n        elif type_name == \"DataFrame\":\n            return _df_to_str(str_value)\n        else:\n            return str(df)\n    except Exception as e:\n        pydev_log.warn(\"Failed to format pandas variable: \" + str(e))\n        return str(df)\n\n\ndef format_numpy_array(num_array, max_items):\n    return str(num_array[:max_items]).replace('\\n', ',').strip()\n\n\ndef is_in_unittests_debugging_mode():\n    debugger = get_global_debugger()\n    if debugger:\n        return debugger.stop_on_failed_tests\n", 645], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py": ["import sys\n\n\ndef find_cached_module(mod_name):\n    return sys.modules.get(mod_name, None)\n\ndef find_mod_attr(mod_name, attr):\n    mod = find_cached_module(mod_name)\n    if mod is None:\n        return None\n    return getattr(mod, attr, None)\n\n\ndef find_class_name(val):\n    class_name = str(val.__class__)\n    if class_name.find('.') != -1:\n        class_name = class_name.split('.')[-1]\n\n    elif class_name.find(\"'\") != -1: #does not have '.' (could be something like <type 'int'>)\n        class_name = class_name[class_name.index(\"'\") + 1:]\n\n    if class_name.endswith(\"'>\"):\n        class_name = class_name[:-2]\n\n    return class_name\n\n", 26], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py": ["from _pydevd_bundle.pydevd_constants import IS_PYCHARM\nfrom _pydevd_bundle.pydevd_extension_api import TypeResolveProvider, StrPresentationProvider\nfrom _pydevd_bundle.pydevd_resolver import defaultResolver, MAX_ITEMS_TO_HANDLE, TOO_LARGE_ATTR, TOO_LARGE_MSG\nfrom _pydevd_bundle.pydevd_utils import get_var_and_offset, format_numpy_array\nfrom .pydevd_helpers import find_mod_attr\n\nimport inspect\n\ntry:\n    from collections import OrderedDict\nexcept:\n    OrderedDict = dict\n\n\nDEFAULT_PRECISION = 5\n\n\n# =======================================================================================================================\n# NdArrayResolver\n# =======================================================================================================================\nclass NdArrayResolver: pass\n\n\nclass NdArrayItemsContainer: pass\n\n\nclass NDArrayTypeResolveProvider(object):\n    def can_provide(self, type_object, type_name):\n        nd_array = find_mod_attr('numpy', 'ndarray')\n        return nd_array is not None and inspect.isclass(type_object) and issubclass(type_object, nd_array)\n\n    '''\n       This resolves a numpy ndarray returning some metadata about the NDArray\n   '''\n\n    def is_numeric(self, obj):\n        if not hasattr(obj, 'dtype'):\n            return False\n        return obj.dtype.kind in 'biufc'\n\n    def round_if_possible(self, obj):\n        try:\n            return obj.round(DEFAULT_PRECISION)\n        except TypeError:\n            return obj\n\n    def resolve(self, obj, attribute):\n        if attribute == '__internals__':\n            if not IS_PYCHARM:\n                return defaultResolver.get_dictionary(obj)\n        if attribute == 'min':\n            if self.is_numeric(obj):\n                return obj.min()\n            else:\n                return None\n        if attribute == 'max':\n            if self.is_numeric(obj):\n                return obj.max()\n            else:\n                return None\n        if attribute == 'shape':\n            return obj.shape\n        if attribute == 'dtype':\n            return obj.dtype\n        if attribute == 'size':\n            return obj.size\n        if attribute.startswith('['):\n            container = NdArrayItemsContainer()\n            i = 0\n            format_str = '%0' + str(int(len(str(len(obj))))) + 'd'\n            for item in obj:\n                setattr(container, format_str % i, item)\n                i += 1\n                if i > MAX_ITEMS_TO_HANDLE:\n                    setattr(container, TOO_LARGE_ATTR, TOO_LARGE_MSG)\n                    break\n            return container\n        if IS_PYCHARM and attribute == 'array':\n            container = NdArrayItemsContainer()\n            container.items = obj\n            return container\n        return None\n\n    def get_dictionary(self, obj):\n        ret = dict()\n        if not IS_PYCHARM:\n            ret['__internals__'] = defaultResolver.get_dictionary(obj)\n        if obj.size > 1024 * 1024:\n            ret['min'] = 'ndarray too big, calculating min would slow down debugging'\n            ret['max'] = 'ndarray too big, calculating max would slow down debugging'\n        else:\n            if self.is_numeric(obj):\n                ret['min'] = obj.min()\n                ret['max'] = obj.max()\n            else:\n                ret['min'] = 'not a numeric object'\n                ret['max'] = 'not a numeric object'\n        ret['shape'] = obj.shape\n        ret['dtype'] = obj.dtype\n        ret['size'] = obj.size\n        if IS_PYCHARM:\n            ret['array'] = NdArrayItemsContainer()\n        else:\n            ret['[0:%s] ' % (len(obj))] = list(obj[0:MAX_ITEMS_TO_HANDLE])\n        return ret\n\n\nclass NDArrayStrProvider(object):\n    def can_provide(self, type_object, type_name):\n        nd_array = find_mod_attr('numpy', 'ndarray')\n        return nd_array is not None and inspect.isclass(type_object) and issubclass(type_object, nd_array)\n\n    def get_str(self, val):\n        return format_numpy_array(val, MAX_ITEMS_TO_HANDLE)\n\n\nclass NdArrayItemsContainerProvider(object):\n    def can_provide(self, type_object, type_name):\n        return inspect.isclass(type_object) and issubclass(type_object, NdArrayItemsContainer)\n\n    def resolve(self, obj, attribute):\n        if attribute == '__len__':\n            return None\n        return obj.items[int(attribute)]\n\n    def get_dictionary(self, obj):\n        obj, offset = get_var_and_offset(obj)\n\n        l = len(obj.items)\n        d = OrderedDict()\n\n        format_str = '%0' + str(int(len(str(l)))) + 'd'\n\n        i = offset\n        for item in obj.items[offset:offset + MAX_ITEMS_TO_HANDLE]:\n            d[format_str % i] = item\n            i += 1\n\n            if i > MAX_ITEMS_TO_HANDLE + offset:\n                break\n        d['__len__'] = l\n        return d\n\n\nimport sys\n\nif not sys.platform.startswith(\"java\"):\n    TypeResolveProvider.register(NDArrayTypeResolveProvider)\n    if IS_PYCHARM:\n        TypeResolveProvider.register(NdArrayItemsContainerProvider)\n        StrPresentationProvider.register(NDArrayStrProvider)\n", 151], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py": ["from _pydevd_bundle.pydevd_extension_api import StrPresentationProvider\nfrom .pydevd_helpers import find_mod_attr, find_class_name\n\n\nclass DjangoFormStr(object):\n    def can_provide(self, type_object, type_name):\n        form_class = find_mod_attr('django.forms', 'Form')\n        return form_class is not None and issubclass(type_object, form_class)\n\n    def get_str(self, val):\n        return '%s: %r' % (find_class_name(val), val)\n\nimport sys\n\nif not sys.platform.startswith(\"java\"):\n    StrPresentationProvider.register(DjangoFormStr)\n", 16], "/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py": ["'''A multi-producer, multi-consumer queue.'''\n\nimport threading\nfrom collections import deque\nfrom heapq import heappush, heappop\nfrom time import monotonic as time\ntry:\n    from _queue import SimpleQueue\nexcept ImportError:\n    SimpleQueue = None\n\n__all__ = ['Empty', 'Full', 'Queue', 'PriorityQueue', 'LifoQueue', 'SimpleQueue']\n\n\ntry:\n    from _queue import Empty\nexcept ImportError:\n    class Empty(Exception):\n        'Exception raised by Queue.get(block=0)/get_nowait().'\n        pass\n\nclass Full(Exception):\n    'Exception raised by Queue.put(block=0)/put_nowait().'\n    pass\n\n\nclass Queue:\n    '''Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    '''\n\n    def __init__(self, maxsize=0):\n        self.maxsize = maxsize\n        self._init(maxsize)\n\n        # mutex must be held whenever the queue is mutating.  All methods\n        # that acquire mutex must release it before returning.  mutex\n        # is shared between the three conditions, so acquiring and\n        # releasing the conditions also acquires and releases mutex.\n        self.mutex = threading.Lock()\n\n        # Notify not_empty whenever an item is added to the queue; a\n        # thread waiting to get is notified then.\n        self.not_empty = threading.Condition(self.mutex)\n\n        # Notify not_full whenever an item is removed from the queue;\n        # a thread waiting to put is notified then.\n        self.not_full = threading.Condition(self.mutex)\n\n        # Notify all_tasks_done whenever the number of unfinished tasks\n        # drops to zero; thread waiting to join() is notified to resume\n        self.all_tasks_done = threading.Condition(self.mutex)\n        self.unfinished_tasks = 0\n\n    def task_done(self):\n        '''Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        '''\n        with self.all_tasks_done:\n            unfinished = self.unfinished_tasks - 1\n            if unfinished <= 0:\n                if unfinished < 0:\n                    raise ValueError('task_done() called too many times')\n                self.all_tasks_done.notify_all()\n            self.unfinished_tasks = unfinished\n\n    def join(self):\n        '''Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        '''\n        with self.all_tasks_done:\n            while self.unfinished_tasks:\n                self.all_tasks_done.wait()\n\n    def qsize(self):\n        '''Return the approximate size of the queue (not reliable!).'''\n        with self.mutex:\n            return self._qsize()\n\n    def empty(self):\n        '''Return True if the queue is empty, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() == 0\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can grow before the result of empty() or\n        qsize() can be used.\n\n        To create code that needs to wait for all queued tasks to be\n        completed, the preferred technique is to use the join() method.\n        '''\n        with self.mutex:\n            return not self._qsize()\n\n    def full(self):\n        '''Return True if the queue is full, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() >= n\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can shrink before the result of full() or\n        qsize() can be used.\n        '''\n        with self.mutex:\n            return 0 < self.maxsize <= self._qsize()\n\n    def put(self, item, block=True, timeout=None):\n        '''Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        '''\n        with self.not_full:\n            if self.maxsize > 0:\n                if not block:\n                    if self._qsize() >= self.maxsize:\n                        raise Full\n                elif timeout is None:\n                    while self._qsize() >= self.maxsize:\n                        self.not_full.wait()\n                elif timeout < 0:\n                    raise ValueError(\"'timeout' must be a non-negative number\")\n                else:\n                    endtime = time() + timeout\n                    while self._qsize() >= self.maxsize:\n                        remaining = endtime - time()\n                        if remaining <= 0.0:\n                            raise Full\n                        self.not_full.wait(remaining)\n            self._put(item)\n            self.unfinished_tasks += 1\n            self.not_empty.notify()\n\n    def get(self, block=True, timeout=None):\n        '''Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        '''\n        with self.not_empty:\n            if not block:\n                if not self._qsize():\n                    raise Empty\n            elif timeout is None:\n                while not self._qsize():\n                    self.not_empty.wait()\n            elif timeout < 0:\n                raise ValueError(\"'timeout' must be a non-negative number\")\n            else:\n                endtime = time() + timeout\n                while not self._qsize():\n                    remaining = endtime - time()\n                    if remaining <= 0.0:\n                        raise Empty\n                    self.not_empty.wait(remaining)\n            item = self._get()\n            self.not_full.notify()\n            return item\n\n    def put_nowait(self, item):\n        '''Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        '''\n        return self.put(item, block=False)\n\n    def get_nowait(self):\n        '''Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        '''\n        return self.get(block=False)\n\n    # Override these methods to implement other queue organizations\n    # (e.g. stack or priority queue).\n    # These will only be called with appropriate locks held\n\n    # Initialize the queue representation\n    def _init(self, maxsize):\n        self.queue = deque()\n\n    def _qsize(self):\n        return len(self.queue)\n\n    # Put a new item in the queue\n    def _put(self, item):\n        self.queue.append(item)\n\n    # Get an item from the queue\n    def _get(self):\n        return self.queue.popleft()\n\n\nclass PriorityQueue(Queue):\n    '''Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    '''\n\n    def _init(self, maxsize):\n        self.queue = []\n\n    def _qsize(self):\n        return len(self.queue)\n\n    def _put(self, item):\n        heappush(self.queue, item)\n\n    def _get(self):\n        return heappop(self.queue)\n\n\nclass LifoQueue(Queue):\n    '''Variant of Queue that retrieves most recently added entries first.'''\n\n    def _init(self, maxsize):\n        self.queue = []\n\n    def _qsize(self):\n        return len(self.queue)\n\n    def _put(self, item):\n        self.queue.append(item)\n\n    def _get(self):\n        return self.queue.pop()\n\n\nclass _PySimpleQueue:\n    '''Simple, unbounded FIFO queue.\n\n    This pure Python implementation is not reentrant.\n    '''\n    # Note: while this pure Python version provides fairness\n    # (by using a threading.Semaphore which is itself fair, being based\n    #  on threading.Condition), fairness is not part of the API contract.\n    # This allows the C version to use a different implementation.\n\n    def __init__(self):\n        self._queue = deque()\n        self._count = threading.Semaphore(0)\n\n    def put(self, item, block=True, timeout=None):\n        '''Put the item on the queue.\n\n        The optional 'block' and 'timeout' arguments are ignored, as this method\n        never blocks.  They are provided for compatibility with the Queue class.\n        '''\n        self._queue.append(item)\n        self._count.release()\n\n    def get(self, block=True, timeout=None):\n        '''Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        '''\n        if timeout is not None and timeout < 0:\n            raise ValueError(\"'timeout' must be a non-negative number\")\n        if not self._count.acquire(block, timeout):\n            raise Empty\n        return self._queue.popleft()\n\n    def put_nowait(self, item):\n        '''Put an item into the queue without blocking.\n\n        This is exactly equivalent to `put(item)` and is only provided\n        for compatibility with the Queue class.\n        '''\n        return self.put(item, block=False)\n\n    def get_nowait(self):\n        '''Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        '''\n        return self.get(block=False)\n\n    def empty(self):\n        '''Return True if the queue is empty, False otherwise (not reliable!).'''\n        return len(self._queue) == 0\n\n    def qsize(self):\n        '''Return the approximate size of the queue (not reliable!).'''\n        return len(self._queue)\n\n\nif SimpleQueue is None:\n    SimpleQueue = _PySimpleQueue\n", 321], "/home/edx/.pyenv/versions/3.8.1/lib/python3.8/_weakrefset.py": ["# Access WeakSet through the weakref module.\n# This code is separated-out because it is needed\n# by abc.py to load everything else at startup.\n\nfrom _weakref import ref\n\n__all__ = ['WeakSet']\n\n\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n\n    def __enter__(self):\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\n\n\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        discard = self.data.discard\n        while l:\n            discard(l.pop())\n\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    # Caveat: the iterator will keep a strong reference to\n                    # `item` until it is resumed or closed.\n                    yield item\n\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def __reduce__(self):\n        return (self.__class__, (list(self),),\n                getattr(self, '__dict__', None))\n\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet') from None\n            item = itemref()\n            if item is not None:\n                return item\n\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n\n    def __lt__(self, other):\n        return self.data < set(map(ref, other))\n\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n\n    def __gt__(self, other):\n        return self.data > set(map(ref, other))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(map(ref, other))\n\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n\n    def __repr__(self):\n        return repr(self.data)\n", 199], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py": ["# License: EPL\nimport os\nimport sys\nimport traceback\nfrom _pydev_imps._pydev_saved_modules import threading\nfrom _pydevd_bundle.pydevd_constants import get_global_debugger, IS_WINDOWS, IS_MACOS, IS_JYTHON, IS_PY36_OR_LESSER, IS_PY38_OR_GREATER, \\\n    get_current_thread_id\nfrom _pydev_bundle import pydev_log\n\ntry:\n    xrange\nexcept:\n    xrange = range\n\n\nPYTHON_NAMES = ['python', 'jython', 'pypy']\n\n#===============================================================================\n# Things that are dependent on having the pydevd debugger\n#===============================================================================\ndef log_debug(msg):\n    pydev_log.debug(msg)\n\n\ndef log_error_once(msg):\n    pydev_log.error_once(msg)\n\n\npydev_src_dir = os.path.dirname(os.path.dirname(__file__))\n\n\ndef _get_python_c_args(host, port, indC, args, setup):\n    host_literal = \"'\" + host + \"'\" if host is not None else 'None'\n    return (\"import sys; sys.path.append(r'%s'); import pydevd; \"\n            \"pydevd.settrace(host=%s, port=%s, suspend=False, trace_only_current_thread=False, patch_multiprocessing=True); \"\n            \"from pydevd import SetupHolder; SetupHolder.setup = %s; %s\"\n            ) % (\n               pydev_src_dir,\n               host_literal,\n               port,\n               setup,\n               args[indC + 1])\n\n\ndef _get_host_port():\n    import pydevd\n    host, port = pydevd.dispatch()\n    return host, port\n\n\ndef _is_managed_arg(arg):\n    return arg.endswith('pydevd.py')\n\n\ndef _is_already_patched(args):\n    for arg in args:\n        if 'pydevd' in arg:\n            return True\n    return False\n\n\ndef _is_py3_and_has_bytes_args(args):\n    if not isinstance('', type(u'')):\n        return False\n    for arg in args:\n        if isinstance(arg, bytes):\n            return True\n    return False\n\n\ndef _on_forked_process():\n    import pydevd\n    pydevd.threadingCurrentThread().__pydevd_main_thread = True\n    pydevd.settrace_forked()\n\n\ndef _on_set_trace_for_new_thread(global_debugger):\n    if global_debugger is not None:\n        global_debugger.enable_tracing()\n\n\n#===============================================================================\n# Things related to monkey-patching\n#===============================================================================\ndef is_python_args(args):\n    return not _is_py3_and_has_bytes_args(args) and len(args) > 0 and is_python(args[0])\n\n\ndef is_executable(path):\n    return os.access(os.path.abspath(path), os.EX_OK)\n\n\ndef starts_with_python_shebang(path):\n    try:\n        with open(path) as f:\n            for line in f:\n                line = line.strip()\n                if line:\n                    for name in PYTHON_NAMES:\n                        if line.startswith('#!/usr/bin/env %s' % name):\n                            return True\n                    return False\n    except UnicodeDecodeError:\n        return False\n    except:\n        traceback.print_exc()\n        return False\n\n\ndef is_python(path):\n    if path.endswith(\"'\") or path.endswith('\"'):\n        path = path[1:len(path) - 1]\n    filename = os.path.basename(path).lower()\n    for name in PYTHON_NAMES:\n        if filename.find(name) != -1:\n            return True\n    return not IS_WINDOWS and is_executable(path) and starts_with_python_shebang(path)\n\n\ndef remove_quotes_from_args(args):\n    if sys.platform == \"win32\":\n        new_args = []\n        for x in args:\n            if len(x) > 1 and x.startswith('\"') and x.endswith('\"'):\n                x = x[1:-1]\n            new_args.append(x)\n        return new_args\n    else:\n        return args\n\n\ndef quote_args(args):\n    if sys.platform == \"win32\":\n        quoted_args = []\n        for x in args:\n            if x.startswith('\"') and x.endswith('\"'):\n                quoted_args.append(x)\n            else:\n                if ' ' in x:\n                    x = x.replace('\"', '\\\\\"')\n                    quoted_args.append('\"%s\"' % x)\n                else:\n                    quoted_args.append(x)\n        return quoted_args\n    else:\n        return args\n\n\ndef get_c_option_index(args):\n    \"\"\"\n    Get index of \"-c\" argument and check if it's interpreter's option\n    :param args: list of arguments\n    :return: index of \"-c\" if it's an interpreter's option and -1 if it doesn't exist or program's option\n    \"\"\"\n    try:\n        ind_c = args.index('-c')\n    except ValueError:\n        return -1\n    else:\n        for i in range(1, ind_c):\n            if not args[i].startswith('-'):\n                # there is an arg without \"-\" before \"-c\", so it's not an interpreter's option\n                return -1\n        return ind_c\n\n\ndef patch_args(args):\n    try:\n        log_debug(\"Patching args: %s\" % str(args))\n\n        if _is_py3_and_has_bytes_args(args):\n            warn_bytes_args()\n            return args\n\n        args = remove_quotes_from_args(args)\n\n        from pydevd import SetupHolder\n        new_args = []\n        if len(args) == 0:\n            return args\n\n        if is_python(args[0]):\n\n            for name in PYTHON_NAMES:\n                if args[0].find(name) != -1:\n                    break\n            else:\n                # Executable file with Python shebang.\n                args.insert(0, sys.executable)\n\n            ind_c = get_c_option_index(args)\n\n            if ind_c != -1:\n                if _is_already_patched(args):\n                    return args\n\n                host, port = _get_host_port()\n\n                if port is not None:\n                    new_args.extend(args)\n                    new_args[ind_c + 1] = _get_python_c_args(host, port, ind_c, args, SetupHolder.setup)\n                    new_args = quote_args(new_args)\n                    log_debug(\"Patched args: %s\" % str(new_args))\n                    return new_args\n            else:\n                # Check for Python ZIP Applications and don't patch the args for them.\n                # Assumes the first non `-<flag>` argument is what we need to check.\n                # There's probably a better way to determine this but it works for most cases.\n                continue_next = False\n                for i in range(1, len(args)):\n                    if continue_next:\n                        continue_next = False\n                        continue\n\n                    arg = args[i]\n                    if arg.startswith('-'):\n                        # Skip the next arg too if this flag expects a value.\n                        continue_next = arg in ['-m', '-W', '-X']\n                        continue\n\n                    if arg.rsplit('.')[-1] in ['zip', 'pyz', 'pyzw']:\n                        log_debug('Executing a PyZip, returning')\n                        return args\n                    break\n\n                new_args.append(args[0])\n        else:\n            log_debug(\"Process is not python, returning.\")\n            return args\n\n        i = 1\n        # Original args should be something as:\n        # ['X:\\\\pysrc\\\\pydevd.py', '--multiprocess', '--print-in-debugger-startup',\n        #  '--vm_type', 'python', '--client', '127.0.0.1', '--port', '56352', '--file', 'x:\\\\snippet1.py']\n        from _pydevd_bundle.pydevd_command_line_handling import setup_to_argv\n        SetupHolder.setup['module'] = False  # clean module param from parent process\n        original = setup_to_argv(SetupHolder.setup) + ['--file']\n        while i < len(args):\n            if args[i] == '-m':\n                # Always insert at pos == 1 (i.e.: pydevd \"--module\" --multiprocess ...)\n                original.insert(1, '--module')\n            else:\n                if args[i] == '-':\n                    # this is the marker that input is going to be from stdin for Python\n                    # for now we just disable the debugging here, don't crash but is not supported\n                    return args\n                elif args[i].startswith('-'):\n                    new_args.append(args[i])\n                else:\n                    break\n            i += 1\n\n        # Note: undoing https://github.com/Elizaveta239/PyDev.Debugger/commit/053c9d6b1b455530bca267e7419a9f63bf51cddf\n        # (i >= len(args) instead of i < len(args))\n        # in practice it'd raise an exception here and would return original args, which is not what we want... providing\n        # a proper fix for https://youtrack.jetbrains.com/issue/PY-9767 elsewhere.\n        if i >= len(args) or _is_managed_arg(args[i]):  # no need to add pydevd twice\n            log_debug(\"Patched args: %s\" % str(args))\n            return args\n\n        for x in original:\n            new_args.append(x)\n            if x == '--file':\n                break\n\n        while i < len(args):\n            new_args.append(args[i])\n            i += 1\n\n        new_args = quote_args(new_args)\n        log_debug(\"Patched args: %s\" % str(new_args))\n        return new_args\n    except:\n        traceback.print_exc()\n        return args\n\n\ndef str_to_args_windows(args):\n    # see http:#msdn.microsoft.com/en-us/library/a1y7w461.aspx\n    result = []\n\n    DEFAULT = 0\n    ARG = 1\n    IN_DOUBLE_QUOTE = 2\n\n    state = DEFAULT\n    backslashes = 0\n    buf = ''\n\n    args_len = len(args)\n    for i in xrange(args_len):\n        ch = args[i]\n        if (ch == '\\\\'):\n            backslashes += 1\n            continue\n        elif (backslashes != 0):\n            if ch == '\"':\n                while backslashes >= 2:\n                    backslashes -= 2\n                    buf += '\\\\'\n                if (backslashes == 1):\n                    if (state == DEFAULT):\n                        state = ARG\n\n                    buf += '\"'\n                    backslashes = 0\n                    continue\n                    # else fall through to switch\n            else:\n                # false alarm, treat passed backslashes literally...\n                if (state == DEFAULT):\n                    state = ARG\n\n                while backslashes > 0:\n                    backslashes -= 1\n                    buf += '\\\\'\n                    # fall through to switch\n        if ch in (' ', '\\t'):\n            if (state == DEFAULT):\n                # skip\n                continue\n            elif (state == ARG):\n                state = DEFAULT\n                result.append(buf)\n                buf = ''\n                continue\n\n        if state in (DEFAULT, ARG):\n            if ch == '\"':\n                state = IN_DOUBLE_QUOTE\n            else:\n                state = ARG\n                buf += ch\n\n        elif state == IN_DOUBLE_QUOTE:\n            if ch == '\"':\n                if (i + 1 < args_len and args[i + 1] == '\"'):\n                    # Undocumented feature in Windows:\n                    # Two consecutive double quotes inside a double-quoted argument are interpreted as\n                    # a single double quote.\n                    buf += '\"'\n                    i += 1\n                elif len(buf) == 0:\n                    # empty string on Windows platform. Account for bug in constructor of\n                    # JDK's java.lang.ProcessImpl.\n                    result.append(\"\\\"\\\"\")\n                    state = DEFAULT\n                else:\n                    state = ARG\n            else:\n                buf += ch\n\n        else:\n            raise RuntimeError('Illegal condition')\n\n    if len(buf) > 0 or state != DEFAULT:\n        result.append(buf)\n\n    return result\n\n\ndef patch_arg_str_win(arg_str):\n    args = str_to_args_windows(arg_str)\n    # Fix https://youtrack.jetbrains.com/issue/PY-9767 (args may be empty)\n    if not args or not is_python(args[0]):\n        return arg_str\n    arg_str = ' '.join(patch_args(args))\n    log_debug(\"New args: %s\" % arg_str)\n    return arg_str\n\n\ndef patch_fork_exec_executable_list(args, other_args):\n    # When calling a Python executable script with `subprocess.call` the latest uses the first argument as an executable for `fork_exec`.\n    # This leads to `subprocess.call([\"foo.py\", \"bar\", \"baz\"])` after patching the args will be transformed into something like\n    # foo.py pydevd.py --port 59043 --client 127.0.0.1 --multiproc --file foo.py bar baz.\n    # To fix the issue we need to look inside the `fork_exec` executable list and, if necessary, replace an executable script with Python.\n    i = 0\n    for arg in args:\n        i += 1\n        if arg == '--file':\n            break\n    else:\n        return other_args\n    executable_list = other_args[0]\n    if args[i].encode() in executable_list:\n        return ((sys.executable.encode(),),) + other_args[1:]\n    return other_args\n\n\n_ORIGINAL_PREFIX = 'original_'\n\n\ndef monkey_patch_module(module, funcname, create_func):\n    if hasattr(module, funcname):\n        original_name = _ORIGINAL_PREFIX + funcname\n        if not hasattr(module, original_name):\n            setattr(module, original_name, getattr(module, funcname))\n            setattr(module, funcname, create_func(original_name))\n\n\ndef monkey_patch_os(funcname, create_func):\n    monkey_patch_module(os, funcname, create_func)\n\n\ndef warn_multiproc():\n    log_error_once(\n            \"pydev debugger: New process is launching (breakpoints won't work in the new process).\\n\"\n            \"pydev debugger: To debug that process please enable 'Attach to subprocess automatically while debugging?' option in the debugger settings.\\n\")\n\n\ndef warn_bytes_args():\n    log_error_once(\n            \"pydev debugger: bytes arguments were passed to a new process creation function. Breakpoints may not work correctly.\\n\")\n\n\ndef create_warn_multiproc(original_name):\n\n    def new_warn_multiproc(*args):\n        import os\n\n        warn_multiproc()\n\n        result = getattr(os, original_name)(*args)\n\n        if original_name == _ORIGINAL_PREFIX + 'fork':\n            pid = result\n            # If automatic attaching to new processes is disabled, it is important to stop tracing in the child process. The reason is the\n            # \"forked\" instance of the debugger can potentially hit a breakpoint, which results in the process hanging.\n            if pid == 0:\n                debugger = get_global_debugger()\n                if debugger:\n                    debugger.stoptrace()\n            return pid\n        else:\n            return result\n\n    return new_warn_multiproc\n\n\ndef create_execl(original_name):\n    def new_execl(path, *args):\n        \"\"\"\n        os.execl(path, arg0, arg1, ...)\n        os.execle(path, arg0, arg1, ..., env)\n        os.execlp(file, arg0, arg1, ...)\n        os.execlpe(file, arg0, arg1, ..., env)\n        \"\"\"\n        import os\n        args = patch_args(args)\n        if is_python_args(args):\n            path = args[0]\n            send_process_will_be_substituted()\n        return getattr(os, original_name)(path, *args)\n    return new_execl\n\n\ndef create_execv(original_name):\n    def new_execv(path, args):\n        \"\"\"\n        os.execv(path, args)\n        os.execvp(file, args)\n        \"\"\"\n        import os\n        args = patch_args(args)\n        if is_python_args(args):\n            path = args[0]\n            send_process_will_be_substituted()\n        return getattr(os, original_name)(path, args)\n    return new_execv\n\n\ndef create_execve(original_name):\n    \"\"\"\n    os.execve(path, args, env)\n    os.execvpe(file, args, env)\n    \"\"\"\n    def new_execve(path, args, env):\n        import os\n        args = patch_args(args)\n        if is_python_args(args):\n            path = args[0]\n            send_process_will_be_substituted()\n        return getattr(os, original_name)(path, args, env)\n    return new_execve\n\n\ndef create_spawnl(original_name):\n    def new_spawnl(mode, path, *args):\n        \"\"\"\n        os.spawnl(mode, path, arg0, arg1, ...)\n        os.spawnlp(mode, file, arg0, arg1, ...)\n        \"\"\"\n        import os\n        args = patch_args(args)\n        send_process_created_message()\n        return getattr(os, original_name)(mode, path, *args)\n    return new_spawnl\n\n\ndef create_spawnv(original_name):\n    def new_spawnv(mode, path, args):\n        \"\"\"\n        os.spawnv(mode, path, args)\n        os.spawnvp(mode, file, args)\n        \"\"\"\n        import os\n        args = patch_args(args)\n        send_process_created_message()\n        return getattr(os, original_name)(mode, path, args)\n    return new_spawnv\n\n\ndef create_spawnve(original_name):\n    \"\"\"\n    os.spawnve(mode, path, args, env)\n    os.spawnvpe(mode, file, args, env)\n    \"\"\"\n    def new_spawnve(mode, path, args, env):\n        import os\n        args = patch_args(args)\n        send_process_created_message()\n        return getattr(os, original_name)(mode, path, args, env)\n    return new_spawnve\n\n\ndef create_posix_spawn(original_name):\n    \"\"\"\n    os.posix_spawn(path, argv, env, *, file_actions=None, ... (6 more))\n    os.posix_spawnp(path, argv, env, *, file_actions=None, ... (6 more))\n    \"\"\"\n    def new_posix_spawn(path, argv, env, **kwargs):\n        import os\n        argv = patch_args(argv)\n        send_process_created_message()\n        return getattr(os, original_name)(path, argv, env, **kwargs)\n    return new_posix_spawn\n\n\ndef create_fork_exec(original_name):\n    \"\"\"\n    _posixsubprocess.fork_exec(args, executable_list, close_fds, ... (13 more))\n    \"\"\"\n    def new_fork_exec(args, *other_args):\n        import _posixsubprocess  # @UnresolvedImport\n        args = patch_args(args)\n        send_process_created_message()\n        return getattr(_posixsubprocess, original_name)(args, *patch_fork_exec_executable_list(args, other_args))\n    return new_fork_exec\n\n\ndef create_warn_fork_exec(original_name):\n    \"\"\"\n    _posixsubprocess.fork_exec(args, executable_list, close_fds, ... (13 more))\n    \"\"\"\n    def new_warn_fork_exec(*args):\n        try:\n            import _posixsubprocess\n            warn_multiproc()\n            return getattr(_posixsubprocess, original_name)(*args)\n        except:\n            pass\n    return new_warn_fork_exec\n\n\ndef create_CreateProcess(original_name):\n    \"\"\"\n    CreateProcess(*args, **kwargs)\n    \"\"\"\n    def new_CreateProcess(app_name, cmd_line, *args):\n        try:\n            import _subprocess\n        except ImportError:\n            import _winapi as _subprocess\n        send_process_created_message()\n        return getattr(_subprocess, original_name)(app_name, patch_arg_str_win(cmd_line), *args)\n    return new_CreateProcess\n\n\ndef create_CreateProcessWarnMultiproc(original_name):\n    \"\"\"\n    CreateProcess(*args, **kwargs)\n    \"\"\"\n    def new_CreateProcess(*args):\n        try:\n            import _subprocess\n        except ImportError:\n            import _winapi as _subprocess\n        warn_multiproc()\n        return getattr(_subprocess, original_name)(*args)\n    return new_CreateProcess\n\n\ndef apply_foundation_framework_hack():\n    # Hack in order to prevent the crash on macOS - load the Foundation framework before any forking in the debugger.\n    # See: https://bugs.python.org/issue35219.\n    import ctypes\n    try:\n        ctypes.cdll.LoadLibrary('/System/Library/Frameworks/Foundation.framework/Foundation')\n    except OSError:\n        log_error_once('Failed to load the Foundation framework shared library. Debugging of code that uses `os.fork()` may not work.\\n'\n                       'Consider setting the `OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES` environment variable.')\n    else:\n        log_debug('Successfully loaded the Foundation framework shared library.')\n\n\ndef create_fork(original_name):\n    def new_fork():\n        import os\n\n        # A simple fork will result in a new python process\n        is_new_python_process = True\n        frame = sys._getframe()\n\n        while frame is not None:\n            if frame.f_code.co_name == '_execute_child' and 'subprocess' in frame.f_code.co_filename:\n                # If we're actually in subprocess.Popen creating a child, it may\n                # result in something which is not a Python process, (so, we\n                # don't want to connect with it in the forked version).\n                executable = frame.f_locals.get('executable')\n                if executable is not None:\n                    is_new_python_process = False\n                    if is_python(executable):\n                        is_new_python_process = True\n                break\n\n            frame = frame.f_back\n        frame = None  # Just make sure we don't hold on to it.\n\n        if IS_MACOS and IS_PY36_OR_LESSER:\n            is_fork_safety_disabled = os.environ.get('OBJC_DISABLE_INITIALIZE_FORK_SAFETY') == 'YES'\n            if not is_fork_safety_disabled:\n                apply_foundation_framework_hack()\n\n        child_process = getattr(os, original_name)()  # fork\n        if not child_process:\n            if is_new_python_process:\n                log_debug(\"A new child process with PID %d has been forked\" % os.getpid())\n                _on_forked_process()\n        else:\n            if is_new_python_process:\n                send_process_created_message()\n        return child_process\n    return new_fork\n\n\ndef send_process_created_message():\n    debugger = get_global_debugger()\n    if debugger is not None:\n        debugger.send_process_created_message()\n\n\ndef send_process_will_be_substituted():\n    \"\"\"Sends a message that a new process is going to be created.\n    When `PyDB` works in server mode this method also waits for the\n    response from IDE to be sure that IDE received this message.\n    \"\"\"\n    from _pydevd_bundle.pydevd_comm import get_global_debugger\n    debugger = get_global_debugger()\n    if debugger is not None:\n        debugger.send_process_will_be_substituted()\n\n\ndef patch_new_process_functions():\n    # os.execl(path, arg0, arg1, ...)\n    # os.execle(path, arg0, arg1, ..., env)\n    # os.execlp(file, arg0, arg1, ...)\n    # os.execlpe(file, arg0, arg1, ..., env)\n    # os.execv(path, args)\n    # os.execve(path, args, env)\n    # os.execvp(file, args)\n    # os.execvpe(file, args, env)\n    monkey_patch_os('execl', create_execl)\n    monkey_patch_os('execle', create_execl)\n    monkey_patch_os('execlp', create_execl)\n    monkey_patch_os('execlpe', create_execl)\n    monkey_patch_os('execv', create_execv)\n    monkey_patch_os('execve', create_execve)\n    monkey_patch_os('execvp', create_execv)\n    monkey_patch_os('execvpe', create_execve)\n\n    # os.spawnl(mode, path, ...)\n    # os.spawnle(mode, path, ..., env)\n    # os.spawnlp(mode, file, ...)\n    # os.spawnlpe(mode, file, ..., env)\n    # os.spawnv(mode, path, args)\n    # os.spawnve(mode, path, args, env)\n    # os.spawnvp(mode, file, args)\n    # os.spawnvpe(mode, file, args, env)\n\n    monkey_patch_os('spawnl', create_spawnl)\n    monkey_patch_os('spawnle', create_spawnl)\n    monkey_patch_os('spawnlp', create_spawnl)\n    monkey_patch_os('spawnlpe', create_spawnl)\n    monkey_patch_os('spawnv', create_spawnv)\n    monkey_patch_os('spawnve', create_spawnve)\n    monkey_patch_os('spawnvp', create_spawnv)\n    monkey_patch_os('spawnvpe', create_spawnve)\n\n    if IS_PY38_OR_GREATER and not IS_WINDOWS:\n        monkey_patch_os('posix_spawn', create_posix_spawn)\n        monkey_patch_os('posix_spawnp', create_posix_spawn)\n\n    if not IS_JYTHON:\n        if not IS_WINDOWS:\n            monkey_patch_os('fork', create_fork)\n            try:\n                import _posixsubprocess\n                monkey_patch_module(_posixsubprocess, 'fork_exec', create_fork_exec)\n            except ImportError:\n                pass\n        else:\n            # Windows\n            try:\n                import _subprocess\n            except ImportError:\n                import _winapi as _subprocess\n            monkey_patch_module(_subprocess, 'CreateProcess', create_CreateProcess)\n\n\ndef patch_new_process_functions_with_warning():\n    monkey_patch_os('execl', create_warn_multiproc)\n    monkey_patch_os('execle', create_warn_multiproc)\n    monkey_patch_os('execlp', create_warn_multiproc)\n    monkey_patch_os('execlpe', create_warn_multiproc)\n    monkey_patch_os('execv', create_warn_multiproc)\n    monkey_patch_os('execve', create_warn_multiproc)\n    monkey_patch_os('execvp', create_warn_multiproc)\n    monkey_patch_os('execvpe', create_warn_multiproc)\n    monkey_patch_os('spawnl', create_warn_multiproc)\n    monkey_patch_os('spawnle', create_warn_multiproc)\n    monkey_patch_os('spawnlp', create_warn_multiproc)\n    monkey_patch_os('spawnlpe', create_warn_multiproc)\n    monkey_patch_os('spawnv', create_warn_multiproc)\n    monkey_patch_os('spawnve', create_warn_multiproc)\n    monkey_patch_os('spawnvp', create_warn_multiproc)\n    monkey_patch_os('spawnvpe', create_warn_multiproc)\n\n    if IS_PY38_OR_GREATER and not IS_WINDOWS:\n        monkey_patch_os('posix_spawn', create_warn_multiproc)\n        monkey_patch_os('posix_spawnp', create_warn_multiproc)\n\n    if not IS_JYTHON:\n        if not IS_WINDOWS:\n            monkey_patch_os('fork', create_warn_multiproc)\n            try:\n                import _posixsubprocess\n                monkey_patch_module(_posixsubprocess, 'fork_exec', create_warn_fork_exec)\n            except ImportError:\n                pass\n        else:\n            # Windows\n            try:\n                import _subprocess\n            except ImportError:\n                import _winapi as _subprocess\n            monkey_patch_module(_subprocess, 'CreateProcess', create_CreateProcessWarnMultiproc)\n\n\nclass _NewThreadStartupWithTrace:\n\n    def __init__(self, original_func, args, kwargs):\n        self.original_func = original_func\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self):\n        # We monkey-patch the thread creation so that this function is called in the new thread. At this point\n        # we notify of its creation and start tracing it.\n        global_debugger = get_global_debugger()\n\n        thread_id = None\n        if global_debugger is not None:\n            # Note: if this is a thread from threading.py, we're too early in the boostrap process (because we mocked\n            # the start_new_thread internal machinery and thread._bootstrap has not finished), so, the code below needs\n            # to make sure that we use the current thread bound to the original function and not use\n            # threading.currentThread() unless we're sure it's a dummy thread.\n            t = getattr(self.original_func, '__self__', getattr(self.original_func, 'im_self', None))\n            if not isinstance(t, threading.Thread):\n                # This is not a threading.Thread but a Dummy thread (so, get it as a dummy thread using\n                # currentThread).\n                t = threading.currentThread()\n\n            if not getattr(t, 'is_pydev_daemon_thread', False):\n                thread_id = get_current_thread_id(t)\n                global_debugger.notify_thread_created(thread_id, t)\n                _on_set_trace_for_new_thread(global_debugger)\n            \n                if getattr(global_debugger, 'thread_analyser', None) is not None:\n                    try:\n                        from pydevd_concurrency_analyser.pydevd_concurrency_logger import log_new_thread\n                        log_new_thread(global_debugger, t)\n                    except:\n                        sys.stderr.write(\"Failed to detect new thread for visualization\")\n        try:\n            ret = self.original_func(*self.args, **self.kwargs)\n        finally:\n            if thread_id is not None:\n                global_debugger.notify_thread_not_alive(thread_id)\n        \n        return ret\n\n\nclass _NewThreadStartupWithoutTrace:\n\n    def __init__(self, original_func, args, kwargs):\n        self.original_func = original_func\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self):\n        return self.original_func(*self.args, **self.kwargs)\n\n_UseNewThreadStartup = _NewThreadStartupWithTrace\n\n\ndef _get_threading_modules_to_patch():\n    threading_modules_to_patch = []\n\n    try:\n        import thread as _thread\n    except:\n        import _thread\n    threading_modules_to_patch.append(_thread)\n    threading_modules_to_patch.append(threading)\n\n    return threading_modules_to_patch\n\nthreading_modules_to_patch = _get_threading_modules_to_patch()\n\n\ndef patch_thread_module(thread_module):\n\n    if getattr(thread_module, '_original_start_new_thread', None) is None:\n        if thread_module is threading:\n            if not hasattr(thread_module, '_start_new_thread'):\n                return  # Jython doesn't have it.\n            _original_start_new_thread = thread_module._original_start_new_thread = thread_module._start_new_thread\n        else:\n            _original_start_new_thread = thread_module._original_start_new_thread = thread_module.start_new_thread\n    else:\n        _original_start_new_thread = thread_module._original_start_new_thread\n\n    class ClassWithPydevStartNewThread:\n\n        def pydev_start_new_thread(self, function, args=(), kwargs={}):\n            '''\n            We need to replace the original thread_module.start_new_thread with this function so that threads started\n            through it and not through the threading module are properly traced.\n            '''\n            return _original_start_new_thread(_UseNewThreadStartup(function, args, kwargs), ())\n\n    # This is a hack for the situation where the thread_module.start_new_thread is declared inside a class, such as the one below\n    # class F(object):\n    #    start_new_thread = thread_module.start_new_thread\n    #\n    #    def start_it(self):\n    #        self.start_new_thread(self.function, args, kwargs)\n    # So, if it's an already bound method, calling self.start_new_thread won't really receive a different 'self' -- it\n    # does work in the default case because in builtins self isn't passed either.\n    pydev_start_new_thread = ClassWithPydevStartNewThread().pydev_start_new_thread\n\n    try:\n        # We need to replace the original thread_module.start_new_thread with this function so that threads started through\n        # it and not through the threading module are properly traced.\n        if thread_module is threading:\n            thread_module._start_new_thread = pydev_start_new_thread\n        else:\n            thread_module.start_new_thread = pydev_start_new_thread\n            thread_module.start_new = pydev_start_new_thread\n    except:\n        pass\n\n\ndef patch_thread_modules():\n    for t in threading_modules_to_patch:\n        patch_thread_module(t)\n\n\ndef undo_patch_thread_modules():\n    for t in threading_modules_to_patch:\n        try:\n            t.start_new_thread = t._original_start_new_thread\n        except:\n            pass\n\n        try:\n            t.start_new = t._original_start_new_thread\n        except:\n            pass\n\n        try:\n            t._start_new_thread = t._original_start_new_thread\n        except:\n            pass\n\n\ndef disable_trace_thread_modules():\n    '''\n    Can be used to temporarily stop tracing threads created with thread.start_new_thread.\n    '''\n    global _UseNewThreadStartup\n    _UseNewThreadStartup = _NewThreadStartupWithoutTrace\n\n\ndef enable_trace_thread_modules():\n    '''\n    Can be used to start tracing threads created with thread.start_new_thread again.\n    '''\n    global _UseNewThreadStartup\n    _UseNewThreadStartup = _NewThreadStartupWithTrace\n\n\ndef get_original_start_new_thread(threading_module):\n    try:\n        return threading_module._original_start_new_thread\n    except:\n        return threading_module.start_new_thread\n", 917], "/home/edx/PycharmProjects/examples/threads/utils.py": ["import threading\nimport time\n\nfrom os import getpid\nfrom datetime import datetime\nfrom functools import wraps\n\n\ndef timeit(func):\n    @wraps(func)\n    def timeit_wrapper(*args, **kwargs):\n        start_time = time.perf_counter()\n        result = func(*args, **kwargs)\n        end_time = time.perf_counter()\n        total_time = end_time - start_time\n        print(f'Function {func.__name__}{args} {kwargs} Took {total_time:.4f} seconds')\n        return result\n    return timeit_wrapper\n\n\nclass ThreadInfo:\n    def __init__(self):\n        self.name = threading.currentThread().name\n        self.pid = getpid()\n        self.thread_id = threading.currentThread().ident\n        self.created = datetime.now()\n\n    def __repr__(self):\n        return \"ThreadInfo: {attrs}\".format(attrs=\", \".join(\"{}={!r}\".format(k, v) for k, v in self.__dict__.items()))\n", 29], "/home/edx/PycharmProjects/examples/threads/basic_thread.py": ["import threading\nimport time\n\nfrom viztracer import VizTracer\nfrom pathlib import Path\n\nfrom threads.utils import ThreadInfo, timeit\n\n\n@timeit\ndef thread_func(name):\n    print('thread {}: starting'.format(name))\n\n    thread_info = ThreadInfo()\n    print(thread_info)\n\n    time.sleep(2)\n\n    print('thread {}: finishing'.format(name))\n\n\n@timeit\ndef main():\n    print(\"Main    : before creating thread\")\n    x = threading.Thread(target=thread_func, args=(1,), daemon=True)\n    print(\"Main    : before running thread\")\n    x.start()\n    print(\"Main    : wait for the thread to finish\")\n    x.join()\n    print(\"Main    : all done\")\n\n\nif __name__ == '__main__':\n    out_file = Path(__file__).stem + '.json'\n    with VizTracer(output_file=out_file) as tracer:\n        main()\n", 36], "/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd.py": ["'''\nEntry point module (keep at root):\n\nThis module starts the debugger.\n'''\nimport os\nimport sys\nfrom contextlib import contextmanager\nimport weakref\n\n# allow the debugger to work in isolated mode Python\nhere = os.path.dirname(os.path.abspath(__file__))\nif here not in sys.path:\n    sys.path.insert(0, here)\n\nfrom _pydevd_bundle.pydevd_collect_try_except_info import collect_return_info\n\nif sys.version_info[:2] < (2, 6):\n    raise RuntimeError('The PyDev.Debugger requires Python 2.6 onwards to be run. If you need to use an older Python version, use an older version of the debugger.')\n\nimport itertools\nimport atexit\nimport os\nimport traceback\nfrom functools import partial\nfrom collections import defaultdict\n\nfrom _pydevd_bundle.pydevd_constants import IS_JYTH_LESS25, IS_PYCHARM, get_thread_id, get_current_thread_id, \\\n    dict_keys, dict_iter_items, DebugInfoHolder, PYTHON_SUSPEND, STATE_SUSPEND, STATE_RUN, get_frame, xrange, \\\n    clear_cached_thread_id, INTERACTIVE_MODE_AVAILABLE, SHOW_DEBUG_INFO_ENV, IS_PY34_OR_GREATER, IS_PY36_OR_GREATER, \\\n    IS_PY2, NULL, NO_FTRACE, dummy_excepthook, IS_CPYTHON, GOTO_HAS_RESPONSE\nfrom _pydev_bundle import fix_getpass\nfrom _pydev_bundle import pydev_imports, pydev_log\nfrom _pydev_bundle._pydev_filesystem_encoding import getfilesystemencoding\nfrom _pydev_bundle.pydev_is_thread_alive import is_thread_alive\nfrom _pydev_imps._pydev_saved_modules import threading\nfrom _pydev_imps._pydev_saved_modules import time\nfrom _pydev_imps._pydev_saved_modules import thread\nfrom _pydevd_bundle import pydevd_io, pydevd_vm_type\nimport pydevd_tracing\nfrom _pydevd_bundle import pydevd_utils\nfrom _pydevd_bundle import pydevd_vars\nfrom _pydev_bundle.pydev_override import overrides\nfrom _pydevd_bundle.pydevd_breakpoints import ExceptionBreakpoint, set_fallback_excepthook, disable_excepthook\nfrom _pydevd_bundle.pydevd_comm import CMD_SET_BREAK, CMD_SET_NEXT_STATEMENT, CMD_STEP_INTO, CMD_STEP_OVER, \\\n    CMD_STEP_RETURN, CMD_STEP_INTO_MY_CODE, CMD_THREAD_SUSPEND, CMD_RUN_TO_LINE, \\\n    CMD_ADD_EXCEPTION_BREAK, CMD_SMART_STEP_INTO, InternalConsoleExec, NetCommandFactory, \\\n    PyDBDaemonThread, _queue, ReaderThread, GetGlobalDebugger, get_global_debugger, \\\n    set_global_debugger, WriterThread, pydevd_log, \\\n    start_client, start_server, InternalGetBreakpointException, InternalSendCurrExceptionTrace, \\\n    InternalSendCurrExceptionTraceProceeded, CommunicationRole, run_as_pydevd_daemon_thread\nfrom _pydevd_bundle.pydevd_custom_frames import CustomFramesContainer, custom_frames_container_init\nfrom _pydevd_bundle.pydevd_frame_utils import add_exception_to_frame, remove_exception_from_frame\nfrom _pydevd_bundle.pydevd_kill_all_pydevd_threads import kill_all_pydev_threads\nfrom _pydevd_bundle.pydevd_trace_dispatch import (\n    trace_dispatch as _trace_dispatch, global_cache_skips, global_cache_frame_skips, show_tracing_warning)\nfrom _pydevd_frame_eval.pydevd_frame_eval_main import (\n    frame_eval_func, dummy_trace_dispatch, show_frame_eval_warning)\nfrom _pydevd_bundle.pydevd_additional_thread_info import set_additional_thread_info\nfrom _pydevd_bundle.pydevd_utils import save_main_module\nfrom pydevd_concurrency_analyser.pydevd_concurrency_logger import ThreadingLogger, AsyncioLogger, send_message, cur_time\nfrom pydevd_concurrency_analyser.pydevd_thread_wrappers import wrap_threads, wrap_asyncio\nfrom pydevd_file_utils import get_fullname, rPath, get_package_dir\nimport pydev_ipython  # @UnusedImport\nfrom _pydevd_bundle.pydevd_dont_trace_files import DONT_TRACE\nfrom pydevd_file_utils import get_abs_path_real_path_and_base_from_frame, NORM_PATHS_AND_BASE_CONTAINER\n\nget_file_type = DONT_TRACE.get\n\n__version_info__ = (1, 4, 0)\n__version_info_str__ = []\nfor v in __version_info__:\n    __version_info_str__.append(str(v))\n\n__version__ = '.'.join(__version_info_str__)\n\n#IMPORTANT: pydevd_constants must be the 1st thing defined because it'll keep a reference to the original sys._getframe\n\n\ndef install_breakpointhook(pydevd_breakpointhook=None):\n    if pydevd_breakpointhook is None:\n        from _pydevd_bundle.pydevd_breakpointhook import breakpointhook\n        pydevd_breakpointhook = breakpointhook\n    if sys.version_info >= (3, 7):\n        # There are some choices on how to provide the breakpoint hook. Namely, we can provide a\n        # PYTHONBREAKPOINT which provides the import path for a method to be executed or we\n        # can override sys.breakpointhook.\n        # pydevd overrides sys.breakpointhook instead of providing an environment variable because\n        # it's possible that the debugger starts the user program but is not available in the\n        # PYTHONPATH (and would thus fail to be imported if PYTHONBREAKPOINT was set to pydevd.settrace).\n        # Note that the implementation still takes PYTHONBREAKPOINT in account (so, if it was provided\n        # by someone else, it'd still work).\n        sys.breakpointhook = pydevd_breakpointhook\n\n# Install the breakpoint hook at import time.\ninstall_breakpointhook()\n\nSUPPORT_PLUGINS = not IS_JYTH_LESS25\nPluginManager = None\nif SUPPORT_PLUGINS:\n    from _pydevd_bundle.pydevd_plugin_utils import PluginManager\n\n\nthreadingEnumerate = threading.enumerate\nthreadingCurrentThread = threading.currentThread\n\noriginal_excepthook = sys.__excepthook__\n\ntry:\n    'dummy'.encode('utf-8') # Added because otherwise Jython 2.2.1 wasn't finding the encoding (if it wasn't loaded in the main thread).\nexcept:\n    pass\n\n\nconnected = False\nbufferStdOutToServer = False\nbufferStdErrToServer = False\nremote = False\nforked = False\n\nfile_system_encoding = getfilesystemencoding()\n\n\n#=======================================================================================================================\n# PyDBCommandThread\n#=======================================================================================================================\nclass PyDBCommandThread(PyDBDaemonThread):\n\n    def __init__(self, py_db):\n        PyDBDaemonThread.__init__(self)\n        self._py_db_command_thread_event = py_db._py_db_command_thread_event\n        self.py_db = py_db\n        self.setName('pydevd.CommandThread')\n\n    @overrides(PyDBDaemonThread._on_run)\n    def _on_run(self):\n        # Delay a bit this initialization to wait for the main program to start.\n        time.sleep(0.3)\n\n        if self.killReceived:\n            return\n\n        try:\n            while not self.killReceived:\n                try:\n                    self.py_db.process_internal_commands()\n                except:\n                    pydevd_log(0, 'Finishing debug communication...(2)')\n                self._py_db_command_thread_event.clear()\n                self._py_db_command_thread_event.wait(0.3)\n        except:\n            pydev_log.debug(sys.exc_info()[0])\n            # only got this error in interpreter shutdown\n            # pydevd_log(0, 'Finishing debug communication...(3)')\n\n\n#=======================================================================================================================\n# CheckOutputThread\n# Non-daemon thread: guarantees that all data is written even if program is finished\n#=======================================================================================================================\nclass CheckOutputThread(PyDBDaemonThread):\n\n    def __init__(self, py_db):\n        PyDBDaemonThread.__init__(self)\n        self.py_db = py_db\n        self.setName('pydevd.CheckAliveThread')\n        self.daemon = False\n\n    @overrides(PyDBDaemonThread._on_run)\n    def _on_run(self):\n        while not self.killReceived:\n            time.sleep(0.3)\n            if not self.py_db.has_threads_alive() and self.py_db.writer.empty():\n                try:\n                    pydev_log.debug(\"No threads alive, finishing debug session\")\n                    self.py_db.finish_debugging_session()\n                    kill_all_pydev_threads()\n                except:\n                    traceback.print_exc()\n\n                self.wait_pydb_threads_to_finish()\n\n                self.killReceived = True\n\n            self.py_db.check_output_redirect()\n\n    def wait_pydb_threads_to_finish(self, timeout=0.5):\n        pydev_log.debug(\"Waiting for pydb daemon threads to finish\")\n        pydb_daemon_threads = self.created_pydb_daemon_threads\n        started_at = time.time()\n        while time.time() < started_at + timeout:\n            if len(pydb_daemon_threads) == 1 and pydb_daemon_threads.get(self, None):\n                return\n            time.sleep(0.01)\n        pydev_log.debug(\"The following pydb threads may not finished correctly: %s\"\n                        % ', '.join([t.getName() for t in pydb_daemon_threads if t is not self]))\n\n    def do_kill_pydev_thread(self):\n        self.killReceived = True\n\n\nclass TrackedLock(object):\n    \"\"\"The lock that tracks if it has been acquired by the current thread\n    \"\"\"\n    def __init__(self):\n        self._lock = thread.allocate_lock()\n        # thread-local storage\n        self._tls = threading.local()\n        self._tls.is_lock_acquired = False\n\n    def acquire(self):\n        self._lock.acquire()\n        self._tls.is_lock_acquired = True\n\n    def release(self):\n        self._lock.release()\n        self._tls.is_lock_acquired = False\n\n    def __enter__(self):\n        self.acquire()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.release()\n\n    def is_acquired_by_current_thread(self):\n        return self._tls.is_lock_acquired\n\nclass AbstractSingleNotificationBehavior(object):\n    '''\n    The basic usage should be:\n\n    # Increment the request time for the suspend.\n    single_notification_behavior.increment_suspend_time()\n\n    # Notify that this is a pause request (when a pause, not a breakpoint).\n    single_notification_behavior.on_pause()\n\n    # Mark threads to be suspended.\n    set_suspend(...)\n\n    # On do_wait_suspend, use notify_thread_suspended:\n    def do_wait_suspend(...):\n        with single_notification_behavior.notify_thread_suspended(thread_id):\n            ...\n    '''\n\n    __slots__ = [\n        '_last_resume_notification_time',\n        '_last_suspend_notification_time',\n        '_lock',\n        '_next_request_time',\n        '_suspend_time_request',\n        '_suspended_thread_ids',\n        '_pause_requested',\n    ]\n\n    NOTIFY_OF_PAUSE_TIMEOUT = .5\n\n    def __init__(self):\n        self._next_request_time = partial(next, itertools.count())\n        self._last_suspend_notification_time = -1\n        self._last_resume_notification_time = -1\n        self._suspend_time_request = self._next_request_time()\n        self._lock = thread.allocate_lock()\n        self._suspended_thread_ids = set()\n        self._pause_requested = False\n\n    def send_suspend_notification(self, thread_id, stop_reason):\n        raise AssertionError('abstract: subclasses must override.')\n\n    def send_resume_notification(self, thread_id):\n        raise AssertionError('abstract: subclasses must override.')\n\n    def increment_suspend_time(self):\n        with self._lock:\n            self._suspend_time_request = self._next_request_time()\n\n    def on_pause(self):\n        # Upon a pause, we should force sending new suspend notifications\n        # if no notification is sent after some time and there's some thread already stopped.\n        with self._lock:\n            self._pause_requested = True\n            global_suspend_time = self._suspend_time_request\n        run_as_pydevd_daemon_thread(self._notify_after_timeout, global_suspend_time)\n\n    def _notify_after_timeout(self, global_suspend_time):\n        time.sleep(self.NOTIFY_OF_PAUSE_TIMEOUT)\n        with self._lock:\n            if self._suspended_thread_ids:\n                if global_suspend_time > self._last_suspend_notification_time:\n                    self._last_suspend_notification_time = global_suspend_time\n                    # Notify about any thread which is currently suspended.\n                    self.send_suspend_notification(next(iter(self._suspended_thread_ids)), CMD_THREAD_SUSPEND)\n\n    @contextmanager\n    def notify_thread_suspended(self, thread_id, stop_reason):\n        with self._lock:\n            pause_requested = self._pause_requested\n            if pause_requested:\n                # When a suspend notification is sent, reset the pause flag.\n                self._pause_requested = False\n\n            self._suspended_thread_ids.add(thread_id)\n\n            # CMD_THREAD_SUSPEND should always be a side-effect of a break, so, only\n            # issue for a CMD_THREAD_SUSPEND if a pause is pending.\n            if stop_reason != CMD_THREAD_SUSPEND or pause_requested:\n                if self._suspend_time_request > self._last_suspend_notification_time:\n                    self._last_suspend_notification_time = self._suspend_time_request\n                    self.send_suspend_notification(thread_id, stop_reason)\n        try:\n            yield  # At this point the thread must be actually suspended.\n        finally:\n            # on resume (step, continue all):\n            with self._lock:\n                self._suspended_thread_ids.remove(thread_id)\n                if self._last_resume_notification_time < self._last_suspend_notification_time:\n                    self._last_resume_notification_time = self._last_suspend_notification_time\n                    self.send_resume_notification(thread_id)\n\n\nclass ThreadsSuspendedSingleNotification(AbstractSingleNotificationBehavior):\n\n    __slots__ = AbstractSingleNotificationBehavior.__slots__ + [\n        'multi_threads_single_notification', '_py_db']\n\n    def __init__(self, py_db):\n        AbstractSingleNotificationBehavior.__init__(self)\n        # If True, pydevd will send a single notification when all threads are suspended/resumed.\n        self.multi_threads_single_notification = False\n        self._py_db = weakref.ref(py_db)\n\n    @overrides(AbstractSingleNotificationBehavior.send_resume_notification)\n    def send_resume_notification(self, thread_id):\n        py_db = self._py_db()\n        if py_db is not None:\n            py_db.writer.add_command(py_db.cmd_factory.make_thread_resume_single_notification(thread_id))\n\n    @overrides(AbstractSingleNotificationBehavior.send_suspend_notification)\n    def send_suspend_notification(self, thread_id, stop_reason):\n        py_db = self._py_db()\n        if py_db is not None:\n            py_db.writer.add_command(py_db.cmd_factory.make_thread_suspend_single_notification(thread_id, stop_reason))\n\n    @overrides(AbstractSingleNotificationBehavior.notify_thread_suspended)\n    @contextmanager\n    def notify_thread_suspended(self, thread_id, stop_reason):\n        if self.multi_threads_single_notification:\n            with AbstractSingleNotificationBehavior.notify_thread_suspended(self, thread_id, stop_reason):\n                yield\n        else:\n            yield\n\n\n# noinspection SpellCheckingInspection\ndef stoptrace():\n    \"\"\"Stops tracing in the current process and undoes all monkey-patches done by the debugger.\"\"\"\n    global connected\n\n    if connected:\n        pydevd_tracing.restore_sys_set_trace_func()\n        sys.settrace(None)\n        try:\n            # Not available in Jython!\n            threading.settrace(None)  # Disable tracing for all future threads.\n        except:\n            pass\n\n        from _pydev_bundle.pydev_monkey import undo_patch_thread_modules\n        undo_patch_thread_modules()\n\n        debugger = get_global_debugger()\n\n        if debugger:\n\n            debugger.set_trace_for_frame_and_parents(get_frame(), disable=True)\n            debugger.exiting()\n\n            kill_all_pydev_threads()\n\n        connected = False\n\n\n#=======================================================================================================================\n# PyDB\n#=======================================================================================================================\nclass PyDB(object):\n    \"\"\" Main debugging class\n    Lots of stuff going on here:\n\n    PyDB starts two threads on startup that connect to remote debugger (RDB)\n    The threads continuously read & write commands to RDB.\n    PyDB communicates with these threads through command queues.\n       Every RDB command is processed by calling process_net_command.\n       Every PyDB net command is sent to the net by posting NetCommand to WriterThread queue\n\n       Some commands need to be executed on the right thread (suspend/resume & friends)\n       These are placed on the internal command queue.\n    \"\"\"\n\n\n    def __init__(self, set_as_global=True):\n        if set_as_global:\n            set_global_debugger(self)\n            pydevd_tracing.replace_sys_set_trace_func()\n\n        self.reader = None\n        self.writer = None\n        self.output_checker_thread = None\n        self.py_db_command_thread = None\n        self.quitting = None\n        self.cmd_factory = NetCommandFactory()\n        self._cmd_queue = defaultdict(_queue.Queue)  # Key is thread id or '*', value is Queue\n\n        self.breakpoints = {}\n\n        # mtime to be raised when breakpoints change\n        self.mtime = 0\n\n        self.file_to_id_to_line_breakpoint = {}\n        self.file_to_id_to_plugin_breakpoint = {}\n\n        # Note: breakpoints dict should not be mutated: a copy should be created\n        # and later it should be assigned back (to prevent concurrency issues).\n        self.break_on_uncaught_exceptions = {}\n        self.break_on_caught_exceptions = {}\n\n        self.ready_to_run = False\n        self._main_lock = TrackedLock()\n        self._lock_running_thread_ids = thread.allocate_lock()\n        self._py_db_command_thread_event = threading.Event()\n        if set_as_global:\n            CustomFramesContainer._py_db_command_thread_event = self._py_db_command_thread_event\n\n        self._finish_debugging_session = False\n        self._termination_event_set = False\n        self.signature_factory = None\n        self.SetTrace = pydevd_tracing.SetTrace\n        self.skip_on_exceptions_thrown_in_same_context = False\n        self.ignore_exceptions_thrown_in_lines_with_ignore_exception = True\n\n        # Suspend debugger even if breakpoint condition raises an exception.\n        # May be changed with CMD_PYDEVD_JSON_CONFIG.\n        self.skip_suspend_on_breakpoint_exception = ()  # By default suspend on any Exception.\n        self.skip_print_breakpoint_exception = ()  # By default print on any Exception.\n\n        # By default user can step into properties getter/setter/deleter methods\n        self.disable_property_trace = False\n        self.disable_property_getter_trace = False\n        self.disable_property_setter_trace = False\n        self.disable_property_deleter_trace = False\n\n        #this is a dict of thread ids pointing to thread ids. Whenever a command is passed to the java end that\n        #acknowledges that a thread was created, the thread id should be passed here -- and if at some time we do not\n        #find that thread alive anymore, we must remove it from this list and make the java side know that the thread\n        #was killed.\n        self._running_thread_ids = {}\n        self._set_breakpoints_with_id = False\n\n        # This attribute holds the file-> lines which have an @IgnoreException.\n        self.filename_to_lines_where_exceptions_are_ignored = {}\n\n        #working with plugins (lazily initialized)\n        self.plugin = None\n        self.has_plugin_line_breaks = False\n        self.has_plugin_exception_breaks = False\n        self.thread_analyser = None\n        self.asyncio_analyser = None\n\n        # matplotlib support in debugger and debug console\n        self.mpl_in_use = False\n        self.mpl_hooks_in_debug_console = False\n        self.mpl_modules_for_patching = {}\n\n        self._filename_to_not_in_scope = {}\n        self.first_breakpoint_reached = False\n        self.is_filter_enabled = pydevd_utils.is_filter_enabled()\n        self.is_filter_libraries = pydevd_utils.is_filter_libraries()\n        self.show_return_values = False\n        self.remove_return_values_flag = False\n        self.redirect_output = False\n\n        # this flag disables frame evaluation even if it's available\n        self.use_frame_eval = True\n        self.stop_on_start = False\n\n        # If True, pydevd will send a single notification when all threads are suspended/resumed.\n        self._threads_suspended_single_notification = ThreadsSuspendedSingleNotification(self)\n\n        self._local_thread_trace_func = threading.local()\n\n        # sequence id of `CMD_PROCESS_CREATED` command -> threading.Event\n        self.process_created_msg_received_events = dict()\n        # the role PyDB plays in the communication with IDE\n        self.communication_role = None\n\n        self.collect_return_info = collect_return_info\n\n        # If True, pydevd will stop on assertion errors in tests.\n        self.stop_on_failed_tests = False\n\n    def get_thread_local_trace_func(self):\n        try:\n            thread_trace_func = self._local_thread_trace_func.thread_trace_func\n        except AttributeError:\n            thread_trace_func = self.trace_dispatch\n        return thread_trace_func\n\n    def enable_tracing(self, thread_trace_func=None, apply_to_all_threads=False):\n        '''\n        Enables tracing.\n\n        If in regular mode (tracing), will set the tracing function to the tracing\n        function for this thread -- by default it's `PyDB.trace_dispatch`, but after\n        `PyDB.enable_tracing` is called with a `thread_trace_func`, the given function will\n        be the default for the given thread.\n        '''\n        set_fallback_excepthook()\n        if self.frame_eval_func is not None:\n            self.frame_eval_func()\n            pydevd_tracing.SetTrace(self.dummy_trace_dispatch)\n\n            if IS_CPYTHON and apply_to_all_threads:\n                pydevd_tracing.set_trace_to_threads(self.dummy_trace_dispatch)\n            return\n\n        if thread_trace_func is None:\n            thread_trace_func = self.get_thread_local_trace_func()\n        else:\n            self._local_thread_trace_func.thread_trace_func = thread_trace_func\n\n        pydevd_tracing.SetTrace(thread_trace_func)\n        if IS_CPYTHON and apply_to_all_threads:\n            pydevd_tracing.set_trace_to_threads(thread_trace_func)\n\n    def disable_tracing(self):\n        pydevd_tracing.SetTrace(None)\n\n    def on_breakpoints_changed(self, removed=False):\n        '''\n        When breakpoints change, we have to re-evaluate all the assumptions we've made so far.\n        '''\n        if not self.ready_to_run:\n            # No need to do anything if we're still not running.\n            return\n\n        self.mtime += 1\n        if not removed:\n            # When removing breakpoints we can leave tracing as was, but if a breakpoint was added\n            # we have to reset the tracing for the existing functions to be re-evaluated.\n            self.set_tracing_for_untraced_contexts()\n\n    def set_tracing_for_untraced_contexts(self, ignore_current_thread=False):\n        # Enable the tracing for existing threads (because there may be frames being executed that\n        # are currently untraced).\n        ignore_thread = None\n        if ignore_current_thread:\n            ignore_thread = threading.current_thread()\n\n        ignore_thread_ids = set(\n            t.ident for t in threadingEnumerate()\n            if getattr(t, 'is_pydev_daemon_thread', False) or getattr(t, 'pydev_do_not_trace', False)\n        )\n\n        if IS_CPYTHON:\n            # Note: use sys._current_frames instead of threading.enumerate() because this way\n            # we also see C/C++ threads, not only the ones visible to the threading module.\n            tid_to_frame = sys._current_frames()\n\n            for thread_id, frame in tid_to_frame.items():\n                if thread_id not in ignore_thread_ids:\n                    self.set_trace_for_frame_and_parents(frame)\n        else:\n            threads = threadingEnumerate()\n            try:\n                for t in threads:\n                    if t.ident in ignore_thread_ids or t is ignore_thread:\n                        continue\n\n                    additional_info = set_additional_thread_info(t)\n                    frame = additional_info.get_topmost_frame(t)\n                    try:\n                        if frame is not None:\n                            self.set_trace_for_frame_and_parents(frame)\n                    finally:\n                        frame = None\n            finally:\n                frame = None\n                t = None\n                threads = None\n                additional_info = None\n\n    @property\n    def multi_threads_single_notification(self):\n        return self._threads_suspended_single_notification.multi_threads_single_notification\n\n    @multi_threads_single_notification.setter\n    def multi_threads_single_notification(self, notify):\n        self._threads_suspended_single_notification.multi_threads_single_notification = notify\n\n    def get_plugin_lazy_init(self):\n        if self.plugin is None and SUPPORT_PLUGINS:\n            self.plugin = PluginManager(self)\n        return self.plugin\n\n    def in_project_scope(self, filename):\n        return pydevd_utils.in_project_roots(filename)\n\n    def is_ignored_by_filters(self, filename):\n        return pydevd_utils.is_ignored_by_filter(filename)\n\n    def is_exception_trace_in_project_scope(self, trace):\n        return pydevd_utils.is_exception_trace_in_project_scope(trace)\n\n    def is_top_level_trace_in_project_scope(self, trace):\n        return pydevd_utils.is_top_level_trace_in_project_scope(trace)\n\n    def is_test_item_or_set_up_caller(self, frame):\n        return pydevd_utils.is_test_item_or_set_up_caller(frame)\n\n    def set_unit_tests_debugging_mode(self):\n        self.stop_on_failed_tests = True\n\n    def has_threads_alive(self):\n        for t in pydevd_utils.get_non_pydevd_threads():\n            if isinstance(t, PyDBDaemonThread):\n                pydev_log.error_once(\n                    'Error in debugger: Found PyDBDaemonThread not marked with is_pydev_daemon_thread=True.\\n')\n\n            if is_thread_alive(t):\n                if not t.isDaemon() or hasattr(t, \"__pydevd_main_thread\"):\n                    return True\n\n        return False\n\n    def finish_debugging_session(self):\n        self._finish_debugging_session = True\n\n\n    def initialize_network(self, sock):\n        try:\n            sock.settimeout(None)  # infinite, no timeouts from now on - jython does not have it\n        except:\n            pass\n        self.writer = WriterThread(sock)\n        self.reader = ReaderThread(sock)\n        self.writer.start()\n        self.reader.start()\n\n        time.sleep(0.1)  # give threads time to start\n\n    def connect(self, host, port):\n        if host:\n            self.communication_role = CommunicationRole.CLIENT\n            s = start_client(host, port)\n        else:\n            self.communication_role = CommunicationRole.SERVER\n            s = start_server(port)\n\n        self.initialize_network(s)\n\n\n    def get_internal_queue(self, thread_id):\n        \"\"\" returns internal command queue for a given thread.\n        if new queue is created, notify the RDB about it \"\"\"\n        if thread_id.startswith('__frame__'):\n            thread_id = thread_id[thread_id.rfind('|') + 1:]\n        return self._cmd_queue[thread_id]\n\n    def post_internal_command(self, int_cmd, thread_id):\n        \"\"\" if thread_id is *, post to the '*' queue\"\"\"\n        queue = self.get_internal_queue(thread_id)\n        queue.put(int_cmd)\n\n    def enable_output_redirection(self, redirect_stdout, redirect_stderr):\n        global bufferStdOutToServer\n        global bufferStdErrToServer\n\n        bufferStdOutToServer = redirect_stdout\n        bufferStdErrToServer = redirect_stderr\n        self.redirect_output = redirect_stdout or redirect_stderr\n        if bufferStdOutToServer:\n            init_stdout_redirect()\n        if bufferStdErrToServer:\n            init_stderr_redirect()\n\n    def check_output_redirect(self):\n        global bufferStdOutToServer\n        global bufferStdErrToServer\n\n        if bufferStdOutToServer:\n            init_stdout_redirect()\n\n        if bufferStdErrToServer:\n            init_stderr_redirect()\n\n\n    def init_matplotlib_in_debug_console(self):\n        # import hook and patches for matplotlib support in debug console\n        from _pydev_bundle.pydev_import_hook import import_hook_manager\n        for module in dict_keys(self.mpl_modules_for_patching):\n            import_hook_manager.add_module_name(module, self.mpl_modules_for_patching.pop(module))\n\n    def init_matplotlib_support(self):\n        # prepare debugger for integration with matplotlib GUI event loop\n        from pydev_ipython.matplotlibtools import activate_matplotlib, activate_pylab, activate_pyplot, do_enable_gui\n        # enable_gui_function in activate_matplotlib should be called in main thread. Unlike integrated console,\n        # in the debug console we have no interpreter instance with exec_queue, but we run this code in the main\n        # thread and can call it directly.\n        class _MatplotlibHelper:\n            _return_control_osc = False\n\n        def return_control():\n            # Some of the input hooks (e.g. Qt4Agg) check return control without doing\n            # a single operation, so we don't return True on every\n            # call when the debug hook is in place to allow the GUI to run\n            _MatplotlibHelper._return_control_osc = not _MatplotlibHelper._return_control_osc\n            return _MatplotlibHelper._return_control_osc\n\n        from pydev_ipython.inputhook import set_return_control_callback\n        set_return_control_callback(return_control)\n\n        self.mpl_modules_for_patching = {\"matplotlib\": lambda: activate_matplotlib(do_enable_gui),\n                                         \"matplotlib.pyplot\": activate_pyplot,\n                                         \"pylab\": activate_pylab }\n\n    def _activate_mpl_if_needed(self):\n        if len(self.mpl_modules_for_patching) > 0:\n            for module in dict_keys(self.mpl_modules_for_patching):\n                if module in sys.modules:\n                    activate_function = self.mpl_modules_for_patching.pop(module)\n                    activate_function()\n                    self.mpl_in_use = True\n\n    def _call_mpl_hook(self):\n        try:\n            from pydev_ipython.inputhook import get_inputhook\n            inputhook = get_inputhook()\n            if inputhook:\n                inputhook()\n        except:\n            pass\n\n\n    def notify_thread_created(self, thread_id, thread, use_lock=True):\n        if self.writer is None:\n            # Protect about threads being created before the communication structure is in place\n            # (note that they will appear later on anyways as pydevd does reconcile live/dead threads\n            # when processing internal commands, albeit it may take longer and in general this should\n            # not be usual as it's expected that the debugger is live before other threads are created).\n            return\n\n        with self._lock_running_thread_ids if use_lock else NULL:\n            if thread_id in self._running_thread_ids:\n                return\n\n            additional_info = set_additional_thread_info(thread)\n            if additional_info.pydev_notify_kill:\n                # After we notify it should be killed, make sure we don't notify it's alive (on a racing condition\n                # this could happen as we may notify before the thread is stopped internally).\n                return\n\n            self._running_thread_ids[thread_id] = thread\n\n        self.writer.add_command(self.cmd_factory.make_thread_created_message(thread))\n\n    def notify_thread_not_alive(self, thread_id, use_lock=True):\n        \"\"\" if thread is not alive, cancel trace_dispatch processing \"\"\"\n        if self.writer is None:\n            return\n\n        with self._lock_running_thread_ids if use_lock else NULL:\n            thread = self._running_thread_ids.pop(thread_id, None)\n            if thread is None:\n                return\n\n            was_notified = thread.additional_info.pydev_notify_kill\n            if not was_notified:\n                thread.additional_info.pydev_notify_kill = True\n\n        self.writer.add_command(self.cmd_factory.make_thread_killed_message(thread_id))\n\n    def process_internal_commands(self):\n        '''This function processes internal commands\n        '''\n        with self._main_lock:\n            self.check_output_redirect()\n\n            program_threads_alive = {}\n            all_threads = threadingEnumerate()\n            program_threads_dead = []\n            with self._lock_running_thread_ids:\n                for t in all_threads:\n                    if getattr(t, 'is_pydev_daemon_thread', False):\n                        pass # I.e.: skip the DummyThreads created from pydev daemon threads\n                    elif isinstance(t, PyDBDaemonThread):\n                        pydev_log.error_once('Error in debugger: Found PyDBDaemonThread not marked with is_pydev_daemon_thread=True.\\n')\n\n                    elif is_thread_alive(t):\n                        if not self._running_thread_ids:\n                            # Fix multiprocessing debug with breakpoints in both main and child processes\n                            # (https://youtrack.jetbrains.com/issue/PY-17092) When the new process is created, the main\n                            # thread in the new process already has the attribute 'pydevd_id', so the new thread doesn't\n                            # get new id with its process number and the debugger loses access to both threads.\n                            # Therefore we should update thread_id for every main thread in the new process.\n\n                            # Fix it for all existing threads.\n                            for existing_thread in all_threads:\n                                old_thread_id = get_thread_id(existing_thread)\n                                clear_cached_thread_id(t)\n\n                                thread_id = get_thread_id(t)\n                                if thread_id != old_thread_id:\n                                    if pydevd_vars.has_additional_frames_by_id(old_thread_id):\n                                        frames_by_id = pydevd_vars.get_additional_frames_by_id(old_thread_id)\n                                        pydevd_vars.add_additional_frame_by_id(thread_id, frames_by_id)\n\n                        thread_id = get_thread_id(t)\n                        program_threads_alive[thread_id] = t\n\n                        self.notify_thread_created(thread_id, t, use_lock=False)\n\n                # Compute and notify about threads which are no longer alive.\n                thread_ids = list(self._running_thread_ids.keys())\n                for thread_id in thread_ids:\n                    if thread_id not in program_threads_alive:\n                        program_threads_dead.append(thread_id)\n\n                for thread_id in program_threads_dead:\n                    self.notify_thread_not_alive(thread_id, use_lock=False)\n\n            # Without self._lock_running_thread_ids\n            if len(program_threads_alive) == 0:\n                self.finish_debugging_session()\n                for t in all_threads:\n                    if hasattr(t, 'do_kill_pydev_thread'):\n                        t.do_kill_pydev_thread()\n            else:\n                # Actually process the commands now (make sure we don't have a lock for _lock_running_thread_ids\n                # acquired at this point as it could lead to a deadlock if some command evaluated tried to\n                # create a thread and wait for it -- which would try to notify about it getting that lock).\n                curr_thread_id = get_current_thread_id(threadingCurrentThread())\n\n                for thread_id in (curr_thread_id, '*'):\n                    queue = self.get_internal_queue(thread_id)\n\n                    # some commands must be processed by the thread itself... if that's the case,\n                    # we will re-add the commands to the queue after executing.\n                    cmds_to_add_back = []\n\n                    try:\n                        while True:\n                            int_cmd = queue.get(False)\n\n                            if not self.mpl_hooks_in_debug_console and isinstance(int_cmd, InternalConsoleExec):\n                                # add import hooks for matplotlib patches if only debug console was started\n                                try:\n                                    self.init_matplotlib_in_debug_console()\n                                    self.mpl_in_use = True\n                                except:\n                                    pydevd_log(2, \"Matplotlib support in debug console failed\", traceback.format_exc())\n                                self.mpl_hooks_in_debug_console = True\n\n                            if int_cmd.can_be_executed_by(curr_thread_id):\n                                pydevd_log(2, \"processing internal command \", str(int_cmd))\n                                int_cmd.do_it(self)\n                            else:\n                                pydevd_log(2, \"NOT processing internal command \", str(int_cmd))\n                                cmds_to_add_back.append(int_cmd)\n\n                    except _queue.Empty:  # @UndefinedVariable\n                        # this is how we exit\n                        for int_cmd in cmds_to_add_back:\n                            queue.put(int_cmd)\n\n    def consolidate_breakpoints(self, file, id_to_breakpoint, breakpoints):\n        break_dict = {}\n        for breakpoint_id, pybreakpoint in dict_iter_items(id_to_breakpoint):\n            break_dict[pybreakpoint.line] = pybreakpoint\n\n        breakpoints[file] = break_dict\n        self.clear_skip_caches()\n\n    def clear_skip_caches(self):\n        global_cache_skips.clear()\n        global_cache_frame_skips.clear()\n\n    def add_break_on_exception(\n        self,\n        exception,\n        condition,\n        expression,\n        notify_on_handled_exceptions,\n        notify_on_unhandled_exceptions,\n        notify_on_first_raise_only,\n        ignore_libraries=False\n        ):\n        try:\n            eb = ExceptionBreakpoint(\n                exception,\n                condition,\n                expression,\n                notify_on_handled_exceptions,\n                notify_on_unhandled_exceptions,\n                notify_on_first_raise_only,\n                ignore_libraries\n            )\n        except ImportError:\n            pydev_log.error(\"Error unable to add break on exception for: %s (exception could not be imported)\\n\" % (exception,))\n            return None\n\n        if eb.notify_on_unhandled_exceptions:\n            cp = self.break_on_uncaught_exceptions.copy()\n            cp[exception] = eb\n            if DebugInfoHolder.DEBUG_TRACE_BREAKPOINTS > 0:\n                pydev_log.error(\"Exceptions to hook on terminate: %s\\n\" % (cp,))\n            self.break_on_uncaught_exceptions = cp\n\n        if eb.notify_on_handled_exceptions:\n            cp = self.break_on_caught_exceptions.copy()\n            cp[exception] = eb\n            if DebugInfoHolder.DEBUG_TRACE_BREAKPOINTS > 0:\n                pydev_log.error(\"Exceptions to hook always: %s\\n\" % (cp,))\n            self.break_on_caught_exceptions = cp\n\n        return eb\n\n    def _mark_suspend(self, thread, stop_reason):\n        info = set_additional_thread_info(thread)\n        info.suspend_type = PYTHON_SUSPEND\n        thread.stop_reason = stop_reason\n        if info.pydev_step_cmd == -1:\n            # If the step command is not specified, set it to step into\n            # to make sure it'll break as soon as possible.\n            info.pydev_step_cmd = CMD_STEP_INTO\n\n        # Mark as suspend as the last thing.\n        info.pydev_state = STATE_SUSPEND\n\n        return info\n\n    def set_suspend(self, thread, stop_reason, suspend_other_threads=False, is_pause=False):\n        '''\n        :param thread:\n            The thread which should be suspended.\n\n        :param stop_reason:\n            Reason why the thread was suspended.\n\n        :param suspend_other_threads:\n            Whether to force other threads to be suspended (i.e.: when hitting a breakpoint\n            with a suspend all threads policy).\n\n        :param is_pause:\n            If this is a pause to suspend all threads, any thread can be considered as the 'main'\n            thread paused.\n        '''\n        self._threads_suspended_single_notification.increment_suspend_time()\n        if is_pause:\n            self._threads_suspended_single_notification.on_pause()\n\n        info = self._mark_suspend(thread, stop_reason)\n\n        if is_pause:\n            # Must set tracing after setting the state to suspend.\n            frame = info.get_topmost_frame(thread)\n            if frame is not None:\n                try:\n                    self.set_trace_for_frame_and_parents(frame)\n                finally:\n                    frame = None\n\n        # If conditional breakpoint raises any exception during evaluation send the details to the client.\n        if stop_reason == CMD_SET_BREAK and info.conditional_breakpoint_exception is not None:\n            conditional_breakpoint_exception_tuple = info.conditional_breakpoint_exception\n            info.conditional_breakpoint_exception = None\n            self._send_breakpoint_condition_exception(thread, conditional_breakpoint_exception_tuple)\n\n        if not suspend_other_threads and self.multi_threads_single_notification:\n            # In the mode which gives a single notification when all threads are\n            # stopped, stop all threads whenever a set_suspend is issued.\n            suspend_other_threads = True\n\n        if suspend_other_threads:\n            # Suspend all other threads.\n            all_threads = pydevd_utils.get_non_pydevd_threads()\n            for t in all_threads:\n                if getattr(t, 'pydev_do_not_trace', None):\n                    pass  # skip some other threads, i.e. ipython history saving thread from debug console\n                else:\n                    if t is thread:\n                        continue\n                    info = self._mark_suspend(t, CMD_THREAD_SUSPEND)\n                    frame = info.get_topmost_frame(t)\n\n                    # Reset the time as in this case this was not the main thread suspended.\n                    if frame is not None:\n                        try:\n                            self.set_trace_for_frame_and_parents(frame)\n                        finally:\n                            frame = None\n\n\n    def _send_breakpoint_condition_exception(self, thread, conditional_breakpoint_exception_tuple):\n        \"\"\"If conditional breakpoint raises an exception during evaluation\n        send exception details to java\n        \"\"\"\n        thread_id = get_thread_id(thread)\n        # conditional_breakpoint_exception_tuple - should contain 2 values (exception_type, stacktrace)\n        if conditional_breakpoint_exception_tuple and len(conditional_breakpoint_exception_tuple) == 2:\n            exc_type, stacktrace = conditional_breakpoint_exception_tuple\n            int_cmd = InternalGetBreakpointException(thread_id, exc_type, stacktrace)\n            self.post_internal_command(int_cmd, thread_id)\n\n\n    def send_caught_exception_stack(self, thread, arg, curr_frame_id):\n        \"\"\"Sends details on the exception which was caught (and where we stopped) to the java side.\n\n        arg is: exception type, description, traceback object\n        \"\"\"\n        thread_id = get_thread_id(thread)\n        int_cmd = InternalSendCurrExceptionTrace(thread_id, arg, curr_frame_id)\n        self.post_internal_command(int_cmd, thread_id)\n\n\n    def send_caught_exception_stack_proceeded(self, thread):\n        \"\"\"Sends that some thread was resumed and is no longer showing an exception trace.\n        \"\"\"\n        thread_id = get_thread_id(thread)\n        int_cmd = InternalSendCurrExceptionTraceProceeded(thread_id)\n        self.post_internal_command(int_cmd, thread_id)\n        self.process_internal_commands()\n\n    def send_process_created_message(self):\n        \"\"\"Sends a message that a new process has been created.\n        \"\"\"\n        cmd = self.cmd_factory.make_process_created_message()\n        self.writer.add_command(cmd)\n\n    def send_process_will_be_substituted(self):\n        \"\"\"When `PyDB` works in server mode this method sends a message that a\n        new process is going to be created. After that it waits for the\n        response from the IDE to be sure that the IDE received this message.\n        Waiting for the response is required because the current process might\n        become substituted before it actually sends the message and the IDE\n        will not try to connect to `PyDB` in this case.\n\n        When `PyDB` works in client mode this method does nothing because the\n        substituted process will try to connect to the IDE itself.\n        \"\"\"\n        if self.communication_role == CommunicationRole.SERVER:\n            if self._main_lock.is_acquired_by_current_thread():\n                # if `_main_lock` is acquired by the current thread then `event.wait()` would stuck\n                # because the corresponding call of `event.set()` is made under the same `_main_lock`\n                pydev_log.debug(\"Skip sending process substitution notification\\n\")\n                return\n\n            cmd = self.cmd_factory.make_process_created_message()\n            # register event before putting command to the message queue\n            event = threading.Event()\n            self.process_created_msg_received_events[cmd.seq] = event\n            self.writer.add_command(cmd)\n            event.wait()\n\n    def set_next_statement(self, frame, event, func_name, next_line):\n        stop = False\n        response_msg = \"\"\n        old_line = frame.f_lineno\n        if event == 'line' or event == 'exception':\n            #If we're already in the correct context, we have to stop it now, because we can act only on\n            #line events -- if a return was the next statement it wouldn't work (so, we have this code\n            #repeated at pydevd_frame).\n\n            curr_func_name = frame.f_code.co_name\n\n            #global context is set with an empty name\n            if curr_func_name in ('?', '<module>'):\n                curr_func_name = ''\n\n            if func_name == '*' or curr_func_name == func_name:\n                line = next_line\n                frame.f_trace = self.trace_dispatch\n                frame.f_lineno = line\n                stop = True\n            else:\n                response_msg = \"jump is available only within the bottom frame\"\n        return stop, old_line, response_msg\n\n    def cancel_async_evaluation(self, thread_id, frame_id):\n        self._main_lock.acquire()\n        try:\n            all_threads = threadingEnumerate()\n            for t in all_threads:\n                if getattr(t, 'is_pydev_daemon_thread', False) and hasattr(t, 'cancel_event') and hasattr(t, 'thread_id') and \\\n                        t.thread_id == thread_id and t.frame_id == frame_id:\n                    t.cancel_event.set()\n        except:\n            traceback.print_exc()\n        finally:\n            self._main_lock.release()\n\n    def do_wait_suspend(self, thread, frame, event, arg, send_suspend_message=True, is_unhandled_exception=False): #@UnusedVariable\n        \"\"\" busy waits until the thread state changes to RUN\n        it expects thread's state as attributes of the thread.\n        Upon running, processes any outstanding Stepping commands.\n\n        :param is_unhandled_exception:\n            If True we should use the line of the exception instead of the current line in the frame\n            as the paused location on the top-level frame (exception info must be passed on 'arg').\n        \"\"\"\n        self.process_internal_commands()\n        thread_stack_str = ''   # @UnusedVariable -- this is here so that `make_get_thread_stack_message`\n        # can retrieve it later.\n\n        thread_id = get_current_thread_id(thread)\n        stop_reason = thread.stop_reason\n        suspend_type = thread.additional_info.trace_suspend_type\n\n        if send_suspend_message:\n            # Send the suspend message\n            message = thread.additional_info.pydev_message\n            thread.additional_info.trace_suspend_type = 'trace'  # Reset to trace mode for next call.\n            frame_to_lineno = {}\n            if is_unhandled_exception:\n                # arg must be the exception info (tuple(exc_type, exc, traceback))\n                tb = arg[2]\n                while tb is not None:\n                    frame_to_lineno[tb.tb_frame] = tb.tb_lineno\n                    tb = tb.tb_next\n            cmd = self.cmd_factory.make_thread_suspend_message(thread_id, frame, stop_reason, message, suspend_type, frame_to_lineno=frame_to_lineno)\n            frame_to_lineno.clear()\n            thread_stack_str = cmd.thread_stack_str  # @UnusedVariable -- `make_get_thread_stack_message` uses it later.\n            self.writer.add_command(cmd)\n\n        with CustomFramesContainer.custom_frames_lock:  # @UndefinedVariable\n            from_this_thread = []\n\n            for frame_id, custom_frame in dict_iter_items(CustomFramesContainer.custom_frames):\n                if custom_frame.thread_id == thread.ident:\n                    # print >> sys.stderr, 'Frame created: ', frame_id\n                    self.writer.add_command(self.cmd_factory.make_custom_frame_created_message(frame_id, custom_frame.name))\n                    self.writer.add_command(self.cmd_factory.make_thread_suspend_message(frame_id, custom_frame.frame, CMD_THREAD_SUSPEND, \"\", suspend_type))\n\n                from_this_thread.append(frame_id)\n\n        with self._threads_suspended_single_notification.notify_thread_suspended(thread_id, stop_reason):\n            self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread)\n\n    def _do_wait_suspend(self, thread, frame, event, arg, suspend_type, from_this_thread):\n        info = thread.additional_info\n\n        if info.pydev_state == STATE_SUSPEND and not self._finish_debugging_session:\n            # before every stop check if matplotlib modules were imported inside script code\n            self._activate_mpl_if_needed()\n\n            while info.pydev_state == STATE_SUSPEND and not self._finish_debugging_session:\n                if self.mpl_in_use:\n                    # call input hooks if only matplotlib is in use\n                    self._call_mpl_hook()\n\n                self.process_internal_commands()\n                time.sleep(0.01)\n\n        self.cancel_async_evaluation(get_current_thread_id(thread), str(id(frame)))\n\n        # process any stepping instructions\n        if info.pydev_step_cmd == CMD_STEP_INTO or info.pydev_step_cmd == CMD_STEP_INTO_MY_CODE:\n            info.pydev_step_stop = None\n            info.pydev_smart_step_context.smart_step_stop = None\n\n        elif info.pydev_step_cmd == CMD_STEP_OVER:\n            info.pydev_step_stop = frame\n            info.pydev_smart_step_context.smart_step_stop = None\n            self.set_trace_for_frame_and_parents(frame)\n\n        elif info.pydev_step_cmd == CMD_SMART_STEP_INTO:\n            self.set_trace_for_frame_and_parents(frame)\n            info.pydev_step_stop = None\n            info.pydev_smart_step_context.smart_step_stop = frame\n\n        elif info.pydev_step_cmd == CMD_RUN_TO_LINE or info.pydev_step_cmd == CMD_SET_NEXT_STATEMENT:\n            self.set_trace_for_frame_and_parents(frame)\n            stop = False\n            response_msg = \"\"\n            old_line = frame.f_lineno\n            if not IS_PYCHARM:\n                stop, _, response_msg = self.set_next_statement(frame, event, info.pydev_func_name, info.pydev_next_line)\n                if stop:\n                    # Set next did not work...\n                    info.pydev_step_cmd = -1\n                    info.pydev_state = STATE_SUSPEND\n                    thread.stop_reason = CMD_THREAD_SUSPEND\n                    # return to the suspend state and wait for other command (without sending any\n                    # additional notification to the client).\n                    self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread)\n                    return\n            else:\n                try:\n                    stop, old_line, response_msg = self.set_next_statement(frame, event, info.pydev_func_name, info.pydev_next_line)\n                except ValueError as e:\n                    response_msg = \"%s\" % e\n                finally:\n                    if GOTO_HAS_RESPONSE:\n                        seq = info.pydev_message\n                        cmd = self.cmd_factory.make_set_next_stmnt_status_message(seq, stop, response_msg)\n                        self.writer.add_command(cmd)\n                        info.pydev_message = ''\n\n                if stop:\n                    cmd = self.cmd_factory.make_thread_run_message(get_current_thread_id(thread), info.pydev_step_cmd)\n                    self.writer.add_command(cmd)\n                    info.pydev_state = STATE_SUSPEND\n                    thread.stop_reason = CMD_SET_NEXT_STATEMENT\n                    self.do_wait_suspend(thread, frame, event, arg)\n                    return\n                else:\n                    info.pydev_step_cmd = -1\n                    info.pydev_state = STATE_SUSPEND\n                    thread.stop_reason = CMD_THREAD_SUSPEND\n                    # return to the suspend state and wait for other command\n                    self.do_wait_suspend(thread, frame, event, arg, send_suspend_message=False)\n                    return\n\n        elif info.pydev_step_cmd == CMD_STEP_RETURN:\n            back_frame = frame.f_back\n            if back_frame is not None:\n                # steps back to the same frame (in a return call it will stop in the 'back frame' for the user)\n                info.pydev_step_stop = frame\n                self.set_trace_for_frame_and_parents(frame)\n            else:\n                # No back frame?!? -- this happens in jython when we have some frame created from an awt event\n                # (the previous frame would be the awt event, but this doesn't make part of 'jython', only 'java')\n                # so, if we're doing a step return in this situation, it's the same as just making it run\n                info.pydev_step_stop = None\n                info.pydev_step_cmd = -1\n                info.pydev_state = STATE_RUN\n\n        del frame\n        cmd = self.cmd_factory.make_thread_run_message(get_current_thread_id(thread), info.pydev_step_cmd)\n        self.writer.add_command(cmd)\n\n        with CustomFramesContainer.custom_frames_lock:\n            # The ones that remained on last_running must now be removed.\n            for frame_id in from_this_thread:\n                # print >> sys.stderr, 'Removing created frame: ', frame_id\n                self.writer.add_command(self.cmd_factory.make_thread_killed_message(frame_id))\n\n    def stop_on_unhandled_exception(self, thread, frame, frames_byid, arg):\n        pydev_log.debug(\"We are stopping in post-mortem\\n\")\n        thread_id = get_thread_id(thread)\n        pydevd_vars.add_additional_frame_by_id(thread_id, frames_byid)\n        exctype, value, tb = arg\n        tb = pydevd_utils.get_top_level_trace_in_project_scope(tb)\n        if sys.excepthook != dummy_excepthook:\n            original_excepthook(exctype, value, tb)\n        disable_excepthook()  # Avoid printing the exception for the second time.\n        try:\n            try:\n                add_exception_to_frame(frame, arg)\n                self.set_suspend(thread, CMD_ADD_EXCEPTION_BREAK)\n                self.do_wait_suspend(thread, frame, 'exception', arg, is_unhandled_exception=True)\n            except KeyboardInterrupt as e:\n                raise e\n            except:\n                pydev_log.error(\"We've got an error while stopping in post-mortem: %s\\n\" % (arg[0],))\n        finally:\n            remove_exception_from_frame(frame)\n            pydevd_vars.remove_additional_frame_by_id(thread_id)\n            frame = None\n\n    def set_trace_for_frame_and_parents(self, frame, **kwargs):\n        disable = kwargs.pop('disable', False)\n        assert not kwargs\n\n        while frame is not None:\n            try:\n                # Make fast path faster!\n                abs_path_real_path_and_base = NORM_PATHS_AND_BASE_CONTAINER[frame.f_code.co_filename]\n            except:\n                abs_path_real_path_and_base = get_abs_path_real_path_and_base_from_frame(frame)\n\n            # Don't change the tracing on debugger-related files\n            file_type = get_file_type(abs_path_real_path_and_base[-1])\n\n            if file_type is None:\n                if disable:\n                    if frame.f_trace is not None and frame.f_trace is not NO_FTRACE:\n                        frame.f_trace = NO_FTRACE\n\n                elif frame.f_trace is not self.trace_dispatch:\n                    frame.f_trace = self.trace_dispatch\n\n            frame = frame.f_back\n\n        del frame\n\n    def _create_pydb_command_thread(self):\n        curr_pydb_command_thread = self.py_db_command_thread\n        if curr_pydb_command_thread is not None:\n            curr_pydb_command_thread.do_kill_pydev_thread()\n\n        new_pydb_command_thread = self.py_db_command_thread = PyDBCommandThread(self)\n        new_pydb_command_thread.start()\n\n    def _create_check_output_thread(self):\n        curr_output_checker_thread = self.output_checker_thread\n        if curr_output_checker_thread is not None:\n            curr_output_checker_thread.do_kill_pydev_thread()\n\n        output_checker_thread = self.output_checker_thread = CheckOutputThread(self)\n        output_checker_thread.start()\n\n    def start_auxiliary_daemon_threads(self):\n        self._create_pydb_command_thread()\n        self._create_check_output_thread()\n\n    def prepare_to_run(self, enable_tracing_from_start=True):\n        ''' Shared code to prepare debugging by installing traces and registering threads '''\n        self._create_pydb_command_thread()\n        if self.redirect_output or self.signature_factory is not None or self.thread_analyser is not None:\n            # we need all data to be sent to IDE even after program finishes\n            self._create_check_output_thread()\n            # turn off frame evaluation for concurrency visualization\n            self.frame_eval_func = None\n\n        self.patch_threads()\n        if enable_tracing_from_start:\n            pydevd_tracing.SetTrace(self.trace_dispatch)\n\n        if show_tracing_warning or show_frame_eval_warning:\n            cmd = self.cmd_factory.make_show_warning_message(\"cython\")\n            self.writer.add_command(cmd)\n\n    def patch_threads(self):\n        try:\n            # not available in jython!\n            threading.settrace(self.trace_dispatch)  # for all future threads\n        except:\n            pass\n\n        from _pydev_bundle.pydev_monkey import patch_thread_modules\n        patch_thread_modules()\n\n    def run(self, file, globals=None, locals=None, is_module=False, set_trace=True):\n        module_name = None\n        entry_point_fn = ''\n        if is_module:\n            # When launching with `python -m <module>`, python automatically adds\n            # an empty path to the PYTHONPATH which resolves files in the current\n            # directory, so, depending how pydevd itself is launched, we may need\n            # to manually add such an entry to properly resolve modules in the\n            # current directory\n            if '' not in sys.path:\n                sys.path.insert(0, '')\n            file, _,  entry_point_fn = file.partition(':')\n            module_name = file\n            filename = get_fullname(file)\n            if filename is None:\n                mod_dir = get_package_dir(module_name)\n                if mod_dir is None:\n                    sys.stderr.write(\"No module named %s\\n\" % file)\n                    return\n                else:\n                    filename = get_fullname(\"%s.__main__\" % module_name)\n                    if filename is None:\n                        sys.stderr.write(\"No module named %s\\n\" % file)\n                        return\n                    else:\n                        file = filename\n            else:\n                file = filename\n                mod_dir = os.path.dirname(filename)\n                main_py = os.path.join(mod_dir, '__main__.py')\n                main_pyc = os.path.join(mod_dir, '__main__.pyc')\n                if filename.endswith('__init__.pyc'):\n                    if os.path.exists(main_pyc):\n                        filename = main_pyc\n                    elif os.path.exists(main_py):\n                        filename = main_py\n                elif filename.endswith('__init__.py'):\n                    if os.path.exists(main_pyc) and not os.path.exists(main_py):\n                        filename = main_pyc\n                    elif os.path.exists(main_py):\n                        filename = main_py\n\n            sys.argv[0] = filename\n\n        if os.path.isdir(file):\n            new_target = os.path.join(file, '__main__.py')\n            if os.path.isfile(new_target):\n                file = new_target\n\n        m = None\n        if globals is None:\n            m = save_main_module(file, 'pydevd')\n            globals = m.__dict__\n            try:\n                globals['__builtins__'] = __builtins__\n            except NameError:\n                pass  # Not there on Jython...\n\n        if locals is None:\n            locals = globals\n\n        # Predefined (writable) attributes: __name__ is the module's name;\n        # __doc__ is the module's documentation string, or None if unavailable;\n        # __file__ is the pathname of the file from which the module was loaded,\n        # if it was loaded from a file. The __file__ attribute is not present for\n        # C modules that are statically linked into the interpreter; for extension modules\n        # loaded dynamically from a shared library, it is the pathname of the shared library file.\n\n\n        # I think this is an ugly hack, bug it works (seems to) for the bug that says that sys.path should be the same in\n        # debug and run.\n        if sys.path[0] != '' and m is not None and m.__file__.startswith(sys.path[0]):\n            # print >> sys.stderr, 'Deleting: ', sys.path[0]\n            del sys.path[0]\n\n        if not is_module:\n            # now, the local directory has to be added to the pythonpath\n            # sys.path.insert(0, os.getcwd())\n            # Changed: it's not the local directory, but the directory of the file launched\n            # The file being run must be in the pythonpath (even if it was not before)\n            sys.path.insert(0, os.path.split(rPath(file))[0])\n\n        if set_trace:\n\n            while not self.ready_to_run:\n                time.sleep(0.1)  # busy wait until we receive run command\n\n            if self.break_on_caught_exceptions or self.has_plugin_line_breaks or self.has_plugin_exception_breaks \\\n                    or self.signature_factory:\n                # disable frame evaluation if there are exception breakpoints with 'On raise' activation policy\n                # or if there are plugin exception breakpoints or if collecting run-time types is enabled\n                self.frame_eval_func = None\n\n            # call prepare_to_run when we already have all information about breakpoints\n            self.prepare_to_run()\n\n        t = threadingCurrentThread()\n        thread_id = get_current_thread_id(t)\n\n        if self.thread_analyser is not None:\n            wrap_threads()\n            self.thread_analyser.set_start_time(cur_time())\n            send_message(\"threading_event\", 0, t.getName(), thread_id, \"thread\", \"start\", file, 1, None, parent=get_thread_id(t))\n\n        if self.asyncio_analyser is not None:\n            if IS_PY36_OR_GREATER:\n                wrap_asyncio()\n            # we don't have main thread in asyncio graph, so we should add a fake event\n            send_message(\"asyncio_event\", 0, \"Task\", \"Task\", \"thread\", \"stop\", file, 1, frame=None, parent=None)\n\n        try:\n            if INTERACTIVE_MODE_AVAILABLE:\n                self.init_matplotlib_support()\n        except:\n            sys.stderr.write(\"Matplotlib support in debugger failed\\n\")\n            traceback.print_exc()\n\n        if hasattr(sys, 'exc_clear'):\n            # we should clean exception information in Python 2, before user's code execution\n            sys.exc_clear()\n\n        # Notify that the main thread is created.\n        self.notify_thread_created(thread_id, t)\n\n        if self.stop_on_start:\n            info = set_additional_thread_info(t)\n            t.additional_info.pydev_step_cmd = CMD_STEP_INTO_MY_CODE\n\n        # Note: important: set the tracing right before calling _exec.\n        if set_trace:\n            self.enable_tracing()\n\n        return self._exec(is_module, entry_point_fn, module_name, file, globals, locals)\n\n    def _exec(self, is_module, entry_point_fn, module_name, file, globals, locals):\n        '''\n        This function should have frames tracked by unhandled exceptions (the `_exec` name is important).\n        '''\n        if not is_module:\n            pydev_imports.execfile(file, globals, locals)  # execute the script\n        else:\n            # treat ':' as a separator between module and entry point function\n            # if there is no entry point we run we same as with -m switch. Otherwise we perform\n            # an import and execute the entry point\n            if entry_point_fn:\n                mod = __import__(module_name, level=0, fromlist=[entry_point_fn], globals=globals, locals=locals)\n                func = getattr(mod, entry_point_fn)\n                func()\n            else:\n                # Run with the -m switch\n                import runpy\n                if hasattr(runpy, '_run_module_as_main'):\n                    # Newer versions of Python actually use this when the -m switch is used.\n                    if sys.version_info[:2] <= (2, 6):\n                        runpy._run_module_as_main(module_name, set_argv0=False)\n                    else:\n                        runpy._run_module_as_main(module_name, alter_argv=False)\n                else:\n                    runpy.run_module(module_name)\n        return globals\n\n    def exiting(self):\n        # noinspection PyBroadException\n        try:\n            sys.stdout.flush()\n        except:\n            pass\n        # noinspection PyBroadException\n        try:\n            sys.stderr.flush()\n        except:\n            pass\n        self.check_output_redirect()\n        cmd = self.cmd_factory.make_exit_message()\n        self.writer.add_command(cmd)\n\n    def wait_for_commands(self, globals):\n        self._activate_mpl_if_needed()\n\n        thread = threading.currentThread()\n        from _pydevd_bundle import pydevd_frame_utils\n        frame = pydevd_frame_utils.Frame(None, -1, pydevd_frame_utils.FCode(\"Console\",\n                                                                            os.path.abspath(os.path.dirname(__file__))), globals, globals)\n        thread_id = get_current_thread_id(thread)\n        pydevd_vars.add_additional_frame_by_id(thread_id, {id(frame): frame})\n\n        cmd = self.cmd_factory.make_show_console_message(thread_id, frame)\n        self.writer.add_command(cmd)\n\n        while True:\n            if self.mpl_in_use:\n                # call input hooks if only matplotlib is in use\n                self._call_mpl_hook()\n            self.process_internal_commands()\n            time.sleep(0.01)\n\n    trace_dispatch = _trace_dispatch\n    frame_eval_func = frame_eval_func\n    dummy_trace_dispatch = dummy_trace_dispatch\n\n    # noinspection SpellCheckingInspection\n    @staticmethod\n    def stoptrace():\n        \"\"\"A proxy method for calling :func:`stoptrace` from the modules where direct import\n        is impossible because, for example, a circular dependency.\"\"\"\n        PyDBDaemonThread.created_pydb_daemon_threads = {}\n        stoptrace()\n\n\ndef set_debug(setup):\n    setup['DEBUG_RECORD_SOCKET_READS'] = True\n    setup['DEBUG_TRACE_BREAKPOINTS'] = 1\n    setup['DEBUG_TRACE_LEVEL'] = 3\n\n\ndef enable_qt_support(qt_support_mode):\n    from _pydev_bundle import pydev_monkey_qt\n    pydev_monkey_qt.patch_qt(qt_support_mode)\n\n\ndef dump_threads(stream=None):\n    '''\n    Helper to dump thread info (default is printing to stderr).\n    '''\n    pydevd_utils.dump_threads(stream)\n\n\ndef usage(do_exit=True, exit_code=0):\n    sys.stdout.write('Usage:\\n')\n    sys.stdout.write('\\tpydevd.py --port N [(--client hostname) | --server] --file executable [file_options]\\n')\n    if do_exit:\n        sys.exit(exit_code)\n\n\nclass _CustomWriter(object):\n\n    def __init__(self, out_ctx, wrap_stream, wrap_buffer, on_write=None):\n        '''\n        :param out_ctx:\n            1=stdout and 2=stderr\n\n        :param wrap_stream:\n            Either sys.stdout or sys.stderr.\n\n        :param bool wrap_buffer:\n            If True the buffer attribute (which wraps writing bytes) should be\n            wrapped.\n\n        :param callable(str) on_write:\n            May be a custom callable to be called when to write something.\n            If not passed the default implementation will create an io message\n            and send it through the debugger.\n        '''\n        self.encoding = getattr(wrap_stream, 'encoding', os.environ.get('PYTHONIOENCODING', 'utf-8'))\n        self._out_ctx = out_ctx\n        if wrap_buffer:\n            self.buffer = _CustomWriter(out_ctx, wrap_stream, wrap_buffer=False, on_write=on_write)\n        self._on_write = on_write\n\n    def flush(self):\n        pass  # no-op here\n\n    def write(self, s):\n        if self._on_write is not None:\n            self._on_write(s)\n            return\n\n        if s:\n            if IS_PY2:\n                # Need s in bytes\n                if isinstance(s, unicode):\n                    # Note: python 2.6 does not accept the \"errors\" keyword.\n                    s = s.encode('utf-8', 'replace')\n            else:\n                # Need s in str\n                if isinstance(s, bytes):\n                    s = s.decode(self.encoding, errors='replace')\n\n            py_db = get_global_debugger()\n            if py_db is not None:\n                # Note that the actual message contents will be a xml with utf-8, although\n                # the entry is str on py3 and bytes on py2.\n                cmd = py_db.cmd_factory.make_io_message(s, self._out_ctx)\n                py_db.writer.add_command(cmd)\n\n\ndef init_stdout_redirect(on_write=None):\n    if not hasattr(sys, '_pydevd_out_buffer_'):\n        wrap_buffer = True if not IS_PY2 else False\n        original = sys.stdout\n        sys._pydevd_out_buffer_ = _CustomWriter(1, original, wrap_buffer, on_write)\n        sys.stdout_original = original\n        sys.stdout = pydevd_io.IORedirector(original, sys._pydevd_out_buffer_, wrap_buffer) #@UndefinedVariable\n\ndef init_stderr_redirect(on_write=None):\n    if not hasattr(sys, '_pydevd_err_buffer_'):\n        wrap_buffer = True if not IS_PY2 else False\n        original = sys.stderr\n        sys._pydevd_err_buffer_ = _CustomWriter(2, original, wrap_buffer, on_write)\n        sys.stderr_original = original\n        sys.stderr = pydevd_io.IORedirector(original, sys._pydevd_err_buffer_, wrap_buffer) #@UndefinedVariable\n\n\n#=======================================================================================================================\n# settrace\n#=======================================================================================================================\ndef settrace(\n    host=None,\n    stdoutToServer=False,\n    stderrToServer=False,\n    port=5678,\n    suspend=True,\n    trace_only_current_thread=False,\n    overwrite_prev_trace=False,\n    patch_multiprocessing=False,\n    stop_at_frame=None,\n    ):\n    '''Sets the tracing function with the pydev debug function and initializes needed facilities.\n\n    @param host: the user may specify another host, if the debug server is not in the same machine (default is the local\n        host)\n\n    @param stdoutToServer: when this is true, the stdout is passed to the debug server\n\n    @param stderrToServer: when this is true, the stderr is passed to the debug server\n        so that they are printed in its console and not in this process console.\n\n    @param port: specifies which port to use for communicating with the server (note that the server must be started\n        in the same port). @note: currently it's hard-coded at 5678 in the client\n\n    @param suspend: whether a breakpoint should be emulated as soon as this function is called.\n\n    @param trace_only_current_thread: determines if only the current thread will be traced or all current and future\n        threads will also have the tracing enabled.\n\n    @param overwrite_prev_trace: deprecated\n\n    @param patch_multiprocessing: if True we'll patch the functions which create new processes so that launched\n        processes are debugged.\n\n    @param stop_at_frame: if passed it'll stop at the given frame, otherwise it'll stop in the function which\n        called this method.\n    '''\n    _set_trace_lock.acquire()\n    try:\n        _locked_settrace(\n            host,\n            stdoutToServer,\n            stderrToServer,\n            port,\n            suspend,\n            trace_only_current_thread,\n            patch_multiprocessing,\n            stop_at_frame,\n        )\n    finally:\n        _set_trace_lock.release()\n\n\n\n_set_trace_lock = thread.allocate_lock()\n\ndef _locked_settrace(\n    host,\n    stdoutToServer,\n    stderrToServer,\n    port,\n    suspend,\n    trace_only_current_thread,\n    patch_multiprocessing,\n    stop_at_frame,\n    ):\n    if patch_multiprocessing:\n        try:\n            from _pydev_bundle import pydev_monkey\n        except:\n            pass\n        else:\n            pydev_monkey.patch_new_process_functions()\n\n    global connected\n    global bufferStdOutToServer\n    global bufferStdErrToServer\n\n    # Reset created PyDB daemon threads after fork - parent threads don't exist in a child process.\n    PyDBDaemonThread.created_pydb_daemon_threads = {}\n\n    if not connected:\n        pydevd_vm_type.setup_type()\n\n        if SetupHolder.setup is None:\n            setup = {\n                'client': host,  # dispatch expects client to be set to the host address when server is False\n                'server': False,\n                'port': int(port),\n                'multiprocess': patch_multiprocessing,\n            }\n            SetupHolder.setup = setup\n\n        debugger = PyDB()\n        pydev_log.debug(\"pydev debugger: process %d is connecting\\n\" % os.getpid())\n        debugger.connect(host, port)  # Note: connect can raise error.\n\n        # Mark connected only if it actually succeeded.\n        connected = True\n        bufferStdOutToServer = stdoutToServer\n        bufferStdErrToServer = stderrToServer\n\n        if bufferStdOutToServer:\n            init_stdout_redirect()\n\n        if bufferStdErrToServer:\n            init_stderr_redirect()\n\n        patch_stdin(debugger)\n\n        t = threadingCurrentThread()\n        additional_info = set_additional_thread_info(t)\n\n        while not debugger.ready_to_run:\n            time.sleep(0.1)  # busy wait until we receive run command\n\n        # Set the tracing only\n        debugger.set_trace_for_frame_and_parents(get_frame().f_back)\n\n        CustomFramesContainer.custom_frames_lock.acquire()  # @UndefinedVariable\n        try:\n            for _frameId, custom_frame in dict_iter_items(CustomFramesContainer.custom_frames):\n                debugger.set_trace_for_frame_and_parents(custom_frame.frame)\n        finally:\n            CustomFramesContainer.custom_frames_lock.release()  # @UndefinedVariable\n\n        debugger.start_auxiliary_daemon_threads()\n\n        debugger.enable_tracing(apply_to_all_threads=True)\n\n        if not trace_only_current_thread:\n            # Trace future threads?\n            debugger.patch_threads()\n\n            # As this is the first connection, also set tracing for any untraced threads\n            debugger.set_tracing_for_untraced_contexts(ignore_current_thread=True)\n\n        # Stop the tracing as the last thing before the actual shutdown for a clean exit.\n        atexit.register(stoptrace)\n\n    else:\n        # ok, we're already in debug mode, with all set, so, let's just set the break\n        debugger = get_global_debugger()\n\n        debugger.set_trace_for_frame_and_parents(get_frame().f_back)\n\n        t = threadingCurrentThread()\n        additional_info = set_additional_thread_info(t)\n\n        debugger.enable_tracing()\n\n        if not trace_only_current_thread:\n            # Trace future threads?\n            debugger.patch_threads()\n\n    # Suspend as the last thing after all tracing is in place.\n    if suspend:\n        if stop_at_frame is not None:\n            # If the step was set we have to go to run state and\n            # set the proper frame for it to stop.\n            additional_info.pydev_state = STATE_RUN\n            additional_info.pydev_step_cmd = CMD_STEP_OVER\n            additional_info.pydev_step_stop = stop_at_frame\n            additional_info.suspend_type = PYTHON_SUSPEND\n        else:\n            # Ask to break as soon as possible.\n            debugger.set_suspend(t, CMD_SET_BREAK)\n\n\nclass Dispatcher(object):\n    def __init__(self):\n        self.port = None\n\n    def connect(self, host, port):\n        self.host  = host\n        self.port = port\n        self.client = start_client(self.host, self.port)\n        self.reader = DispatchReader(self)\n        self.reader.pydev_do_not_trace = False  # We run reader in the same thread so we don't want to loose tracing.\n        self.reader.run()\n\n    def close(self):\n        try:\n            self.reader.do_kill_pydev_thread()\n        except :\n            pass\n\nclass DispatchReader(ReaderThread):\n    def __init__(self, dispatcher):\n        self.dispatcher = dispatcher\n        ReaderThread.__init__(self, self.dispatcher.client)\n\n    @overrides(ReaderThread._on_run)\n    def _on_run(self):\n        dummy_thread = threading.current_thread()\n        dummy_thread.is_pydev_daemon_thread = False\n        return ReaderThread._on_run(self)\n\n    def handle_except(self):\n        ReaderThread.handle_except(self)\n\n    def process_command(self, cmd_id, seq, text):\n        if cmd_id == 99:\n            self.dispatcher.port = int(text)\n            self.killReceived = True\n\n\ndef _should_use_existing_connection(setup):\n    '''\n    The new connection dispatch approach is used by PyDev when the `multiprocess` option is set,\n    the existing connection approach is used by PyCharm when the `multiproc` option is set.\n    '''\n    return setup.get('multiproc', False)\n\n\ndef dispatch():\n    setup = SetupHolder.setup\n    host = setup['client']\n    port = setup['port']\n    if _should_use_existing_connection(setup):\n        dispatcher = Dispatcher()\n        try:\n            dispatcher.connect(host, port)\n            port = dispatcher.port\n        finally:\n            dispatcher.close()\n    return host, port\n\n\ndef settrace_forked():\n    '''\n    When creating a fork from a process in the debugger, we need to reset the whole debugger environment!\n    '''\n    from _pydevd_bundle.pydevd_constants import GlobalDebuggerHolder\n    GlobalDebuggerHolder.global_dbg = None\n\n    from _pydevd_frame_eval.pydevd_frame_eval_main import clear_thread_local_info\n    host, port = dispatch()\n\n    import pydevd_tracing\n    pydevd_tracing.restore_sys_set_trace_func()\n\n    if port is not None:\n        global connected\n        connected = False\n        global forked\n        forked = True\n\n        custom_frames_container_init()\n\n        if clear_thread_local_info is not None:\n            clear_thread_local_info()\n\n        settrace(\n                host,\n                port=port,\n                suspend=False,\n                trace_only_current_thread=False,\n                overwrite_prev_trace=True,\n                patch_multiprocessing=True,\n        )\n\n#=======================================================================================================================\n# SetupHolder\n#=======================================================================================================================\nclass SetupHolder:\n\n    setup = None\n\n\ndef apply_debugger_options(setup_options):\n    \"\"\"\n\n    :type setup_options: dict[str, bool]\n    \"\"\"\n    default_options = {'save-signatures': False, 'qt-support': ''}\n    default_options.update(setup_options)\n    setup_options = default_options\n\n    debugger = GetGlobalDebugger()\n    if setup_options['save-signatures']:\n        if pydevd_vm_type.get_vm_type() == pydevd_vm_type.PydevdVmType.JYTHON:\n            sys.stderr.write(\"Collecting run-time type information is not supported for Jython\\n\")\n        else:\n            # Only import it if we're going to use it!\n            from _pydevd_bundle.pydevd_signature import SignatureFactory\n            debugger.signature_factory = SignatureFactory()\n\n    if setup_options['qt-support']:\n        enable_qt_support(setup_options['qt-support'])\n\n\ndef patch_stdin(debugger):\n    from _pydev_bundle.pydev_stdin import DebugConsoleStdIn\n    orig_stdin = sys.stdin\n    sys.stdin = DebugConsoleStdIn(debugger, orig_stdin)\n\n\ndef handle_keyboard_interrupt():\n    debugger = get_global_debugger()\n\n    if not debugger:\n        return\n\n    debugger.disable_tracing()\n    _, value, tb = sys.exc_info()\n\n    while tb:\n        filename = tb.tb_frame.f_code.co_filename\n        if debugger.in_project_scope(filename) and '_pydevd' not in filename:\n            break\n        tb = tb.tb_next\n    if tb:\n        limit = 1\n        tb_next = tb.tb_next\n\n        # When stopping the suspended debugger, traceback can contain two stack traces with the same frame.\n        if tb_next and tb_next.tb_frame is tb.tb_frame:\n            tb_next = None\n\n        while tb_next:\n            filename = tb_next.tb_frame.f_code.co_filename\n            if get_file_type(os.path.basename(filename)) or '_pydevd' in filename:\n                break\n            limit += 1\n            if tb_next.tb_next and tb_next.tb_next.tb_frame is not tb_next.tb_frame:\n                tb_next = tb_next.tb_next\n            else:\n                break\n        try:\n            value = value.with_traceback(tb)\n        except AttributeError:\n            value.__traceback__ = tb\n        value.__cause__ = None\n        traceback.print_exception(type(value), value, tb, limit=limit)\n\n    disable_excepthook()\n\n\n# Dispatch on_debugger_modules_loaded here, after all primary debugger modules are loaded\nfrom _pydevd_bundle.pydevd_extension_api import DebuggerEventHandler\nfrom _pydevd_bundle import pydevd_extension_utils\n\nfor handler in pydevd_extension_utils.extensions_of_type(DebuggerEventHandler):\n    handler.on_debugger_modules_loaded(debugger_version=__version__)\n#=======================================================================================================================\n# main\n#=======================================================================================================================\ndef main():\n\n    # parse the command line. --file is our last argument that is required\n    try:\n        from _pydevd_bundle.pydevd_command_line_handling import process_command_line\n        setup = process_command_line(sys.argv)\n        SetupHolder.setup = setup\n    except ValueError:\n        traceback.print_exc()\n        usage(exit_code=1)\n\n    # noinspection PyUnboundLocalVariable\n    if setup['help']:\n        usage()\n\n    if setup['print-in-debugger-startup']:\n        try:\n            pid = ' (pid: %s)' % os.getpid()\n        except:\n            pid = ''\n        sys.stderr.write(\"pydev debugger: starting%s\\n\" % pid)\n\n    fix_getpass.fix_getpass()\n\n    pydev_log.debug(\"Executing file %s\" % setup['file'])\n    pydev_log.debug(\"arguments: %s\"% str(sys.argv))\n\n\n    pydevd_vm_type.setup_type(setup.get('vm_type', None))\n\n    if SHOW_DEBUG_INFO_ENV:\n        set_debug(setup)\n\n    DebugInfoHolder.DEBUG_RECORD_SOCKET_READS = setup.get('DEBUG_RECORD_SOCKET_READS', DebugInfoHolder.DEBUG_RECORD_SOCKET_READS)\n    DebugInfoHolder.DEBUG_TRACE_BREAKPOINTS = setup.get('DEBUG_TRACE_BREAKPOINTS', DebugInfoHolder.DEBUG_TRACE_BREAKPOINTS)\n    DebugInfoHolder.DEBUG_TRACE_LEVEL = setup.get('DEBUG_TRACE_LEVEL', DebugInfoHolder.DEBUG_TRACE_LEVEL)\n\n    port = setup['port']\n    host = setup['client']\n    f = setup['file']\n    fix_app_engine_debug = False\n\n    debugger = PyDB()\n\n    try:\n        from _pydev_bundle import pydev_monkey\n    except:\n        pass #Not usable on jython 2.1\n    else:\n        if setup['multiprocess']: # PyDev\n            pydev_monkey.patch_new_process_functions()\n\n        elif setup['multiproc']: # PyCharm\n            pydev_log.debug(\"Started in multiproc mode\\n\")\n\n            dispatcher = Dispatcher()\n            try:\n                dispatcher.connect(host, port)\n                if dispatcher.port is not None:\n                    port = dispatcher.port\n                    pydev_log.debug(\"Received port %d\\n\" % port)\n                    pydev_log.debug(\"pydev debugger: process %d is connecting\\n\" % os.getpid())\n\n                    try:\n                        pydev_monkey.patch_new_process_functions()\n                    except:\n                        pydev_log.error(\"Error patching process functions\\n\")\n                        traceback.print_exc()\n                else:\n                    pydev_log.error(\"pydev debugger: couldn't get port for new debug process\\n\")\n            finally:\n                dispatcher.close()\n        else:\n            try:\n                pydev_monkey.patch_new_process_functions_with_warning()\n            except:\n                pydev_log.error(\"Error patching process functions\\n\")\n                traceback.print_exc()\n\n            # Only do this patching if we're not running with multiprocess turned on.\n            if f.find('dev_appserver.py') != -1:\n                if os.path.basename(f).startswith('dev_appserver.py'):\n                    appserver_dir = os.path.dirname(f)\n                    version_file = os.path.join(appserver_dir, 'VERSION')\n                    if os.path.exists(version_file):\n                        try:\n                            stream = open(version_file, 'r')\n                            try:\n                                for line in stream.read().splitlines():\n                                    line = line.strip()\n                                    if line.startswith('release:'):\n                                        line = line[8:].strip()\n                                        version = line.replace('\"', '')\n                                        version = version.split('.')\n                                        if int(version[0]) > 1:\n                                            fix_app_engine_debug = True\n\n                                        elif int(version[0]) == 1:\n                                            if int(version[1]) >= 7:\n                                                # Only fix from 1.7 onwards\n                                                fix_app_engine_debug = True\n                                        break\n                            finally:\n                                stream.close()\n                        except:\n                            traceback.print_exc()\n\n    try:\n        # In the default run (i.e.: run directly on debug mode), we try to patch stackless as soon as possible\n        # on a run where we have a remote debug, we may have to be more careful because patching stackless means\n        # that if the user already had a stackless.set_schedule_callback installed, he'd loose it and would need\n        # to call it again (because stackless provides no way of getting the last function which was registered\n        # in set_schedule_callback).\n        #\n        # So, ideally, if there's an application using stackless and the application wants to use the remote debugger\n        # and benefit from stackless debugging, the application itself must call:\n        #\n        # import pydevd_stackless\n        # pydevd_stackless.patch_stackless()\n        #\n        # itself to be able to benefit from seeing the tasklets created before the remote debugger is attached.\n        from _pydevd_bundle import pydevd_stackless\n        pydevd_stackless.patch_stackless()\n    except:\n        # It's ok not having stackless there...\n        try:\n            sys.exc_clear()  # the exception information should be cleaned in Python 2\n        except:\n            pass\n\n    is_module = setup['module']\n    patch_stdin(debugger)\n\n    if fix_app_engine_debug:\n        sys.stderr.write(\"pydev debugger: google app engine integration enabled\\n\")\n        curr_dir = os.path.dirname(__file__)\n        app_engine_startup_file = os.path.join(curr_dir, 'pydev_app_engine_debug_startup.py')\n\n        sys.argv.insert(1, '--python_startup_script=' + app_engine_startup_file)\n        import json\n        setup['pydevd'] = __file__\n        sys.argv.insert(2, '--python_startup_args=%s' % json.dumps(setup),)\n        sys.argv.insert(3, '--automatic_restart=no')\n        sys.argv.insert(4, '--max_module_instances=1')\n\n        # Run the dev_appserver\n        debugger.run(setup['file'], None, None, is_module, set_trace=False)\n    else:\n        if setup['save-threading']:\n            debugger.thread_analyser = ThreadingLogger()\n        if setup['save-asyncio']:\n            if IS_PY34_OR_GREATER:\n                debugger.asyncio_analyser = AsyncioLogger()\n\n        apply_debugger_options(setup)\n\n        try:\n            debugger.connect(host, port)\n        except:\n            sys.stderr.write(\"Could not connect to %s: %s\\n\" % (host, port))\n            traceback.print_exc()\n            sys.exit(1)\n\n        global connected\n        connected = True  # Mark that we're connected when started from inside ide.\n        try:\n            globals = debugger.run(setup['file'], None, None, is_module)\n        except KeyboardInterrupt as e:\n            handle_keyboard_interrupt()\n            raise\n\n        if setup['cmd-line']:\n            debugger.wait_for_commands(globals)\n\nif __name__ == '__main__':\n    main()\n", 2173], "/home/edx/.pyenv/versions/examples/lib/python3.8/site-packages/viztracer/tracer.py": ["# Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0\n# For details: https://github.com/gaogaotiantian/viztracer/blob/master/NOTICE.txt\n\nimport builtins\nimport gc\nfrom io import StringIO\nimport os\nfrom typing import Any, Dict, Optional, Sequence, Union\nimport viztracer.snaptrace as snaptrace  # type: ignore\n\nfrom . import __version__\n\n\nclass _VizTracer:\n    def __init__(\n            self,\n            tracer_entries: int = 1000000,\n            max_stack_depth: int = -1,\n            include_files: Optional[Sequence[str]] = None,\n            exclude_files: Optional[Sequence[str]] = None,\n            ignore_c_function: bool = False,\n            ignore_frozen: bool = False,\n            log_func_retval: bool = False,\n            log_func_args: bool = False,\n            log_print: bool = False,\n            log_gc: bool = False,\n            log_async: bool = False,\n            trace_self: bool = False,\n            min_duration: float = 0,\n            vdb: bool = False):\n        self.initialized = False\n        self.enable = False\n        self.parsed = False\n        self._tracer = snaptrace.Tracer(tracer_entries)\n        self.tracer_entries = tracer_entries\n        self.data: Dict[str, Any] = {}\n        self.verbose = 0\n        self.max_stack_depth = max_stack_depth\n        self.curr_stack_depth = 0\n        self.include_files = include_files\n        self.exclude_files = exclude_files\n        self.ignore_c_function = ignore_c_function\n        self.ignore_frozen = ignore_frozen\n        self.log_func_retval = log_func_retval\n        self.log_func_args = log_func_args\n        self.log_async = log_async\n        self.min_duration = min_duration\n        self.vdb = vdb\n        self.log_print = log_print\n        self.log_gc = log_gc\n        self.trace_self = trace_self\n        self.system_print = builtins.print\n        self.total_entries = 0\n        self.gc_start_args: Dict[str, int] = {}\n        self.initialized = True\n\n    @property\n    def max_stack_depth(self) -> int:\n        return self.__max_stack_depth\n\n    @max_stack_depth.setter\n    def max_stack_depth(self, max_stack_depth: Union[str, int]):\n        if isinstance(max_stack_depth, str):\n            try:\n                self.__max_stack_depth = int(max_stack_depth)\n            except ValueError:\n                raise ValueError(\"Error when trying to convert max_stack_depth {} to integer.\".format(max_stack_depth))\n        elif isinstance(max_stack_depth, int):\n            self.__max_stack_depth = max_stack_depth\n        else:\n            raise ValueError(\"Error when trying to convert max_stack_depth {} to integer.\".format(max_stack_depth))\n        self.config()\n\n    @property\n    def include_files(self) -> Optional[Sequence[str]]:\n        return self.__include_files\n\n    @include_files.setter\n    def include_files(self, include_files: Optional[Sequence[str]]):\n        if include_files is None:\n            self.__include_files = None\n        elif isinstance(include_files, list):\n            if include_files:\n                self.__include_files = include_files[:] + [os.path.abspath(f) for f in include_files if not f.startswith(\"/\")]\n            else:\n                self.__include_files = None\n        else:\n            raise ValueError(\"include_files has to be a list\")\n        self.config()\n\n    @property\n    def exclude_files(self) -> Optional[Sequence[str]]:\n        return self.__exclude_files\n\n    @exclude_files.setter\n    def exclude_files(self, exclude_files: Optional[Sequence[str]]):\n        if exclude_files is None:\n            self.__exclude_files = None\n        elif isinstance(exclude_files, list):\n            if exclude_files:\n                self.__exclude_files = exclude_files[:] + [os.path.abspath(f) for f in exclude_files if not f.startswith(\"/\")]\n            else:\n                self.__exclude_files = None\n        else:\n            raise ValueError(\"exclude_files has to be a list\")\n        self.config()\n\n    @property\n    def ignore_c_function(self) -> bool:\n        return self.__ignore_c_function\n\n    @ignore_c_function.setter\n    def ignore_c_function(self, ignore_c_function: bool):\n        if isinstance(ignore_c_function, bool):\n            self.__ignore_c_function = ignore_c_function\n        else:\n            raise ValueError(\"ignore_c_function needs to be True or False, not {}\".format(ignore_c_function))\n        self.config()\n\n    @property\n    def ignore_frozen(self) -> bool:\n        return self.__ignore_frozen\n\n    @ignore_frozen.setter\n    def ignore_frozen(self, ignore_frozen: bool):\n        if isinstance(ignore_frozen, bool):\n            self.__ignore_frozen = ignore_frozen\n        else:\n            raise ValueError(\"ignore_frozen needs to be True or False, not {}\".format(ignore_frozen))\n        self.config()\n\n    @property\n    def log_func_retval(self) -> bool:\n        return self.__log_func_retval\n\n    @log_func_retval.setter\n    def log_func_retval(self, log_func_retval: bool):\n        if isinstance(log_func_retval, bool):\n            self.__log_func_retval = log_func_retval\n        else:\n            raise ValueError(\"log_func_retval needs to be True or False, not {}\".format(log_func_retval))\n        self.config()\n\n    @property\n    def log_async(self) -> bool:\n        return self.__log_async\n\n    @log_async.setter\n    def log_async(self, log_async: bool):\n        if isinstance(log_async, bool):\n            self.__log_async = log_async\n        else:\n            raise ValueError(\"log_async needs to be True or False, not {}\".format(log_async))\n        self.config()\n\n    @property\n    def log_print(self) -> bool:\n        return self.__log_print\n\n    @log_print.setter\n    def log_print(self, log_print: bool):\n        if isinstance(log_print, bool):\n            self.__log_print = log_print\n        else:\n            raise ValueError(\"log_print needs to be True or False, not {}\".format(log_print))\n\n    @property\n    def log_func_args(self) -> bool:\n        return self.__log_func_args\n\n    @log_func_args.setter\n    def log_func_args(self, log_func_args: bool):\n        if isinstance(log_func_args, bool):\n            self.__log_func_args = log_func_args\n        else:\n            raise ValueError(\"log_func_args needs to be True or False, not {}\".format(log_func_args))\n        self.config()\n\n    @property\n    def log_gc(self) -> bool:\n        return self.__log_gc\n\n    @log_gc.setter\n    def log_gc(self, log_gc: bool):\n        if isinstance(log_gc, bool):\n            self.__log_gc = log_gc\n            if log_gc:\n                gc.callbacks.append(self.add_garbage_collection)\n            elif self.add_garbage_collection in gc.callbacks:\n                gc.callbacks.remove(self.add_garbage_collection)\n        else:\n            raise ValueError(\"log_gc needs to be True or False, not {}\".format(log_gc))\n\n    @property\n    def vdb(self) -> bool:\n        return self.__vdb\n\n    @vdb.setter\n    def vdb(self, vdb: bool):\n        if isinstance(vdb, bool):\n            self.__vdb = vdb\n        else:\n            raise ValueError(\"vdb needs to be True or False, not {}\".format(vdb))\n        self.config()\n\n    @property\n    def verbose(self) -> int:\n        return self.__verbose\n\n    @verbose.setter\n    def verbose(self, verbose: Union[str, int]):\n        if isinstance(verbose, str):\n            try:\n                self.__verbose = int(verbose)\n            except ValueError:\n                raise ValueError(\"Verbose needs to be an integer, not {}\".format(verbose))\n        elif isinstance(verbose, int):\n            self.__verbose = verbose\n        else:\n            raise ValueError(\"Verbose needs to be an integer, not {}\".format(verbose))\n        self.config()\n\n    @property\n    def min_duration(self) -> float:\n        return self.__min_duration\n\n    @min_duration.setter\n    def min_duration(self, min_duration: float):\n        if isinstance(min_duration, int) or isinstance(min_duration, float):\n            self.__min_duration = float(min_duration)\n        else:\n            raise ValueError(\"duration needs to be a float, not {}\".format(min_duration))\n        self.config()\n\n    def config(self):\n        if not self.initialized:\n            return\n\n        cfg = {\n            \"verbose\": self.verbose,\n            \"lib_file_path\": os.path.dirname(os.path.realpath(__file__)),\n            \"max_stack_depth\": self.max_stack_depth,\n            \"include_files\": self.include_files,\n            \"exclude_files\": self.exclude_files,\n            \"ignore_c_function\": self.ignore_c_function,\n            \"ignore_frozen\": self.ignore_frozen,\n            \"log_func_retval\": self.log_func_retval,\n            \"vdb\": self.vdb,\n            \"log_func_args\": self.log_func_args,\n            \"log_async\": self.log_async,\n            \"trace_self\": self.trace_self,\n            \"min_duration\": self.min_duration\n        }\n\n        self._tracer.config(**cfg)\n\n    def start(self):\n        self.enable = True\n        self.parsed = False\n        if self.log_print:\n            self.overload_print()\n        if self.include_files is not None and self.exclude_files is not None:\n            raise Exception(\"include_files and exclude_files can't be both specified!\")\n        self.config()\n        self._tracer.start()\n\n    def stop(self):\n        self.enable = False\n        if self.log_print:\n            self.restore_print()\n        self._tracer.stop()\n\n    def pause(self):\n        if self.enable:\n            self._tracer.pause()\n\n    def resume(self):\n        if self.enable:\n            self._tracer.resume()\n\n    def clear(self):\n        self._tracer.clear()\n\n    def cleanup(self):\n        self._tracer.cleanup()\n\n    def getts(self) -> float:\n        return self._tracer.getts()\n\n    def add_instant(self, name: str, args: Any = None, scope: str = \"g\"):\n        if self.enable:\n            if scope not in [\"g\", \"p\", \"t\"]:\n                print(\"Scope has to be one of g, p, t\")\n                return\n            self._tracer.addinstant(name, args, scope)\n\n    def add_variable(self, name: str, var: Any, event: str = \"instant\"):\n        if self.enable:\n            if event == \"instant\":\n                self.add_instant(f\"{name} = {repr(var)}\", scope=\"p\")\n            elif event == \"counter\":\n                if isinstance(var, int or type(var) is float):\n                    self.add_counter(name, {name: var})\n                else:\n                    raise ValueError(\"{}({}) is not a number\".format(name, var))\n            else:\n                raise ValueError(\"{} is not supported\".format(event))\n\n    def add_counter(self, name: str, args: Dict[str, Any]):\n        if self.enable:\n            self._tracer.addcounter(name, args)\n\n    def add_object(self, ph: str, obj_id: str, name: str, args: Optional[Dict[str, Any]] = None):\n        if self.enable:\n            self._tracer.addobject(ph, obj_id, name, args)\n\n    def add_func_args(self, key: str, value: Any):\n        if self.enable:\n            self._tracer.addfunctionarg(key, value)\n\n    def add_raw(self, raw: Dict[str, Any]):\n        self._tracer.addraw(raw)\n\n    def add_garbage_collection(self, phase: str, info: Dict[str, Any]):\n        if self.enable:\n            if phase == \"start\":\n                args = {\n                    \"collecting\": 1,\n                    \"collected\": 0,\n                    \"uncollectable\": 0\n                }\n                self.add_counter(\"garbage collection\", args)\n                self.gc_start_args = args\n            if phase == \"stop\" and self.gc_start_args:\n                self.gc_start_args[\"collected\"] = info[\"collected\"]\n                self.gc_start_args[\"uncollectable\"] = info[\"uncollectable\"]\n                self.gc_start_args = {}\n                self.add_counter(\"garbage collection\", {\n                    \"collecting\": 0,\n                    \"collected\": 0,\n                    \"uncollectable\": 0\n                })\n\n    def add_func_exec(self, name: str, val: Any, lineno: int):\n        exec_line = \"({}) {} = {}\".format(lineno, name, val)\n        curr_args = self._tracer.getfunctionarg()\n        if not curr_args:\n            self._tracer.addfunctionarg(\"exec_steps\", [exec_line])\n        else:\n            if \"exec_steps\" in curr_args:\n                curr_args[\"exec_steps\"].append(exec_line)\n            else:\n                curr_args[\"exec_steps\"] = [exec_line]\n\n    def _set_curr_stack_depth(self, stack_depth: int):\n        self._tracer.setcurrstack(stack_depth)\n\n    def parse(self) -> int:\n        # parse() is also performance sensitive. We could have a lot of entries\n        # in buffer, so try not to add any overhead when parsing\n        # We parse the buffer into Chrome Trace Event Format\n        self.stop()\n        if not self.parsed:\n            self.data = {\n                \"traceEvents\": self._tracer.load(),\n                \"viztracer_metadata\": {\n                    \"version\": __version__,\n                    \"overflow\": False\n                }\n            }\n            metadata_count = 0\n            for d in self.data[\"traceEvents\"]:\n                if d[\"ph\"] == \"M\":\n                    metadata_count += 1\n                else:\n                    break\n            self.total_entries = len(self.data[\"traceEvents\"]) - metadata_count\n            if self.total_entries == self.tracer_entries:\n                self.data[\"viztracer_metadata\"][\"overflow\"] = True\n            self.parsed = True\n\n        return self.total_entries\n\n    def dump(self, filename: str) -> None:\n        self._tracer.dump(filename)\n\n    def overload_print(self):\n        self.system_print = builtins.print\n\n        def new_print(*args, **kwargs):\n            self.pause()\n            io = StringIO()\n            kwargs[\"file\"] = io\n            self.system_print(*args, **kwargs)\n            self.add_instant(f\"print - {io.getvalue()}\")\n            self.resume()\n        builtins.print = new_print\n\n    def restore_print(self):\n        builtins.print = self.system_print\n", 400]}, "functions": {"_internal_set_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:52)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py", 52], "SetTrace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py:74)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_tracing.py", 74], "_stop_trace (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:235)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 235], "_warn_pydevd_thread_is_traced (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:239)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 239], "is_set (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:513)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 513], "_get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:159)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py", 159], "get_type (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:143)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py", 143], "str_from_providers (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:200)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py", 200], "quote_from_bytes (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:838)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py", 838], "quote (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:767)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py", 767], "make_valid_xml_value (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:28)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py", 28], "is_pandas_container (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:573)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py", 573], "<listcomp> (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:858)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py", 858], "should_evaluate_shape (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:599)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py", 599], "var_to_xml (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py:275)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_xml.py", 275], "find_cached_module (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:4)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py", 4], "find_mod_attr (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py:7)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_helpers.py", 7], "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py:109)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugin_numpy_types.py", 109], "can_provide (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py:6)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd_plugins/extensions/types/pydevd_plugins_django_form_str.py", 6], "is_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:94)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py", 94], "to_string (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:103)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py", 103], "quote_smart (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py:117)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_utils.py", 117], "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:496)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 496], "make_load_full_value_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:994)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 994], "__enter__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:246)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 246], "_put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:212)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py", 212], "_is_owned (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:261)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 261], "notify (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:341)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 341], "__exit__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:249)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 249], "put (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py:121)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/queue.py", 121], "add_command (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:354)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 354], "send_result (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1928)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 1928], "_on_run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:1908)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 1908], "run (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:203)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 203], "__missing__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py:761)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/urllib/parse.py", 761], "_newname (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:734)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 734], "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:222)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 222], "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:505)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 505], "_make_invoke_excepthook (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1177)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1177], "add (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/_weakrefset.py:81)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/_weakrefset.py", 81], "__init__ (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:761)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 761], "__init__ (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py:761)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py", 761], "pydev_start_new_thread (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py:845)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydev_bundle/pydev_monkey.py", 845], "_release_save (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:255)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 255], "_acquire_restore (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:258)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 258], "wait (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:270)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 270], "wait (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:540)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 540], "start (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:834)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 834], "current_thread (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1306)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1306], "<genexpr> (/home/edx/PycharmProjects/examples/threads/utils.py:29)": ["/home/edx/PycharmProjects/examples/threads/utils.py", 29], "__repr__ (/home/edx/PycharmProjects/examples/threads/utils.py:28)": ["/home/edx/PycharmProjects/examples/threads/utils.py", 28], "name (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1031)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1031], "ident (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1047)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1047], "__init__ (/home/edx/PycharmProjects/examples/threads/utils.py:22)": ["/home/edx/PycharmProjects/examples/threads/utils.py", 22], "thread_func (/home/edx/PycharmProjects/examples/threads/basic_thread.py:10)": ["/home/edx/PycharmProjects/examples/threads/basic_thread.py", 10], "timeit_wrapper (/home/edx/PycharmProjects/examples/threads/utils.py:10)": ["/home/edx/PycharmProjects/examples/threads/utils.py", 10], "run (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:859)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 859], "make_thread_killed_message (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py:683)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_comm.py", 683], "notify_thread_not_alive (/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd.py:767)": ["/snap/pycharm-community/267/plugins/python-ce/helpers/pydev/pydevd.py", 767], "daemon (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1095)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1095], "_stop (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:944)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 944], "_wait_for_tstate_lock (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:1017)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 1017], "join (/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py:979)": ["/home/edx/.pyenv/versions/3.8.1/lib/python3.8/threading.py", 979], "main (/home/edx/PycharmProjects/examples/threads/basic_thread.py:22)": ["/home/edx/PycharmProjects/examples/threads/basic_thread.py", 22], "log_print (/home/edx/.pyenv/versions/examples/lib/python3.8/site-packages/viztracer/tracer.py:156)": ["/home/edx/.pyenv/versions/examples/lib/python3.8/site-packages/viztracer/tracer.py", 156]}}}